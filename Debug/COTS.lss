
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  000049c4  00004a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000c4  008000c4  00004abc  2**0
                  ALLOC
  3 .stab         0000528c  00000000  00000000  00004abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001df8  00000000  00000000  00009d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000bb40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000bca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000be2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000de74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ef75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000fef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0001033a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_10>
      2c:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3c       	cpi	r26, 0xCF	; 207
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 79 20 	call	0x40f2	; 0x40f2 <main>
      8a:	0c 94 e0 24 	jmp	0x49c0	; 0x49c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a9 24 	jmp	0x4952	; 0x4952 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ea       	ldi	r26, 0xA3	; 163
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c5 24 	jmp	0x498a	; 0x498a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b5 24 	jmp	0x496a	; 0x496a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b5 24 	jmp	0x496a	; 0x496a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a9 24 	jmp	0x4952	; 0x4952 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ea       	ldi	r24, 0xA3	; 163
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c5 24 	jmp	0x498a	; 0x498a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 ea       	ldi	r22, 0xA3	; 163
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cd 24 	jmp	0x499a	; 0x499a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b5 24 	jmp	0x496a	; 0x496a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b5 24 	jmp	0x496a	; 0x496a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b5 24 	jmp	0x496a	; 0x496a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d5 24 	jmp	0x49aa	; 0x49aa <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TWI_voidMasterInit>:
#include "TWI_private.h"
#include "TWI_config.h"


void TWI_voidMasterInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* set prescaler Value */
	CLR_BIT(TWI_u8_TWSR_REG,0);
     ca6:	a1 e2       	ldi	r26, 0x21	; 33
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e1 e2       	ldi	r30, 0x21	; 33
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8e 7f       	andi	r24, 0xFE	; 254
     cb2:	8c 93       	st	X, r24
	CLR_BIT(TWI_u8_TWSR_REG,1);
     cb4:	a1 e2       	ldi	r26, 0x21	; 33
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e1 e2       	ldi	r30, 0x21	; 33
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8d 7f       	andi	r24, 0xFD	; 253
     cc0:	8c 93       	st	X, r24
	/* Set TWBR Value => 200KHZ */
	TWI_u8_TWBR_REG = 12;
     cc2:	e0 e2       	ldi	r30, 0x20	; 32
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	8c e0       	ldi	r24, 0x0C	; 12
     cc8:	80 83       	st	Z, r24
	/* Enable ACK */
	SET_BIT(TWI_u8_TWCR_REG,6);
     cca:	a6 e5       	ldi	r26, 0x56	; 86
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e6 e5       	ldi	r30, 0x56	; 86
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	80 64       	ori	r24, 0x40	; 64
     cd6:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWI_u8_TWCR_REG,2);
     cd8:	a6 e5       	ldi	r26, 0x56	; 86
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e6 e5       	ldi	r30, 0x56	; 86
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	84 60       	ori	r24, 0x04	; 4
     ce4:	8c 93       	st	X, r24
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <TWI_u8SlaveInit>:
u8   TWI_u8SlaveInit(u8 Copy_u8SlaveAddress)
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <TWI_u8SlaveInit+0x6>
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 83       	std	Y+1, r24	; 0x01
	/* Set Slave Address in TWAR Register */
	TWI_u8_TWAR_REG = Copy_u8SlaveAddress << 1;
     cfc:	e2 e2       	ldi	r30, 0x22	; 34
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	88 0f       	add	r24, r24
     d04:	80 83       	st	Z, r24
	/* Enable ACK */
	SET_BIT(TWI_u8_TWCR_REG,6);
     d06:	a6 e5       	ldi	r26, 0x56	; 86
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e6 e5       	ldi	r30, 0x56	; 86
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 64       	ori	r24, 0x40	; 64
     d12:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWI_u8_TWCR_REG,2);
     d14:	a6 e5       	ldi	r26, 0x56	; 86
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e6 e5       	ldi	r30, 0x56	; 86
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	84 60       	ori	r24, 0x04	; 4
     d20:	8c 93       	st	X, r24
	return Local_u8ErrorStatus;
     d22:	89 81       	ldd	r24, Y+1	; 0x01
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <TWI_enuSendStartCondition>:

TWI_ErrorStatus   TWI_enuSendStartCondition(void)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <TWI_enuSendStartCondition+0x6>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	u8 Local_enuErrorState = TWI_OK;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	89 83       	std	Y+1, r24	; 0x01
		/* Send Start Condition */
		SET_BIT(TWI_u8_TWCR_REG,5);
     d3c:	a6 e5       	ldi	r26, 0x56	; 86
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e6 e5       	ldi	r30, 0x56	; 86
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	80 62       	ori	r24, 0x20	; 32
     d48:	8c 93       	st	X, r24
		/* Clear Flag */
		CLR_BIT(TWI_u8_TWCR_REG,7);
     d4a:	a6 e5       	ldi	r26, 0x56	; 86
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e6 e5       	ldi	r30, 0x56	; 86
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 77       	andi	r24, 0x7F	; 127
     d56:	8c 93       	st	X, r24
		/* wait for the Flag to be set */
		while((TWI_u8_TWCR_REG,7) != 1);
     d58:	e6 e5       	ldi	r30, 0x56	; 86
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	fc cf       	rjmp	.-8      	; 0xd58 <TWI_enuSendStartCondition+0x2a>

00000d60 <TWI_enuSendReStartCondition>:
		}
		return Local_enuErrorState;
}

TWI_ErrorStatus   TWI_enuSendReStartCondition(void)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <TWI_enuSendReStartCondition+0x6>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
	u8 Local_enuErrorState = TWI_OK;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWI_u8_TWCR_REG,5);
     d6e:	a6 e5       	ldi	r26, 0x56	; 86
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e6 e5       	ldi	r30, 0x56	; 86
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	80 62       	ori	r24, 0x20	; 32
     d7a:	8c 93       	st	X, r24
	/* Clear Flag */
	CLR_BIT(TWI_u8_TWCR_REG,7);
     d7c:	a6 e5       	ldi	r26, 0x56	; 86
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e6 e5       	ldi	r30, 0x56	; 86
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8f 77       	andi	r24, 0x7F	; 127
     d88:	8c 93       	st	X, r24
	/* wait for the Flag to be set */
	while((TWI_u8_TWCR_REG,7) != 1);
     d8a:	e6 e5       	ldi	r30, 0x56	; 86
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	fc cf       	rjmp	.-8      	; 0xd8a <TWI_enuSendReStartCondition+0x2a>

00000d92 <TWI_enuSendSlaveWithWrite>:
	}
	return Local_enuErrorState;
}

TWI_ErrorStatus   TWI_enuSendSlaveWithWrite(u8 Copy_u8SlaveAddress)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <TWI_enuSendSlaveWithWrite+0x6>
     d98:	0f 92       	push	r0
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_enuErrorState = TWI_OK;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SLA + W */
	TWI_u8_TWDR_REG = Copy_u8SlaveAddress << 1 ; // since the address is the MSB 7bits
     da4:	e3 e2       	ldi	r30, 0x23	; 35
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	88 0f       	add	r24, r24
     dac:	80 83       	st	Z, r24
	CLR_BIT(TWI_u8_TWDR_REG,0);
     dae:	a3 e2       	ldi	r26, 0x23	; 35
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e3 e2       	ldi	r30, 0x23	; 35
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8e 7f       	andi	r24, 0xFE	; 254
     dba:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWI_u8_TWCR_REG,5);
     dbc:	a6 e5       	ldi	r26, 0x56	; 86
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e6 e5       	ldi	r30, 0x56	; 86
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8f 7d       	andi	r24, 0xDF	; 223
     dc8:	8c 93       	st	X, r24
	/* Clear Flag */
	CLR_BIT(TWI_u8_TWCR_REG,7);
     dca:	a6 e5       	ldi	r26, 0x56	; 86
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e6 e5       	ldi	r30, 0x56	; 86
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	8f 77       	andi	r24, 0x7F	; 127
     dd6:	8c 93       	st	X, r24
	/* wait for the Flag to be set */
	while((TWI_u8_TWCR_REG,7) != 1);
     dd8:	e6 e5       	ldi	r30, 0x56	; 86
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	fc cf       	rjmp	.-8      	; 0xdd8 <TWI_enuSendSlaveWithWrite+0x46>

00000de0 <TWI_enuSendSlaveWithRead>:
	}
	return Local_enuErrorState;
}

TWI_ErrorStatus   TWI_enuSendSlaveWithRead(u8 Copy_u8SlaveAddress)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <TWI_enuSendSlaveWithRead+0x6>
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_enuErrorState = TWI_OK;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SLA + R */
	TWI_u8_TWDR_REG = Copy_u8SlaveAddress << 1 ; // since the address is the MSB 7bits
     df2:	e3 e2       	ldi	r30, 0x23	; 35
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	88 0f       	add	r24, r24
     dfa:	80 83       	st	Z, r24
	SET_BIT(TWI_u8_TWDR_REG,0);
     dfc:	a3 e2       	ldi	r26, 0x23	; 35
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e3 e2       	ldi	r30, 0x23	; 35
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	81 60       	ori	r24, 0x01	; 1
     e08:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWI_u8_TWCR_REG,5);
     e0a:	a6 e5       	ldi	r26, 0x56	; 86
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e6 e5       	ldi	r30, 0x56	; 86
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8f 7d       	andi	r24, 0xDF	; 223
     e16:	8c 93       	st	X, r24
	/* Clear Flag */
	CLR_BIT(TWI_u8_TWCR_REG,7);
     e18:	a6 e5       	ldi	r26, 0x56	; 86
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e6 e5       	ldi	r30, 0x56	; 86
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	8f 77       	andi	r24, 0x7F	; 127
     e24:	8c 93       	st	X, r24
	/* wait for the Flag to be set */
	while((TWI_u8_TWCR_REG,7) != 1);
     e26:	e6 e5       	ldi	r30, 0x56	; 86
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	fc cf       	rjmp	.-8      	; 0xe26 <TWI_enuSendSlaveWithRead+0x46>

00000e2e <TWI_enuSendDataByte>:
	}
	return Local_enuErrorState;
}

TWI_ErrorStatus  TWI_enuSendDataByte(u8 Copy_u8SendData)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <TWI_enuSendDataByte+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_enuErrorState = TWI_OK;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = DATA */
	TWI_u8_TWDR_REG = Copy_u8SendData;
     e40:	e3 e2       	ldi	r30, 0x23	; 35
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	80 83       	st	Z, r24
	/* Clear Flag */
	CLR_BIT(TWI_u8_TWCR_REG,7);
     e48:	a6 e5       	ldi	r26, 0x56	; 86
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e6 e5       	ldi	r30, 0x56	; 86
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8f 77       	andi	r24, 0x7F	; 127
     e54:	8c 93       	st	X, r24
	/* wait for the Flag to be set */
	while((TWI_u8_TWCR_REG,7) != 1);
     e56:	e6 e5       	ldi	r30, 0x56	; 86
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	fc cf       	rjmp	.-8      	; 0xe56 <TWI_enuSendDataByte+0x28>

00000e5e <TWI_enuReceiveDataByte>:
	}
	return Local_enuErrorState;
}

TWI_ErrorStatus   TWI_enuReceiveDataByte(u8 *Copy_pu8ReceivedData)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	00 d0       	rcall	.+0      	; 0xe64 <TWI_enuReceiveDataByte+0x6>
     e64:	00 d0       	rcall	.+0      	; 0xe66 <TWI_enuReceiveDataByte+0x8>
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	9b 83       	std	Y+3, r25	; 0x03
     e6c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_enuErrorState = TWI_OK;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	89 83       	std	Y+1, r24	; 0x01
	/* Check Pointer */
	if (Copy_pu8ReceivedData != NULL)
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	9b 81       	ldd	r25, Y+3	; 0x03
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	59 f0       	breq	.+22     	; 0xe90 <TWI_enuReceiveDataByte+0x32>
	{/* Clear Flag */
	CLR_BIT(TWI_u8_TWCR_REG,7);
     e7a:	a6 e5       	ldi	r26, 0x56	; 86
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e6 e5       	ldi	r30, 0x56	; 86
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 77       	andi	r24, 0x7F	; 127
     e86:	8c 93       	st	X, r24
	/* wait for the Flag to be set */
	while((TWI_u8_TWCR_REG,7) != 1);
     e88:	e6 e5       	ldi	r30, 0x56	; 86
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	fc cf       	rjmp	.-8      	; 0xe88 <TWI_enuReceiveDataByte+0x2a>
	}else{
		/* Read Data */
		*Copy_pu8ReceivedData = TWI_u8_TWDR_REG;
	}
	}else{
		Local_enuErrorState = TWI_NullPointerError;
     e90:	88 e0       	ldi	r24, 0x08	; 8
     e92:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <TWI_u8SendStopCondition>:

void   TWI_u8SendStopCondition(void)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
	/* Send Stop Condition */
	SET_BIT(TWI_u8_TWCR_REG,4);
     eac:	a6 e5       	ldi	r26, 0x56	; 86
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e6 e5       	ldi	r30, 0x56	; 86
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 61       	ori	r24, 0x10	; 16
     eb8:	8c 93       	st	X, r24
	/* Clear Flag */
	CLR_BIT(TWI_u8_TWCR_REG,7);
     eba:	a6 e5       	ldi	r26, 0x56	; 86
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e6 e5       	ldi	r30, 0x56	; 86
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 77       	andi	r24, 0x7F	; 127
     ec6:	8c 93       	st	X, r24
}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <TMR_voidTMR0Init>:
// Interrupt header files
#include"TMR_private.h"
#include"TMR_interface.h"
#include"TMR_config.h"

void TMR_voidTMR0Init(u8 Copy_TMR0_Mode){
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <TMR_voidTMR0Init+0x6>
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	89 83       	std	Y+1, r24	; 0x01
	//u8 Local_u8_ErrorStatus = TMR0_OK;
	// Selecting mode = Normal Mode
	switch(Copy_TMR0_Mode){
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	3b 83       	std	Y+3, r19	; 0x03
     ee4:	2a 83       	std	Y+2, r18	; 0x02
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	91 05       	cpc	r25, r1
     eee:	09 f4       	brne	.+2      	; 0xef2 <TMR_voidTMR0Init+0x24>
     ef0:	46 c0       	rjmp	.+140    	; 0xf7e <TMR_voidTMR0Init+0xb0>
     ef2:	2a 81       	ldd	r18, Y+2	; 0x02
     ef4:	3b 81       	ldd	r19, Y+3	; 0x03
     ef6:	22 30       	cpi	r18, 0x02	; 2
     ef8:	31 05       	cpc	r19, r1
     efa:	2c f4       	brge	.+10     	; 0xf06 <TMR_voidTMR0Init+0x38>
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	9b 81       	ldd	r25, Y+3	; 0x03
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	71 f0       	breq	.+28     	; 0xf20 <TMR_voidTMR0Init+0x52>
     f04:	a0 c0       	rjmp	.+320    	; 0x1046 <TMR_voidTMR0Init+0x178>
     f06:	2a 81       	ldd	r18, Y+2	; 0x02
     f08:	3b 81       	ldd	r19, Y+3	; 0x03
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	31 05       	cpc	r19, r1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <TMR_voidTMR0Init+0x44>
     f10:	53 c0       	rjmp	.+166    	; 0xfb8 <TMR_voidTMR0Init+0xea>
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	9b 81       	ldd	r25, Y+3	; 0x03
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <TMR_voidTMR0Init+0x50>
     f1c:	63 c0       	rjmp	.+198    	; 0xfe4 <TMR_voidTMR0Init+0x116>
     f1e:	93 c0       	rjmp	.+294    	; 0x1046 <TMR_voidTMR0Init+0x178>
	case TMR0_NORMAL_MODE:
		CLR_BIT(TWR0_u8_TCCR0_REG,6);
     f20:	a3 e5       	ldi	r26, 0x53	; 83
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e3 e5       	ldi	r30, 0x53	; 83
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8f 7b       	andi	r24, 0xBF	; 191
     f2c:	8c 93       	st	X, r24
		CLR_BIT(TWR0_u8_TCCR0_REG,3);
     f2e:	a3 e5       	ldi	r26, 0x53	; 83
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e3 e5       	ldi	r30, 0x53	; 83
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	87 7f       	andi	r24, 0xF7	; 247
     f3a:	8c 93       	st	X, r24

		// Set preload value
		TWR0_u8_TCNT0_REG = 192;
     f3c:	e2 e5       	ldi	r30, 0x52	; 82
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 ec       	ldi	r24, 0xC0	; 192
     f42:	80 83       	st	Z, r24

		// Enable PIE of OVF
		SET_BIT(TWR0_u8_TIMSK_REG,0);
     f44:	a9 e5       	ldi	r26, 0x59	; 89
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e9 e5       	ldi	r30, 0x59	; 89
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	8c 93       	st	X, r24

		// Prescaler = 8
		CLR_BIT(TWR0_u8_TCCR0_REG,0);
     f52:	a3 e5       	ldi	r26, 0x53	; 83
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e3 e5       	ldi	r30, 0x53	; 83
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8e 7f       	andi	r24, 0xFE	; 254
     f5e:	8c 93       	st	X, r24
		SET_BIT(TWR0_u8_TCCR0_REG,1);
     f60:	a3 e5       	ldi	r26, 0x53	; 83
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e3 e5       	ldi	r30, 0x53	; 83
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	8c 93       	st	X, r24
		CLR_BIT(TWR0_u8_TCCR0_REG,2);
     f6e:	a3 e5       	ldi	r26, 0x53	; 83
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e3 e5       	ldi	r30, 0x53	; 83
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8b 7f       	andi	r24, 0xFB	; 251
     f7a:	8c 93       	st	X, r24
     f7c:	64 c0       	rjmp	.+200    	; 0x1046 <TMR_voidTMR0Init+0x178>

	break;
	case TMR0_PMW_PHASE_CORRECT_MODE:
		SET_BIT(TWR0_u8_TCCR0_REG,6);
     f7e:	a3 e5       	ldi	r26, 0x53	; 83
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e3 e5       	ldi	r30, 0x53	; 83
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	80 64       	ori	r24, 0x40	; 64
     f8a:	8c 93       	st	X, r24
		CLR_BIT(TWR0_u8_TCCR0_REG,3);
     f8c:	a3 e5       	ldi	r26, 0x53	; 83
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e3 e5       	ldi	r30, 0x53	; 83
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	87 7f       	andi	r24, 0xF7	; 247
     f98:	8c 93       	st	X, r24

		// Set 0C0 when Downcounting
		SET_BIT(TWR0_u8_TCCR0_REG,5);
     f9a:	a3 e5       	ldi	r26, 0x53	; 83
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e3 e5       	ldi	r30, 0x53	; 83
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	80 62       	ori	r24, 0x20	; 32
     fa6:	8c 93       	st	X, r24
		CLR_BIT(TWR0_u8_TCCR0_REG,4);
     fa8:	a3 e5       	ldi	r26, 0x53	; 83
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e3 e5       	ldi	r30, 0x53	; 83
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 7e       	andi	r24, 0xEF	; 239
     fb4:	8c 93       	st	X, r24
     fb6:	47 c0       	rjmp	.+142    	; 0x1046 <TMR_voidTMR0Init+0x178>

	break;
	case TMR0_CTC_MODE:
		CLR_BIT(TWR0_u8_TCCR0_REG,6);
     fb8:	a3 e5       	ldi	r26, 0x53	; 83
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e3 e5       	ldi	r30, 0x53	; 83
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8f 7b       	andi	r24, 0xBF	; 191
     fc4:	8c 93       	st	X, r24
		SET_BIT(TWR0_u8_TCCR0_REG,3);
     fc6:	a3 e5       	ldi	r26, 0x53	; 83
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e3 e5       	ldi	r30, 0x53	; 83
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	88 60       	ori	r24, 0x08	; 8
     fd2:	8c 93       	st	X, r24

		// Enable PIE of Compare match
		SET_BIT(TWR0_u8_TIMSK_REG,1);
     fd4:	a9 e5       	ldi	r26, 0x59	; 89
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e9 e5       	ldi	r30, 0x59	; 89
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	82 60       	ori	r24, 0x02	; 2
     fe0:	8c 93       	st	X, r24
     fe2:	31 c0       	rjmp	.+98     	; 0x1046 <TMR_voidTMR0Init+0x178>

	break;
	case TMR0_FAST_PMW_MODE:
		SET_BIT(TWR0_u8_TCCR0_REG,6);
     fe4:	a3 e5       	ldi	r26, 0x53	; 83
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e3 e5       	ldi	r30, 0x53	; 83
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	80 64       	ori	r24, 0x40	; 64
     ff0:	8c 93       	st	X, r24
		SET_BIT(TWR0_u8_TCCR0_REG,3);
     ff2:	a3 e5       	ldi	r26, 0x53	; 83
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e3 e5       	ldi	r30, 0x53	; 83
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	88 60       	ori	r24, 0x08	; 8
     ffe:	8c 93       	st	X, r24

		// Non-inverting
		SET_BIT(TWR0_u8_TCCR0_REG,5);
    1000:	a3 e5       	ldi	r26, 0x53	; 83
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e3 e5       	ldi	r30, 0x53	; 83
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	80 62       	ori	r24, 0x20	; 32
    100c:	8c 93       	st	X, r24
		CLR_BIT(TWR0_u8_TCCR0_REG,4);
    100e:	a3 e5       	ldi	r26, 0x53	; 83
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e3 e5       	ldi	r30, 0x53	; 83
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8f 7e       	andi	r24, 0xEF	; 239
    101a:	8c 93       	st	X, r24

		// Prescaler = 8
		CLR_BIT(TWR0_u8_TCCR0_REG,0);
    101c:	a3 e5       	ldi	r26, 0x53	; 83
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e3 e5       	ldi	r30, 0x53	; 83
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8e 7f       	andi	r24, 0xFE	; 254
    1028:	8c 93       	st	X, r24
		SET_BIT(TWR0_u8_TCCR0_REG,1);
    102a:	a3 e5       	ldi	r26, 0x53	; 83
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e3 e5       	ldi	r30, 0x53	; 83
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	82 60       	ori	r24, 0x02	; 2
    1036:	8c 93       	st	X, r24
		CLR_BIT(TWR0_u8_TCCR0_REG,2);
    1038:	a3 e5       	ldi	r26, 0x53	; 83
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e3 e5       	ldi	r30, 0x53	; 83
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8b 7f       	andi	r24, 0xFB	; 251
    1044:	8c 93       	st	X, r24

	break;
	}
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <TMR_voidTMR1Init>:

void TMR_voidTMR1Init(){
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	// Selecting Mode
	CLR_BIT(TWR1_u8_TCCR1A_REG,0);
    105a:	af e4       	ldi	r26, 0x4F	; 79
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	ef e4       	ldi	r30, 0x4F	; 79
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8e 7f       	andi	r24, 0xFE	; 254
    1066:	8c 93       	st	X, r24
	SET_BIT(TWR1_u8_TCCR1A_REG,1);
    1068:	af e4       	ldi	r26, 0x4F	; 79
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ef e4       	ldi	r30, 0x4F	; 79
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	82 60       	ori	r24, 0x02	; 2
    1074:	8c 93       	st	X, r24
	SET_BIT(TWR1_u8_TCCR1B_REG,3);
    1076:	ae e4       	ldi	r26, 0x4E	; 78
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	ee e4       	ldi	r30, 0x4E	; 78
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	88 60       	ori	r24, 0x08	; 8
    1082:	8c 93       	st	X, r24
	SET_BIT(TWR1_u8_TCCR1B_REG,4);
    1084:	ae e4       	ldi	r26, 0x4E	; 78
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ee e4       	ldi	r30, 0x4E	; 78
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 61       	ori	r24, 0x10	; 16
    1090:	8c 93       	st	X, r24

	// Channel A -> Non-inverting
	CLR_BIT(TWR1_u8_TCCR1A_REG,6);
    1092:	af e4       	ldi	r26, 0x4F	; 79
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ef e4       	ldi	r30, 0x4F	; 79
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 7b       	andi	r24, 0xBF	; 191
    109e:	8c 93       	st	X, r24
	SET_BIT(TWR1_u8_TCCR1A_REG,7);
    10a0:	af e4       	ldi	r26, 0x4F	; 79
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ef e4       	ldi	r30, 0x4F	; 79
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	8c 93       	st	X, r24

	// Setting the top value
	TWR1_u16_ICR1_REG = 19999;
    10ae:	e6 e4       	ldi	r30, 0x46	; 70
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	8f e1       	ldi	r24, 0x1F	; 31
    10b4:	9e e4       	ldi	r25, 0x4E	; 78
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	80 83       	st	Z, r24

	// Prescaler = 8
	CLR_BIT(TWR1_u8_TCCR1B_REG,0);
    10ba:	ae e4       	ldi	r26, 0x4E	; 78
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	ee e4       	ldi	r30, 0x4E	; 78
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8e 7f       	andi	r24, 0xFE	; 254
    10c6:	8c 93       	st	X, r24
	SET_BIT(TWR1_u8_TCCR1B_REG,1);
    10c8:	ae e4       	ldi	r26, 0x4E	; 78
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ee e4       	ldi	r30, 0x4E	; 78
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	82 60       	ori	r24, 0x02	; 2
    10d4:	8c 93       	st	X, r24
	CLR_BIT(TWR1_u8_TCCR1B_REG,2);
    10d6:	ae e4       	ldi	r26, 0x4E	; 78
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	ee e4       	ldi	r30, 0x4E	; 78
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8b 7f       	andi	r24, 0xFB	; 251
    10e2:	8c 93       	st	X, r24
}
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <TMR_voidTMR0SetCompareMatch>:

void TMR_voidTMR0SetCompareMatch(u8 Copy_u8OCR0Value){
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	0f 92       	push	r0
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	89 83       	std	Y+1, r24	; 0x01
	TWR0_u8_OCR0_REG = Copy_u8OCR0Value;
    10f6:	ec e5       	ldi	r30, 0x5C	; 92
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	80 83       	st	Z, r24
}
    10fe:	0f 90       	pop	r0
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <TMR_voidTMR1SetCompareMatchChannelA>:
void TMR_voidTMR1SetCompareMatchChannelA(u16 Copy_u8OCR1Value){
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	00 d0       	rcall	.+0      	; 0x110c <TMR_voidTMR1SetCompareMatchChannelA+0x6>
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01
	TWR1_u16_OCR1A_REG = Copy_u8OCR1Value;
    1114:	ea e4       	ldi	r30, 0x4A	; 74
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	80 83       	st	Z, r24
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <TMR_u8TMR0_OVF_CallBack>:
void (*TMR0_performOVF)(void) = NULL;
void (*TMR0_performCTC)(void) = NULL;

void TMR_u8TMR0_OVF_CallBack(void(* Copy_pf)(void)){
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <TMR_u8TMR0_OVF_CallBack+0x6>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	9a 83       	std	Y+2, r25	; 0x02
    1136:	89 83       	std	Y+1, r24	; 0x01
	TMR0_performOVF =  Copy_pf;
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
    113c:	90 93 c5 00 	sts	0x00C5, r25
    1140:	80 93 c4 00 	sts	0x00C4, r24
}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <TMR_u8TMR0_CTC_CallBack>:

void TMR_u8TMR0_CTC_CallBack(void(* Copy_pf)(void)){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <TMR_u8TMR0_CTC_CallBack+0x6>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
	TMR0_performCTC =  Copy_pf;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	90 93 c7 00 	sts	0x00C7, r25
    1164:	80 93 c6 00 	sts	0x00C6, r24
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <__vector_11>:

// TMR0 Overflow interrupt
void __vector_11(void)       __attribute__((signal));
void __vector_11(void) {
    1172:	1f 92       	push	r1
    1174:	0f 92       	push	r0
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	0f 92       	push	r0
    117a:	11 24       	eor	r1, r1
    117c:	2f 93       	push	r18
    117e:	3f 93       	push	r19
    1180:	4f 93       	push	r20
    1182:	5f 93       	push	r21
    1184:	6f 93       	push	r22
    1186:	7f 93       	push	r23
    1188:	8f 93       	push	r24
    118a:	9f 93       	push	r25
    118c:	af 93       	push	r26
    118e:	bf 93       	push	r27
    1190:	ef 93       	push	r30
    1192:	ff 93       	push	r31
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0;
	Local_u16Counter ++;
    119c:	80 91 c8 00 	lds	r24, 0x00C8
    11a0:	90 91 c9 00 	lds	r25, 0x00C9
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	90 93 c9 00 	sts	0x00C9, r25
    11aa:	80 93 c8 00 	sts	0x00C8, r24
	if(Local_u16Counter == 3907){
    11ae:	80 91 c8 00 	lds	r24, 0x00C8
    11b2:	90 91 c9 00 	lds	r25, 0x00C9
    11b6:	2f e0       	ldi	r18, 0x0F	; 15
    11b8:	83 34       	cpi	r24, 0x43	; 67
    11ba:	92 07       	cpc	r25, r18
    11bc:	69 f4       	brne	.+26     	; 0x11d8 <__vector_11+0x66>
		TWR0_u8_TCNT0_REG = 192;
    11be:	e2 e5       	ldi	r30, 0x52	; 82
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 ec       	ldi	r24, 0xC0	; 192
    11c4:	80 83       	st	Z, r24
		Local_u16Counter = 0;
    11c6:	10 92 c9 00 	sts	0x00C9, r1
    11ca:	10 92 c8 00 	sts	0x00C8, r1
		// to perform the ISR we an interrupt TMR0 occurs
		TMR0_performOVF();
    11ce:	e0 91 c4 00 	lds	r30, 0x00C4
    11d2:	f0 91 c5 00 	lds	r31, 0x00C5
    11d6:	09 95       	icall
	}
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	bf 91       	pop	r27
    11e2:	af 91       	pop	r26
    11e4:	9f 91       	pop	r25
    11e6:	8f 91       	pop	r24
    11e8:	7f 91       	pop	r23
    11ea:	6f 91       	pop	r22
    11ec:	5f 91       	pop	r21
    11ee:	4f 91       	pop	r20
    11f0:	3f 91       	pop	r19
    11f2:	2f 91       	pop	r18
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <__vector_10>:

// TMR0 Compare match interrupt
void __vector_10(void)       __attribute__((signal));
void __vector_10(void) {
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0;
	Local_u16Counter ++;
    1228:	80 91 ca 00 	lds	r24, 0x00CA
    122c:	90 91 cb 00 	lds	r25, 0x00CB
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	90 93 cb 00 	sts	0x00CB, r25
    1236:	80 93 ca 00 	sts	0x00CA, r24
	if(Local_u16Counter == 10000){
    123a:	80 91 ca 00 	lds	r24, 0x00CA
    123e:	90 91 cb 00 	lds	r25, 0x00CB
    1242:	27 e2       	ldi	r18, 0x27	; 39
    1244:	80 31       	cpi	r24, 0x10	; 16
    1246:	92 07       	cpc	r25, r18
    1248:	49 f4       	brne	.+18     	; 0x125c <__vector_10+0x5e>
		Local_u16Counter = 0;
    124a:	10 92 cb 00 	sts	0x00CB, r1
    124e:	10 92 ca 00 	sts	0x00CA, r1
		// to perform the ISR we an interrupt TMR0 occurs
		TMR0_performCTC();
    1252:	e0 91 c6 00 	lds	r30, 0x00C6
    1256:	f0 91 c7 00 	lds	r31, 0x00C7
    125a:	09 95       	icall
	}
}
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <SPI_voidInit>:
#include "SPI_private.h"
#include "SPI_interface.h"
#include "SPI_config.h"


void SPI_voidInit(){
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62

#if SPI_MODE == SPI_MASTER_MODE

	// Data Order MSB
	CLR_BIT(SPI_u8_SPCR_REG,5);
    128a:	ad e2       	ldi	r26, 0x2D	; 45
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ed e2       	ldi	r30, 0x2D	; 45
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8f 7d       	andi	r24, 0xDF	; 223
    1296:	8c 93       	st	X, r24
	//Master
	SET_BIT(SPI_u8_SPCR_REG,4);
    1298:	ad e2       	ldi	r26, 0x2D	; 45
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	ed e2       	ldi	r30, 0x2D	; 45
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	80 61       	ori	r24, 0x10	; 16
    12a4:	8c 93       	st	X, r24
	//Falling then Rising
	SET_BIT(SPI_u8_SPCR_REG,3);
    12a6:	ad e2       	ldi	r26, 0x2D	; 45
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	ed e2       	ldi	r30, 0x2D	; 45
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	88 60       	ori	r24, 0x08	; 8
    12b2:	8c 93       	st	X, r24
	//phase
	SET_BIT(SPI_u8_SPCR_REG,2);
    12b4:	ad e2       	ldi	r26, 0x2D	; 45
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ed e2       	ldi	r30, 0x2D	; 45
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	84 60       	ori	r24, 0x04	; 4
    12c0:	8c 93       	st	X, r24
	//Frequency fosc/64   10
	SET_BIT(SPI_u8_SPCR_REG,1);
    12c2:	ad e2       	ldi	r26, 0x2D	; 45
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ed e2       	ldi	r30, 0x2D	; 45
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	82 60       	ori	r24, 0x02	; 2
    12ce:	8c 93       	st	X, r24
	CLR_BIT(SPI_u8_SPCR_REG,0);
    12d0:	ad e2       	ldi	r26, 0x2D	; 45
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ed e2       	ldi	r30, 0x2D	; 45
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	8e 7f       	andi	r24, 0xFE	; 254
    12dc:	8c 93       	st	X, r24
	SET_BIT(SPI_u8_SPCR_REG,3);
	//phase
	SET_BIT(SPI_u8_SPCR_REG,2);
	#endif
	//Enable the peripheral
	SET_BIT(SPI_u8_SPCR_REG,6);
    12de:	ad e2       	ldi	r26, 0x2D	; 45
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	ed e2       	ldi	r30, 0x2D	; 45
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	80 64       	ori	r24, 0x40	; 64
    12ea:	8c 93       	st	X, r24

}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <GINT_voidGINTEnable>:
// Interrupt header files
#include"GINT_private.h"
#include"GINT_interface.h"


void GINT_voidGINTEnable(void){
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_u8_SREG_REG,7);
    12fa:	af e5       	ldi	r26, 0x5F	; 95
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ef e5       	ldi	r30, 0x5F	; 95
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 68       	ori	r24, 0x80	; 128
    1306:	8c 93       	st	X, r24
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <GINT_voidGINTDisable>:
void GINT_voidGINTDisable(void){
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GINT_u8_SREG_REG,7);
    1316:	af e5       	ldi	r26, 0x5F	; 95
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ef e5       	ldi	r30, 0x5F	; 95
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8f 77       	andi	r24, 0x7F	; 127
    1322:	8c 93       	st	X, r24
}
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <EXTI_enuEnable>:
// Interrupt header files
#include"EXTI_private.h"
#include"EXTI_interface.h"
#include"EXTI_config.h"

EXTI_ErrorStatus EXTI_enuEnable(u8 Copy_EXTIIndex, u8 Copy_EXTIEdge){
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	2b 97       	sbiw	r28, 0x0b	; 11
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	8a 83       	std	Y+2, r24	; 0x02
    1340:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_enuErrorState = EXTI_OK;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_EXTIIndex){
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3b 87       	std	Y+11, r19	; 0x0b
    134e:	2a 87       	std	Y+10, r18	; 0x0a
    1350:	8a 85       	ldd	r24, Y+10	; 0x0a
    1352:	9b 85       	ldd	r25, Y+11	; 0x0b
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	09 f4       	brne	.+2      	; 0x135c <EXTI_enuEnable+0x32>
    135a:	70 c0       	rjmp	.+224    	; 0x143c <EXTI_enuEnable+0x112>
    135c:	2a 85       	ldd	r18, Y+10	; 0x0a
    135e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <EXTI_enuEnable+0x3e>
    1366:	cf c0       	rjmp	.+414    	; 0x1506 <EXTI_enuEnable+0x1dc>
    1368:	8a 85       	ldd	r24, Y+10	; 0x0a
    136a:	9b 85       	ldd	r25, Y+11	; 0x0b
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	09 f0       	breq	.+2      	; 0x1372 <EXTI_enuEnable+0x48>
    1370:	f3 c0       	rjmp	.+486    	; 0x1558 <EXTI_enuEnable+0x22e>
	case EXTI_u8_INT0:
		switch(Copy_EXTIEdge){
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	39 87       	std	Y+9, r19	; 0x09
    137a:	28 87       	std	Y+8, r18	; 0x08
    137c:	88 85       	ldd	r24, Y+8	; 0x08
    137e:	99 85       	ldd	r25, Y+9	; 0x09
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	91 05       	cpc	r25, r1
    1384:	21 f1       	breq	.+72     	; 0x13ce <EXTI_enuEnable+0xa4>
    1386:	28 85       	ldd	r18, Y+8	; 0x08
    1388:	39 85       	ldd	r19, Y+9	; 0x09
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <EXTI_enuEnable+0x70>
    1390:	88 85       	ldd	r24, Y+8	; 0x08
    1392:	99 85       	ldd	r25, Y+9	; 0x09
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	61 f0       	breq	.+24     	; 0x13b0 <EXTI_enuEnable+0x86>
    1398:	47 c0       	rjmp	.+142    	; 0x1428 <EXTI_enuEnable+0xfe>
    139a:	28 85       	ldd	r18, Y+8	; 0x08
    139c:	39 85       	ldd	r19, Y+9	; 0x09
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	21 f1       	breq	.+72     	; 0x13ec <EXTI_enuEnable+0xc2>
    13a4:	88 85       	ldd	r24, Y+8	; 0x08
    13a6:	99 85       	ldd	r25, Y+9	; 0x09
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	71 f1       	breq	.+92     	; 0x140a <EXTI_enuEnable+0xe0>
    13ae:	3c c0       	rjmp	.+120    	; 0x1428 <EXTI_enuEnable+0xfe>
		  case EXTI_u8_FALLING_EGDE:
			  CLR_BIT(EXTI_u8_MCUCR_REG,0); //10
    13b0:	a5 e5       	ldi	r26, 0x55	; 85
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e5       	ldi	r30, 0x55	; 85
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	8e 7f       	andi	r24, 0xFE	; 254
    13bc:	8c 93       	st	X, r24
			  SET_BIT(EXTI_u8_MCUCR_REG,1);
    13be:	a5 e5       	ldi	r26, 0x55	; 85
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e5 e5       	ldi	r30, 0x55	; 85
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	82 60       	ori	r24, 0x02	; 2
    13ca:	8c 93       	st	X, r24
    13cc:	2f c0       	rjmp	.+94     	; 0x142c <EXTI_enuEnable+0x102>
		  break;
		  case EXTI_u8_RISING_EGDE:
			  SET_BIT(EXTI_u8_MCUCR_REG,0); //11
    13ce:	a5 e5       	ldi	r26, 0x55	; 85
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e5 e5       	ldi	r30, 0x55	; 85
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	81 60       	ori	r24, 0x01	; 1
    13da:	8c 93       	st	X, r24
			  SET_BIT(EXTI_u8_MCUCR_REG,1);
    13dc:	a5 e5       	ldi	r26, 0x55	; 85
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e5 e5       	ldi	r30, 0x55	; 85
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	82 60       	ori	r24, 0x02	; 2
    13e8:	8c 93       	st	X, r24
    13ea:	20 c0       	rjmp	.+64     	; 0x142c <EXTI_enuEnable+0x102>
		  break;
		  case EXTI_u8_ANY_LOGICAL_CHANGE:
			  SET_BIT(EXTI_u8_MCUCR_REG,0); //01
    13ec:	a5 e5       	ldi	r26, 0x55	; 85
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e5       	ldi	r30, 0x55	; 85
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	81 60       	ori	r24, 0x01	; 1
    13f8:	8c 93       	st	X, r24
			  CLR_BIT(EXTI_u8_MCUCR_REG,1);
    13fa:	a5 e5       	ldi	r26, 0x55	; 85
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e5       	ldi	r30, 0x55	; 85
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8d 7f       	andi	r24, 0xFD	; 253
    1406:	8c 93       	st	X, r24
    1408:	11 c0       	rjmp	.+34     	; 0x142c <EXTI_enuEnable+0x102>
		  break;
		  case EXTI_u8_LOW_LEVEL:
			  CLR_BIT(EXTI_u8_MCUCR_REG,0);//00
    140a:	a5 e5       	ldi	r26, 0x55	; 85
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e5       	ldi	r30, 0x55	; 85
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8e 7f       	andi	r24, 0xFE	; 254
    1416:	8c 93       	st	X, r24
			  CLR_BIT(EXTI_u8_MCUCR_REG,1);
    1418:	a5 e5       	ldi	r26, 0x55	; 85
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e5 e5       	ldi	r30, 0x55	; 85
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8d 7f       	andi	r24, 0xFD	; 253
    1424:	8c 93       	st	X, r24
    1426:	02 c0       	rjmp	.+4      	; 0x142c <EXTI_enuEnable+0x102>
		  break;
		default:
			Local_enuErrorState = EXTI_INT0_NOK;
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
		//Enable PIE for INT0
		SET_BIT(EXTI_u8_GICR_REG,6);
    142c:	ab e5       	ldi	r26, 0x5B	; 91
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	eb e5       	ldi	r30, 0x5B	; 91
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	80 64       	ori	r24, 0x40	; 64
    1438:	8c 93       	st	X, r24
    143a:	90 c0       	rjmp	.+288    	; 0x155c <EXTI_enuEnable+0x232>
		break;
	case EXTI_u8_INT1:
		switch(Copy_EXTIEdge){
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3f 83       	std	Y+7, r19	; 0x07
    1444:	2e 83       	std	Y+6, r18	; 0x06
    1446:	8e 81       	ldd	r24, Y+6	; 0x06
    1448:	9f 81       	ldd	r25, Y+7	; 0x07
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	21 f1       	breq	.+72     	; 0x1498 <EXTI_enuEnable+0x16e>
    1450:	2e 81       	ldd	r18, Y+6	; 0x06
    1452:	3f 81       	ldd	r19, Y+7	; 0x07
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	2c f4       	brge	.+10     	; 0x1464 <EXTI_enuEnable+0x13a>
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	61 f0       	breq	.+24     	; 0x147a <EXTI_enuEnable+0x150>
    1462:	47 c0       	rjmp	.+142    	; 0x14f2 <EXTI_enuEnable+0x1c8>
    1464:	2e 81       	ldd	r18, Y+6	; 0x06
    1466:	3f 81       	ldd	r19, Y+7	; 0x07
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	21 f1       	breq	.+72     	; 0x14b6 <EXTI_enuEnable+0x18c>
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	9f 81       	ldd	r25, Y+7	; 0x07
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	71 f1       	breq	.+92     	; 0x14d4 <EXTI_enuEnable+0x1aa>
    1478:	3c c0       	rjmp	.+120    	; 0x14f2 <EXTI_enuEnable+0x1c8>
			case EXTI_u8_FALLING_EGDE:
				 CLR_BIT(EXTI_u8_MCUCR_REG,2); //10
    147a:	a5 e5       	ldi	r26, 0x55	; 85
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e5 e5       	ldi	r30, 0x55	; 85
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8b 7f       	andi	r24, 0xFB	; 251
    1486:	8c 93       	st	X, r24
				 SET_BIT(EXTI_u8_MCUCR_REG,3);
    1488:	a5 e5       	ldi	r26, 0x55	; 85
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e5 e5       	ldi	r30, 0x55	; 85
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	88 60       	ori	r24, 0x08	; 8
    1494:	8c 93       	st	X, r24
    1496:	2f c0       	rjmp	.+94     	; 0x14f6 <EXTI_enuEnable+0x1cc>
			break;
			case EXTI_u8_RISING_EGDE:
				 SET_BIT(EXTI_u8_MCUCR_REG,2); //11
    1498:	a5 e5       	ldi	r26, 0x55	; 85
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e5 e5       	ldi	r30, 0x55	; 85
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	84 60       	ori	r24, 0x04	; 4
    14a4:	8c 93       	st	X, r24
				 SET_BIT(EXTI_u8_MCUCR_REG,3);
    14a6:	a5 e5       	ldi	r26, 0x55	; 85
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e5 e5       	ldi	r30, 0x55	; 85
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	88 60       	ori	r24, 0x08	; 8
    14b2:	8c 93       	st	X, r24
    14b4:	20 c0       	rjmp	.+64     	; 0x14f6 <EXTI_enuEnable+0x1cc>
			break;
			case EXTI_u8_ANY_LOGICAL_CHANGE:
				 SET_BIT(EXTI_u8_MCUCR_REG,2); //01
    14b6:	a5 e5       	ldi	r26, 0x55	; 85
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e5       	ldi	r30, 0x55	; 85
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	84 60       	ori	r24, 0x04	; 4
    14c2:	8c 93       	st	X, r24
				 CLR_BIT(EXTI_u8_MCUCR_REG,3);
    14c4:	a5 e5       	ldi	r26, 0x55	; 85
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e5 e5       	ldi	r30, 0x55	; 85
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	87 7f       	andi	r24, 0xF7	; 247
    14d0:	8c 93       	st	X, r24
    14d2:	11 c0       	rjmp	.+34     	; 0x14f6 <EXTI_enuEnable+0x1cc>
			break;
			case EXTI_u8_LOW_LEVEL:
				 CLR_BIT(EXTI_u8_MCUCR_REG,2);//00
    14d4:	a5 e5       	ldi	r26, 0x55	; 85
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e5       	ldi	r30, 0x55	; 85
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8b 7f       	andi	r24, 0xFB	; 251
    14e0:	8c 93       	st	X, r24
				 CLR_BIT(EXTI_u8_MCUCR_REG,3);
    14e2:	a5 e5       	ldi	r26, 0x55	; 85
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e5 e5       	ldi	r30, 0x55	; 85
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	87 7f       	andi	r24, 0xF7	; 247
    14ee:	8c 93       	st	X, r24
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <EXTI_enuEnable+0x1cc>
			break;
			default:
				Local_enuErrorState = EXTI_INT1_NOK;
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	//Enable PIE for INT1
	SET_BIT(EXTI_u8_GICR_REG,7);
    14f6:	ab e5       	ldi	r26, 0x5B	; 91
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	eb e5       	ldi	r30, 0x5B	; 91
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	80 68       	ori	r24, 0x80	; 128
    1502:	8c 93       	st	X, r24
    1504:	2b c0       	rjmp	.+86     	; 0x155c <EXTI_enuEnable+0x232>
	break;
	case EXTI_u8_INT2:
		switch(Copy_EXTIEdge){
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3d 83       	std	Y+5, r19	; 0x05
    150e:	2c 83       	std	Y+4, r18	; 0x04
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	31 f0       	breq	.+12     	; 0x1524 <EXTI_enuEnable+0x1fa>
    1518:	2c 81       	ldd	r18, Y+4	; 0x04
    151a:	3d 81       	ldd	r19, Y+5	; 0x05
    151c:	21 30       	cpi	r18, 0x01	; 1
    151e:	31 05       	cpc	r19, r1
    1520:	49 f0       	breq	.+18     	; 0x1534 <EXTI_enuEnable+0x20a>
    1522:	10 c0       	rjmp	.+32     	; 0x1544 <EXTI_enuEnable+0x21a>
			case EXTI_u8_FALLING_EGDE:
				CLR_BIT(EXTI_u8_MCUCR_REG,6);
    1524:	a5 e5       	ldi	r26, 0x55	; 85
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e5 e5       	ldi	r30, 0x55	; 85
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8f 7b       	andi	r24, 0xBF	; 191
    1530:	8c 93       	st	X, r24
    1532:	0a c0       	rjmp	.+20     	; 0x1548 <EXTI_enuEnable+0x21e>
			break;
			case EXTI_u8_RISING_EGDE:
				SET_BIT(EXTI_u8_MCUCR_REG,6);
    1534:	a5 e5       	ldi	r26, 0x55	; 85
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e5       	ldi	r30, 0x55	; 85
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 64       	ori	r24, 0x40	; 64
    1540:	8c 93       	st	X, r24
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <EXTI_enuEnable+0x21e>
			break;
			default:
				Local_enuErrorState = EXTI_INT2_NOK;
    1544:	84 e0       	ldi	r24, 0x04	; 4
    1546:	89 83       	std	Y+1, r24	; 0x01
			break;
	 }
	//Enable PIE for INT2
	SET_BIT(EXTI_u8_GICR_REG,5);
    1548:	ab e5       	ldi	r26, 0x5B	; 91
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	eb e5       	ldi	r30, 0x5B	; 91
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	80 62       	ori	r24, 0x20	; 32
    1554:	8c 93       	st	X, r24
    1556:	02 c0       	rjmp	.+4      	; 0x155c <EXTI_enuEnable+0x232>
	break;
	default:
		Local_enuErrorState = EXTI_INT_INDEX_NOK; // invalid index
    1558:	85 e0       	ldi	r24, 0x05	; 5
    155a:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return Local_enuErrorState;
    155c:	89 81       	ldd	r24, Y+1	; 0x01
}
    155e:	2b 96       	adiw	r28, 0x0b	; 11
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <EXTI_enuDisable>:

EXTI_ErrorStatus EXTI_enuDisable(u8 Copy_EXTIIndex){
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <EXTI_enuDisable+0x6>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <EXTI_enuDisable+0x8>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_enuErrorState = EXTI_OK;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_EXTIIndex){
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	3c 83       	std	Y+4, r19	; 0x04
    158a:	2b 83       	std	Y+3, r18	; 0x03
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	91 05       	cpc	r25, r1
    1594:	89 f0       	breq	.+34     	; 0x15b8 <EXTI_enuDisable+0x48>
    1596:	2b 81       	ldd	r18, Y+3	; 0x03
    1598:	3c 81       	ldd	r19, Y+4	; 0x04
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	a1 f0       	breq	.+40     	; 0x15c8 <EXTI_enuDisable+0x58>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	c1 f4       	brne	.+48     	; 0x15d8 <EXTI_enuDisable+0x68>
	case EXTI_u8_INT0:
		CLR_BIT(EXTI_u8_GICR_REG,6);
    15a8:	ab e5       	ldi	r26, 0x5B	; 91
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	eb e5       	ldi	r30, 0x5B	; 91
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	8f 7b       	andi	r24, 0xBF	; 191
    15b4:	8c 93       	st	X, r24
    15b6:	12 c0       	rjmp	.+36     	; 0x15dc <EXTI_enuDisable+0x6c>
	break;
	case EXTI_u8_INT1:
		CLR_BIT(EXTI_u8_GICR_REG,7);
    15b8:	ab e5       	ldi	r26, 0x5B	; 91
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	eb e5       	ldi	r30, 0x5B	; 91
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8f 77       	andi	r24, 0x7F	; 127
    15c4:	8c 93       	st	X, r24
    15c6:	0a c0       	rjmp	.+20     	; 0x15dc <EXTI_enuDisable+0x6c>
	break;
	case EXTI_u8_INT2:
		CLR_BIT(EXTI_u8_GICR_REG,5);
    15c8:	ab e5       	ldi	r26, 0x5B	; 91
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	eb e5       	ldi	r30, 0x5B	; 91
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 7d       	andi	r24, 0xDF	; 223
    15d4:	8c 93       	st	X, r24
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <EXTI_enuDisable+0x6c>
	break;
	default:
		Local_enuErrorState = EXTI_DISABLE_INT_NOK;
    15d8:	86 e0       	ldi	r24, 0x06	; 6
    15da:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return Local_enuErrorState;
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <EXTI_CallBack>:
void (*EXTI_PerformINT)(void) = NULL;

void EXTI_CallBack(void(* Copy_pf)(void)){
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <EXTI_CallBack+0x6>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01
	EXTI_PerformINT =  Copy_pf;
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	90 93 cd 00 	sts	0x00CD, r25
    1602:	80 93 cc 00 	sts	0x00CC, r24
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <__vector_1>:

void __vector_1(void)          __attribute__((signal));
void __vector_1(void){
    1610:	1f 92       	push	r1
    1612:	0f 92       	push	r0
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	0f 92       	push	r0
    1618:	11 24       	eor	r1, r1
    161a:	2f 93       	push	r18
    161c:	3f 93       	push	r19
    161e:	4f 93       	push	r20
    1620:	5f 93       	push	r21
    1622:	6f 93       	push	r22
    1624:	7f 93       	push	r23
    1626:	8f 93       	push	r24
    1628:	9f 93       	push	r25
    162a:	af 93       	push	r26
    162c:	bf 93       	push	r27
    162e:	ef 93       	push	r30
    1630:	ff 93       	push	r31
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	EXTI_PerformINT();
    163a:	e0 91 cc 00 	lds	r30, 0x00CC
    163e:	f0 91 cd 00 	lds	r31, 0x00CD
    1642:	09 95       	icall
}
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	ff 91       	pop	r31
    164a:	ef 91       	pop	r30
    164c:	bf 91       	pop	r27
    164e:	af 91       	pop	r26
    1650:	9f 91       	pop	r25
    1652:	8f 91       	pop	r24
    1654:	7f 91       	pop	r23
    1656:	6f 91       	pop	r22
    1658:	5f 91       	pop	r21
    165a:	4f 91       	pop	r20
    165c:	3f 91       	pop	r19
    165e:	2f 91       	pop	r18
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	0f 90       	pop	r0
    1666:	1f 90       	pop	r1
    1668:	18 95       	reti

0000166a <DIO_Init>:
// inclusion of driver header files
#include "DIO_private.h"
#include "DIO_interface.h"
#include "DIO_config.h"

void DIO_Init(void){
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
	// initializing pins directions
	DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,
    1672:	ea e3       	ldi	r30, 0x3A	; 58
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	8a ef       	ldi	r24, 0xFA	; 250
    1678:	80 83       	st	Z, r24
					   DIO_u8_PA3_INITIAL_DIRECTION,
					   DIO_u8_PA2_INITIAL_DIRECTION,
					   DIO_u8_PA1_INITIAL_DIRECTION,
					   DIO_u8_PA0_INITIAL_DIRECTION);
					   
	DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,
    167a:	e7 e3       	ldi	r30, 0x37	; 55
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	80 83       	st	Z, r24
					   DIO_u8_PB3_INITIAL_DIRECTION,
					   DIO_u8_PB2_INITIAL_DIRECTION,
					   DIO_u8_PB1_INITIAL_DIRECTION,
					   DIO_u8_PB0_INITIAL_DIRECTION);
					   
	DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,
    1682:	e4 e3       	ldi	r30, 0x34	; 52
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	80 83       	st	Z, r24
					   DIO_u8_PC3_INITIAL_DIRECTION,
					   DIO_u8_PC2_INITIAL_DIRECTION,
					   DIO_u8_PC1_INITIAL_DIRECTION,
					   DIO_u8_PC0_INITIAL_DIRECTION);
					   
	DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,
    168a:	e1 e3       	ldi	r30, 0x31	; 49
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 e2       	ldi	r24, 0x20	; 32
    1690:	80 83       	st	Z, r24
					   DIO_u8_PD2_INITIAL_DIRECTION,
					   DIO_u8_PD1_INITIAL_DIRECTION,
					   DIO_u8_PD0_INITIAL_DIRECTION);
					   
	// Initializing the for pins value
	PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,
    1692:	eb e3       	ldi	r30, 0x3B	; 59
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	10 82       	st	Z, r1
					   DIO_u8_PA3_INITIAL_VALUE,
					   DIO_u8_PA2_INITIAL_VALUE,
					   DIO_u8_PA1_INITIAL_VALUE,
					   DIO_u8_PA0_INITIAL_VALUE);
					   
	PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,
    1698:	e8 e3       	ldi	r30, 0x38	; 56
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	10 82       	st	Z, r1
					   DIO_u8_PB3_INITIAL_VALUE,
					   DIO_u8_PB2_INITIAL_VALUE,
					   DIO_u8_PB1_INITIAL_VALUE,
					   DIO_u8_PB0_INITIAL_VALUE);
					   
	PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,
    169e:	e5 e3       	ldi	r30, 0x35	; 53
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8f ef       	ldi	r24, 0xFF	; 255
    16a4:	80 83       	st	Z, r24
			            DIO_u8_PC3_INITIAL_VALUE,
			            DIO_u8_PC2_INITIAL_VALUE,
			            DIO_u8_PC1_INITIAL_VALUE,
			            DIO_u8_PC0_INITIAL_VALUE);
					   
	PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,
    16a6:	e2 e3       	ldi	r30, 0x32	; 50
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8f e2       	ldi	r24, 0x2F	; 47
    16ac:	80 83       	st	Z, r24
					   DIO_u8_PD4_INITIAL_VALUE,
					   DIO_u8_PD3_INITIAL_VALUE,
					   DIO_u8_PD2_INITIAL_VALUE,
					   DIO_u8_PD1_INITIAL_VALUE,
					   DIO_u8_PD0_INITIAL_VALUE);
}
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection    (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDirection){
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	2e 97       	sbiw	r28, 0x0e	; 14
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	6b 83       	std	Y+3, r22	; 0x03
    16cc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	89 83       	std	Y+1, r24	; 0x01
	// Check 1- Valid Port ID
	//       2- Valid Pin ID
	//       3- Valid Pin Direction
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_Pin7) && ((Copy_u8PinDirection == DIO_u8_INPUT) ||(Copy_u8PinDirection == DIO_u8_OUTPUT))){
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	84 30       	cpi	r24, 0x04	; 4
    16d6:	08 f0       	brcs	.+2      	; 0x16da <DIO_u8SetPinDirection+0x26>
    16d8:	0d c1       	rjmp	.+538    	; 0x18f4 <DIO_u8SetPinDirection+0x240>
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	88 30       	cpi	r24, 0x08	; 8
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <DIO_u8SetPinDirection+0x2e>
    16e0:	09 c1       	rjmp	.+530    	; 0x18f4 <DIO_u8SetPinDirection+0x240>
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	88 23       	and	r24, r24
    16e6:	21 f0       	breq	.+8      	; 0x16f0 <DIO_u8SetPinDirection+0x3c>
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <DIO_u8SetPinDirection+0x3c>
    16ee:	02 c1       	rjmp	.+516    	; 0x18f4 <DIO_u8SetPinDirection+0x240>
		switch(Copy_u8PortId){
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	3e 87       	std	Y+14, r19	; 0x0e
    16f8:	2d 87       	std	Y+13, r18	; 0x0d
    16fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	91 05       	cpc	r25, r1
    1702:	09 f4       	brne	.+2      	; 0x1706 <DIO_u8SetPinDirection+0x52>
    1704:	4f c0       	rjmp	.+158    	; 0x17a4 <DIO_u8SetPinDirection+0xf0>
    1706:	2d 85       	ldd	r18, Y+13	; 0x0d
    1708:	3e 85       	ldd	r19, Y+14	; 0x0e
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	2c f4       	brge	.+10     	; 0x171a <DIO_u8SetPinDirection+0x66>
    1710:	8d 85       	ldd	r24, Y+13	; 0x0d
    1712:	9e 85       	ldd	r25, Y+14	; 0x0e
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	71 f0       	breq	.+28     	; 0x1734 <DIO_u8SetPinDirection+0x80>
    1718:	ee c0       	rjmp	.+476    	; 0x18f6 <DIO_u8SetPinDirection+0x242>
    171a:	2d 85       	ldd	r18, Y+13	; 0x0d
    171c:	3e 85       	ldd	r19, Y+14	; 0x0e
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <DIO_u8SetPinDirection+0x72>
    1724:	77 c0       	rjmp	.+238    	; 0x1814 <DIO_u8SetPinDirection+0x160>
    1726:	8d 85       	ldd	r24, Y+13	; 0x0d
    1728:	9e 85       	ldd	r25, Y+14	; 0x0e
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	09 f4       	brne	.+2      	; 0x1732 <DIO_u8SetPinDirection+0x7e>
    1730:	a9 c0       	rjmp	.+338    	; 0x1884 <DIO_u8SetPinDirection+0x1d0>
    1732:	e1 c0       	rjmp	.+450    	; 0x18f6 <DIO_u8SetPinDirection+0x242>
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection){
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	3c 87       	std	Y+12, r19	; 0x0c
    173c:	2b 87       	std	Y+11, r18	; 0x0b
    173e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1740:	9c 85       	ldd	r25, Y+12	; 0x0c
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	31 f0       	breq	.+12     	; 0x1752 <DIO_u8SetPinDirection+0x9e>
    1746:	2b 85       	ldd	r18, Y+11	; 0x0b
    1748:	3c 85       	ldd	r19, Y+12	; 0x0c
    174a:	21 30       	cpi	r18, 0x01	; 1
    174c:	31 05       	cpc	r19, r1
    174e:	b1 f0       	breq	.+44     	; 0x177c <DIO_u8SetPinDirection+0xc8>
    1750:	d2 c0       	rjmp	.+420    	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_INPUT :
						CLR_BIT(DDRA_u8_REG,Copy_u8PinId);
    1752:	aa e3       	ldi	r26, 0x3A	; 58
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ea e3       	ldi	r30, 0x3A	; 58
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_u8SetPinDirection+0xbc>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_u8SetPinDirection+0xb8>
    1774:	80 95       	com	r24
    1776:	84 23       	and	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	bd c0       	rjmp	.+378    	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					break;
					case DIO_u8_OUTPUT :
						SET_BIT(DDRA_u8_REG,Copy_u8PinId);
    177c:	aa e3       	ldi	r26, 0x3A	; 58
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	ea e3       	ldi	r30, 0x3A	; 58
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <DIO_u8SetPinDirection+0xe6>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <DIO_u8SetPinDirection+0xe2>
    179e:	84 2b       	or	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	a9 c0       	rjmp	.+338    	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					break;
			}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinDirection){
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3a 87       	std	Y+10, r19	; 0x0a
    17ac:	29 87       	std	Y+9, r18	; 0x09
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	31 f0       	breq	.+12     	; 0x17c2 <DIO_u8SetPinDirection+0x10e>
    17b6:	29 85       	ldd	r18, Y+9	; 0x09
    17b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    17ba:	21 30       	cpi	r18, 0x01	; 1
    17bc:	31 05       	cpc	r19, r1
    17be:	b1 f0       	breq	.+44     	; 0x17ec <DIO_u8SetPinDirection+0x138>
    17c0:	9a c0       	rjmp	.+308    	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_INPUT :
						CLR_BIT(DDRB_u8_REG,Copy_u8PinId);
    17c2:	a7 e3       	ldi	r26, 0x37	; 55
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e7 e3       	ldi	r30, 0x37	; 55
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	48 2f       	mov	r20, r24
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 2e       	mov	r0, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <DIO_u8SetPinDirection+0x12c>
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	0a 94       	dec	r0
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <DIO_u8SetPinDirection+0x128>
    17e4:	80 95       	com	r24
    17e6:	84 23       	and	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	85 c0       	rjmp	.+266    	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					break;
					case DIO_u8_OUTPUT :
						SET_BIT(DDRB_u8_REG,Copy_u8PinId);
    17ec:	a7 e3       	ldi	r26, 0x37	; 55
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e7 e3       	ldi	r30, 0x37	; 55
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_u8SetPinDirection+0x156>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_u8SetPinDirection+0x152>
    180e:	84 2b       	or	r24, r20
    1810:	8c 93       	st	X, r24
    1812:	71 c0       	rjmp	.+226    	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					break;
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinDirection){
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	38 87       	std	Y+8, r19	; 0x08
    181c:	2f 83       	std	Y+7, r18	; 0x07
    181e:	8f 81       	ldd	r24, Y+7	; 0x07
    1820:	98 85       	ldd	r25, Y+8	; 0x08
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	31 f0       	breq	.+12     	; 0x1832 <DIO_u8SetPinDirection+0x17e>
    1826:	2f 81       	ldd	r18, Y+7	; 0x07
    1828:	38 85       	ldd	r19, Y+8	; 0x08
    182a:	21 30       	cpi	r18, 0x01	; 1
    182c:	31 05       	cpc	r19, r1
    182e:	b1 f0       	breq	.+44     	; 0x185c <DIO_u8SetPinDirection+0x1a8>
    1830:	62 c0       	rjmp	.+196    	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_INPUT :
						CLR_BIT(DDRC_u8_REG,Copy_u8PinId);
    1832:	a4 e3       	ldi	r26, 0x34	; 52
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e4 e3       	ldi	r30, 0x34	; 52
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_u8SetPinDirection+0x19c>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <DIO_u8SetPinDirection+0x198>
    1854:	80 95       	com	r24
    1856:	84 23       	and	r24, r20
    1858:	8c 93       	st	X, r24
    185a:	4d c0       	rjmp	.+154    	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					break;
					case DIO_u8_OUTPUT :
						SET_BIT(DDRC_u8_REG,Copy_u8PinId);
    185c:	a4 e3       	ldi	r26, 0x34	; 52
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e4 e3       	ldi	r30, 0x34	; 52
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	48 2f       	mov	r20, r24
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 2e       	mov	r0, r18
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_u8SetPinDirection+0x1c6>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	0a 94       	dec	r0
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <DIO_u8SetPinDirection+0x1c2>
    187e:	84 2b       	or	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	39 c0       	rjmp	.+114    	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					break;
				}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection){
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	3e 83       	std	Y+6, r19	; 0x06
    188c:	2d 83       	std	Y+5, r18	; 0x05
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	31 f0       	breq	.+12     	; 0x18a2 <DIO_u8SetPinDirection+0x1ee>
    1896:	2d 81       	ldd	r18, Y+5	; 0x05
    1898:	3e 81       	ldd	r19, Y+6	; 0x06
    189a:	21 30       	cpi	r18, 0x01	; 1
    189c:	31 05       	cpc	r19, r1
    189e:	b1 f0       	breq	.+44     	; 0x18cc <DIO_u8SetPinDirection+0x218>
    18a0:	2a c0       	rjmp	.+84     	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_INPUT :
						CLR_BIT(DDRD_u8_REG,Copy_u8PinId);
    18a2:	a1 e3       	ldi	r26, 0x31	; 49
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e1 e3       	ldi	r30, 0x31	; 49
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <DIO_u8SetPinDirection+0x20c>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <DIO_u8SetPinDirection+0x208>
    18c4:	80 95       	com	r24
    18c6:	84 23       	and	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	15 c0       	rjmp	.+42     	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					break;
					case DIO_u8_OUTPUT :
						SET_BIT(DDRD_u8_REG,Copy_u8PinId);
    18cc:	a1 e3       	ldi	r26, 0x31	; 49
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e1 e3       	ldi	r30, 0x31	; 49
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	48 2f       	mov	r20, r24
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 2e       	mov	r0, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_u8SetPinDirection+0x236>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	0a 94       	dec	r0
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_u8SetPinDirection+0x232>
    18ee:	84 2b       	or	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <DIO_u8SetPinDirection+0x242>
					break;
				}
			break;
		}
	}else{
		Local_u8ErrorStatus = STD_TYPES_NOK;
    18f4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f8:	2e 96       	adiw	r28, 0x0e	; 14
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue        (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinValue){
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	2e 97       	sbiw	r28, 0x0e	; 14
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	8a 83       	std	Y+2, r24	; 0x02
    1920:	6b 83       	std	Y+3, r22	; 0x03
    1922:	4c 83       	std	Y+4, r20	; 0x04
	
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_Pin7) && ((Copy_u8PinValue == DIO_u8_LOW) ||(Copy_u8PinValue == DIO_u8_HIGH))){
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	84 30       	cpi	r24, 0x04	; 4
    192c:	08 f0       	brcs	.+2      	; 0x1930 <DIO_u8SetPinValue+0x26>
    192e:	0c c1       	rjmp	.+536    	; 0x1b48 <DIO_u8SetPinValue+0x23e>
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	88 30       	cpi	r24, 0x08	; 8
    1934:	08 f0       	brcs	.+2      	; 0x1938 <DIO_u8SetPinValue+0x2e>
    1936:	08 c1       	rjmp	.+528    	; 0x1b48 <DIO_u8SetPinValue+0x23e>
    1938:	8c 81       	ldd	r24, Y+4	; 0x04
    193a:	88 23       	and	r24, r24
    193c:	21 f0       	breq	.+8      	; 0x1946 <DIO_u8SetPinValue+0x3c>
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	09 f0       	breq	.+2      	; 0x1946 <DIO_u8SetPinValue+0x3c>
    1944:	01 c1       	rjmp	.+514    	; 0x1b48 <DIO_u8SetPinValue+0x23e>
		switch(Copy_u8PortId){
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	3e 87       	std	Y+14, r19	; 0x0e
    194e:	2d 87       	std	Y+13, r18	; 0x0d
    1950:	8d 85       	ldd	r24, Y+13	; 0x0d
    1952:	9e 85       	ldd	r25, Y+14	; 0x0e
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	91 05       	cpc	r25, r1
    1958:	09 f4       	brne	.+2      	; 0x195c <DIO_u8SetPinValue+0x52>
    195a:	4f c0       	rjmp	.+158    	; 0x19fa <DIO_u8SetPinValue+0xf0>
    195c:	2d 85       	ldd	r18, Y+13	; 0x0d
    195e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	2c f4       	brge	.+10     	; 0x1970 <DIO_u8SetPinValue+0x66>
    1966:	8d 85       	ldd	r24, Y+13	; 0x0d
    1968:	9e 85       	ldd	r25, Y+14	; 0x0e
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	71 f0       	breq	.+28     	; 0x198a <DIO_u8SetPinValue+0x80>
    196e:	ed c0       	rjmp	.+474    	; 0x1b4a <DIO_u8SetPinValue+0x240>
    1970:	2d 85       	ldd	r18, Y+13	; 0x0d
    1972:	3e 85       	ldd	r19, Y+14	; 0x0e
    1974:	22 30       	cpi	r18, 0x02	; 2
    1976:	31 05       	cpc	r19, r1
    1978:	09 f4       	brne	.+2      	; 0x197c <DIO_u8SetPinValue+0x72>
    197a:	77 c0       	rjmp	.+238    	; 0x1a6a <DIO_u8SetPinValue+0x160>
    197c:	8d 85       	ldd	r24, Y+13	; 0x0d
    197e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	91 05       	cpc	r25, r1
    1984:	09 f4       	brne	.+2      	; 0x1988 <DIO_u8SetPinValue+0x7e>
    1986:	a9 c0       	rjmp	.+338    	; 0x1ada <DIO_u8SetPinValue+0x1d0>
    1988:	e0 c0       	rjmp	.+448    	; 0x1b4a <DIO_u8SetPinValue+0x240>
			case DIO_u8_PORTA:
			switch(Copy_u8PinValue){
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	3c 87       	std	Y+12, r19	; 0x0c
    1992:	2b 87       	std	Y+11, r18	; 0x0b
    1994:	8b 85       	ldd	r24, Y+11	; 0x0b
    1996:	9c 85       	ldd	r25, Y+12	; 0x0c
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	d1 f0       	breq	.+52     	; 0x19d0 <DIO_u8SetPinValue+0xc6>
    199c:	2b 85       	ldd	r18, Y+11	; 0x0b
    199e:	3c 85       	ldd	r19, Y+12	; 0x0c
    19a0:	21 30       	cpi	r18, 0x01	; 1
    19a2:	31 05       	cpc	r19, r1
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <DIO_u8SetPinValue+0x9e>
    19a6:	d1 c0       	rjmp	.+418    	; 0x1b4a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH :
						SET_BIT(PORTA_u8_REG,Copy_u8PinId);
    19a8:	ab e3       	ldi	r26, 0x3B	; 59
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb e3       	ldi	r30, 0x3B	; 59
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_u8SetPinValue+0xbc>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_u8SetPinValue+0xb8>
    19ca:	84 2b       	or	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	bd c0       	rjmp	.+378    	; 0x1b4a <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW :
						CLR_BIT(PORTA_u8_REG,Copy_u8PinId);
    19d0:	ab e3       	ldi	r26, 0x3B	; 59
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	eb e3       	ldi	r30, 0x3B	; 59
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <DIO_u8SetPinValue+0xe4>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <DIO_u8SetPinValue+0xe0>
    19f2:	80 95       	com	r24
    19f4:	84 23       	and	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	a8 c0       	rjmp	.+336    	; 0x1b4a <DIO_u8SetPinValue+0x240>
					break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinValue){
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	3a 87       	std	Y+10, r19	; 0x0a
    1a02:	29 87       	std	Y+9, r18	; 0x09
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	d1 f0       	breq	.+52     	; 0x1a40 <DIO_u8SetPinValue+0x136>
    1a0c:	29 85       	ldd	r18, Y+9	; 0x09
    1a0e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a10:	21 30       	cpi	r18, 0x01	; 1
    1a12:	31 05       	cpc	r19, r1
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <DIO_u8SetPinValue+0x10e>
    1a16:	99 c0       	rjmp	.+306    	; 0x1b4a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH :
						SET_BIT(PORTB_u8_REG,Copy_u8PinId);
    1a18:	a8 e3       	ldi	r26, 0x38	; 56
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e8 e3       	ldi	r30, 0x38	; 56
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 2e       	mov	r0, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <DIO_u8SetPinValue+0x12c>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	0a 94       	dec	r0
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <DIO_u8SetPinValue+0x128>
    1a3a:	84 2b       	or	r24, r20
    1a3c:	8c 93       	st	X, r24
    1a3e:	85 c0       	rjmp	.+266    	; 0x1b4a <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW :
						CLR_BIT(PORTB_u8_REG,Copy_u8PinId);
    1a40:	a8 e3       	ldi	r26, 0x38	; 56
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e8 e3       	ldi	r30, 0x38	; 56
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_u8SetPinValue+0x154>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <DIO_u8SetPinValue+0x150>
    1a62:	80 95       	com	r24
    1a64:	84 23       	and	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	70 c0       	rjmp	.+224    	; 0x1b4a <DIO_u8SetPinValue+0x240>
					break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinValue){
    1a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	38 87       	std	Y+8, r19	; 0x08
    1a72:	2f 83       	std	Y+7, r18	; 0x07
    1a74:	8f 81       	ldd	r24, Y+7	; 0x07
    1a76:	98 85       	ldd	r25, Y+8	; 0x08
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	d1 f0       	breq	.+52     	; 0x1ab0 <DIO_u8SetPinValue+0x1a6>
    1a7c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a7e:	38 85       	ldd	r19, Y+8	; 0x08
    1a80:	21 30       	cpi	r18, 0x01	; 1
    1a82:	31 05       	cpc	r19, r1
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <DIO_u8SetPinValue+0x17e>
    1a86:	61 c0       	rjmp	.+194    	; 0x1b4a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH :
						SET_BIT(PORTC_u8_REG,Copy_u8PinId);
    1a88:	a5 e3       	ldi	r26, 0x35	; 53
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e5 e3       	ldi	r30, 0x35	; 53
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	48 2f       	mov	r20, r24
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	02 2e       	mov	r0, r18
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <DIO_u8SetPinValue+0x19c>
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	0a 94       	dec	r0
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <DIO_u8SetPinValue+0x198>
    1aaa:	84 2b       	or	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	4d c0       	rjmp	.+154    	; 0x1b4a <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW :
						CLR_BIT(PORTC_u8_REG,Copy_u8PinId);
    1ab0:	a5 e3       	ldi	r26, 0x35	; 53
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e5 e3       	ldi	r30, 0x35	; 53
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <DIO_u8SetPinValue+0x1c4>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <DIO_u8SetPinValue+0x1c0>
    1ad2:	80 95       	com	r24
    1ad4:	84 23       	and	r24, r20
    1ad6:	8c 93       	st	X, r24
    1ad8:	38 c0       	rjmp	.+112    	; 0x1b4a <DIO_u8SetPinValue+0x240>
					break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinValue){
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	3e 83       	std	Y+6, r19	; 0x06
    1ae2:	2d 83       	std	Y+5, r18	; 0x05
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	c9 f0       	breq	.+50     	; 0x1b1e <DIO_u8SetPinValue+0x214>
    1aec:	2d 81       	ldd	r18, Y+5	; 0x05
    1aee:	3e 81       	ldd	r19, Y+6	; 0x06
    1af0:	21 30       	cpi	r18, 0x01	; 1
    1af2:	31 05       	cpc	r19, r1
    1af4:	51 f5       	brne	.+84     	; 0x1b4a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH :
						SET_BIT(PORTD_u8_REG,Copy_u8PinId);
    1af6:	a2 e3       	ldi	r26, 0x32	; 50
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e2 e3       	ldi	r30, 0x32	; 50
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	48 2f       	mov	r20, r24
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 2e       	mov	r0, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <DIO_u8SetPinValue+0x20a>
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	0a 94       	dec	r0
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <DIO_u8SetPinValue+0x206>
    1b18:	84 2b       	or	r24, r20
    1b1a:	8c 93       	st	X, r24
    1b1c:	16 c0       	rjmp	.+44     	; 0x1b4a <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW :
						CLR_BIT(PORTD_u8_REG,Copy_u8PinId);
    1b1e:	a2 e3       	ldi	r26, 0x32	; 50
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e2 e3       	ldi	r30, 0x32	; 50
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 2e       	mov	r0, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <DIO_u8SetPinValue+0x232>
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	0a 94       	dec	r0
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <DIO_u8SetPinValue+0x22e>
    1b40:	80 95       	com	r24
    1b42:	84 23       	and	r24, r20
    1b44:	8c 93       	st	X, r24
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <DIO_u8SetPinValue+0x240>
					break;
			}
			break;
		}
	}else{
		Local_u8ErrorStatus = STD_TYPES_NOK;
    1b48:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4c:	2e 96       	adiw	r28, 0x0e	; 14
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue        (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 *Copy_pu8ReturnedPinValue){
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	27 97       	sbiw	r28, 0x07	; 7
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	8a 83       	std	Y+2, r24	; 0x02
    1b74:	6b 83       	std	Y+3, r22	; 0x03
    1b76:	5d 83       	std	Y+5, r21	; 0x05
    1b78:	4c 83       	std	Y+4, r20	; 0x04
	
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_Pin7) && (Copy_pu8ReturnedPinValue != NULL)){
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <DIO_u8GetPinValue+0x28>
    1b84:	9b c0       	rjmp	.+310    	; 0x1cbc <DIO_u8GetPinValue+0x15e>
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	88 30       	cpi	r24, 0x08	; 8
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <DIO_u8GetPinValue+0x30>
    1b8c:	97 c0       	rjmp	.+302    	; 0x1cbc <DIO_u8GetPinValue+0x15e>
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <DIO_u8GetPinValue+0x3a>
    1b96:	92 c0       	rjmp	.+292    	; 0x1cbc <DIO_u8GetPinValue+0x15e>
		switch(Copy_u8PortId){
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	3f 83       	std	Y+7, r19	; 0x07
    1ba0:	2e 83       	std	Y+6, r18	; 0x06
    1ba2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ba4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ba6:	41 30       	cpi	r20, 0x01	; 1
    1ba8:	51 05       	cpc	r21, r1
    1baa:	a1 f1       	breq	.+104    	; 0x1c14 <DIO_u8GetPinValue+0xb6>
    1bac:	8e 81       	ldd	r24, Y+6	; 0x06
    1bae:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	34 f4       	brge	.+12     	; 0x1bc2 <DIO_u8GetPinValue+0x64>
    1bb6:	2e 81       	ldd	r18, Y+6	; 0x06
    1bb8:	3f 81       	ldd	r19, Y+7	; 0x07
    1bba:	21 15       	cp	r18, r1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	71 f0       	breq	.+28     	; 0x1bdc <DIO_u8GetPinValue+0x7e>
    1bc0:	7e c0       	rjmp	.+252    	; 0x1cbe <DIO_u8GetPinValue+0x160>
    1bc2:	4e 81       	ldd	r20, Y+6	; 0x06
    1bc4:	5f 81       	ldd	r21, Y+7	; 0x07
    1bc6:	42 30       	cpi	r20, 0x02	; 2
    1bc8:	51 05       	cpc	r21, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <DIO_u8GetPinValue+0x70>
    1bcc:	3f c0       	rjmp	.+126    	; 0x1c4c <DIO_u8GetPinValue+0xee>
    1bce:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd2:	83 30       	cpi	r24, 0x03	; 3
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <DIO_u8GetPinValue+0x7c>
    1bd8:	55 c0       	rjmp	.+170    	; 0x1c84 <DIO_u8GetPinValue+0x126>
    1bda:	71 c0       	rjmp	.+226    	; 0x1cbe <DIO_u8GetPinValue+0x160>
			case DIO_u8_PORTA :
				if(GET_BIT(PINA_u8_REG,Copy_u8PinId)== 0){
    1bdc:	e9 e3       	ldi	r30, 0x39	; 57
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a9 01       	movw	r20, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <DIO_u8GetPinValue+0x96>
    1bf0:	55 95       	asr	r21
    1bf2:	47 95       	ror	r20
    1bf4:	8a 95       	dec	r24
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <DIO_u8GetPinValue+0x92>
    1bf8:	ca 01       	movw	r24, r20
    1bfa:	81 70       	andi	r24, 0x01	; 1
    1bfc:	90 70       	andi	r25, 0x00	; 0
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	21 f4       	brne	.+8      	; 0x1c0a <DIO_u8GetPinValue+0xac>
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1c02:	ec 81       	ldd	r30, Y+4	; 0x04
    1c04:	fd 81       	ldd	r31, Y+5	; 0x05
    1c06:	10 82       	st	Z, r1
    1c08:	5a c0       	rjmp	.+180    	; 0x1cbe <DIO_u8GetPinValue+0x160>
				}else{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1c0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1c0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	80 83       	st	Z, r24
    1c12:	55 c0       	rjmp	.+170    	; 0x1cbe <DIO_u8GetPinValue+0x160>
				}
			break;
			case DIO_u8_PORTB :
				if(GET_BIT(PINB_u8_REG,Copy_u8PinId)== 0){
    1c14:	e6 e3       	ldi	r30, 0x36	; 54
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <DIO_u8GetPinValue+0xce>
    1c28:	55 95       	asr	r21
    1c2a:	47 95       	ror	r20
    1c2c:	8a 95       	dec	r24
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <DIO_u8GetPinValue+0xca>
    1c30:	ca 01       	movw	r24, r20
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	90 70       	andi	r25, 0x00	; 0
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	21 f4       	brne	.+8      	; 0x1c42 <DIO_u8GetPinValue+0xe4>
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1c3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1c3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1c3e:	10 82       	st	Z, r1
    1c40:	3e c0       	rjmp	.+124    	; 0x1cbe <DIO_u8GetPinValue+0x160>
				}else{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1c42:	ec 81       	ldd	r30, Y+4	; 0x04
    1c44:	fd 81       	ldd	r31, Y+5	; 0x05
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	80 83       	st	Z, r24
    1c4a:	39 c0       	rjmp	.+114    	; 0x1cbe <DIO_u8GetPinValue+0x160>
				}
			break;
			case DIO_u8_PORTC :
				if(GET_BIT(PINC_u8_REG,Copy_u8PinId)== 0){
    1c4c:	e3 e3       	ldi	r30, 0x33	; 51
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	a9 01       	movw	r20, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <DIO_u8GetPinValue+0x106>
    1c60:	55 95       	asr	r21
    1c62:	47 95       	ror	r20
    1c64:	8a 95       	dec	r24
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <DIO_u8GetPinValue+0x102>
    1c68:	ca 01       	movw	r24, r20
    1c6a:	81 70       	andi	r24, 0x01	; 1
    1c6c:	90 70       	andi	r25, 0x00	; 0
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	21 f4       	brne	.+8      	; 0x1c7a <DIO_u8GetPinValue+0x11c>
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1c72:	ec 81       	ldd	r30, Y+4	; 0x04
    1c74:	fd 81       	ldd	r31, Y+5	; 0x05
    1c76:	10 82       	st	Z, r1
    1c78:	22 c0       	rjmp	.+68     	; 0x1cbe <DIO_u8GetPinValue+0x160>
				}else{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1c7a:	ec 81       	ldd	r30, Y+4	; 0x04
    1c7c:	fd 81       	ldd	r31, Y+5	; 0x05
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	80 83       	st	Z, r24
    1c82:	1d c0       	rjmp	.+58     	; 0x1cbe <DIO_u8GetPinValue+0x160>
				}
			break;
			case DIO_u8_PORTD :
				if(GET_BIT(PIND_u8_REG,Copy_u8PinId)== 0){
    1c84:	e0 e3       	ldi	r30, 0x30	; 48
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a9 01       	movw	r20, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <DIO_u8GetPinValue+0x13e>
    1c98:	55 95       	asr	r21
    1c9a:	47 95       	ror	r20
    1c9c:	8a 95       	dec	r24
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <DIO_u8GetPinValue+0x13a>
    1ca0:	ca 01       	movw	r24, r20
    1ca2:	81 70       	andi	r24, 0x01	; 1
    1ca4:	90 70       	andi	r25, 0x00	; 0
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	21 f4       	brne	.+8      	; 0x1cb2 <DIO_u8GetPinValue+0x154>
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1caa:	ec 81       	ldd	r30, Y+4	; 0x04
    1cac:	fd 81       	ldd	r31, Y+5	; 0x05
    1cae:	10 82       	st	Z, r1
    1cb0:	06 c0       	rjmp	.+12     	; 0x1cbe <DIO_u8GetPinValue+0x160>
				}else{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1cb2:	ec 81       	ldd	r30, Y+4	; 0x04
    1cb4:	fd 81       	ldd	r31, Y+5	; 0x05
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	80 83       	st	Z, r24
    1cba:	01 c0       	rjmp	.+2      	; 0x1cbe <DIO_u8GetPinValue+0x160>
				}
			break;
		}
	}else{
		Local_u8ErrorStatus = STD_TYPES_NOK;
    1cbc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc0:	27 96       	adiw	r28, 0x07	; 7
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection   (u8 Copy_u8PortId , u8 Copy_u8PortDirection){
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	2d 97       	sbiw	r28, 0x0d	; 13
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	8a 83       	std	Y+2, r24	; 0x02
    1ce8:	6b 83       	std	Y+3, r22	; 0x03
	
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&& ((Copy_u8PortDirection == DIO_u8_INPUT) ||(Copy_u8PortDirection == DIO_u8_OUTPUT))){
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	84 30       	cpi	r24, 0x04	; 4
    1cf2:	08 f0       	brcs	.+2      	; 0x1cf6 <DIO_u8SetPortDirection+0x24>
    1cf4:	87 c0       	rjmp	.+270    	; 0x1e04 <DIO_u8SetPortDirection+0x132>
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	88 23       	and	r24, r24
    1cfa:	21 f0       	breq	.+8      	; 0x1d04 <DIO_u8SetPortDirection+0x32>
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	09 f0       	breq	.+2      	; 0x1d04 <DIO_u8SetPortDirection+0x32>
    1d02:	80 c0       	rjmp	.+256    	; 0x1e04 <DIO_u8SetPortDirection+0x132>
		switch(Copy_u8PortId){
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	3d 87       	std	Y+13, r19	; 0x0d
    1d0c:	2c 87       	std	Y+12, r18	; 0x0c
    1d0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d10:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	91 05       	cpc	r25, r1
    1d16:	71 f1       	breq	.+92     	; 0x1d74 <DIO_u8SetPortDirection+0xa2>
    1d18:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d1a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d1c:	22 30       	cpi	r18, 0x02	; 2
    1d1e:	31 05       	cpc	r19, r1
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <DIO_u8SetPortDirection+0x5a>
    1d22:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d24:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	69 f0       	breq	.+26     	; 0x1d44 <DIO_u8SetPortDirection+0x72>
    1d2a:	6d c0       	rjmp	.+218    	; 0x1e06 <DIO_u8SetPortDirection+0x134>
    1d2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d2e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d30:	22 30       	cpi	r18, 0x02	; 2
    1d32:	31 05       	cpc	r19, r1
    1d34:	b9 f1       	breq	.+110    	; 0x1da4 <DIO_u8SetPortDirection+0xd2>
    1d36:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d38:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d3a:	83 30       	cpi	r24, 0x03	; 3
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <DIO_u8SetPortDirection+0x70>
    1d40:	49 c0       	rjmp	.+146    	; 0x1dd4 <DIO_u8SetPortDirection+0x102>
    1d42:	61 c0       	rjmp	.+194    	; 0x1e06 <DIO_u8SetPortDirection+0x134>
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection){
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	3b 87       	std	Y+11, r19	; 0x0b
    1d4c:	2a 87       	std	Y+10, r18	; 0x0a
    1d4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <DIO_u8SetPortDirection+0x90>
    1d56:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d58:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d5a:	21 30       	cpi	r18, 0x01	; 1
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	29 f0       	breq	.+10     	; 0x1d6a <DIO_u8SetPortDirection+0x98>
    1d60:	52 c0       	rjmp	.+164    	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					case DIO_u8_INPUT :
						DDRA_u8_REG = 0x00;
    1d62:	ea e3       	ldi	r30, 0x3A	; 58
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	10 82       	st	Z, r1
    1d68:	4e c0       	rjmp	.+156    	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					break;
					case DIO_u8_OUTPUT :
						DDRA_u8_REG = 0xFF;
    1d6a:	ea e3       	ldi	r30, 0x3A	; 58
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	8f ef       	ldi	r24, 0xFF	; 255
    1d70:	80 83       	st	Z, r24
    1d72:	49 c0       	rjmp	.+146    	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection){
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	39 87       	std	Y+9, r19	; 0x09
    1d7c:	28 87       	std	Y+8, r18	; 0x08
    1d7e:	88 85       	ldd	r24, Y+8	; 0x08
    1d80:	99 85       	ldd	r25, Y+9	; 0x09
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	31 f0       	breq	.+12     	; 0x1d92 <DIO_u8SetPortDirection+0xc0>
    1d86:	28 85       	ldd	r18, Y+8	; 0x08
    1d88:	39 85       	ldd	r19, Y+9	; 0x09
    1d8a:	21 30       	cpi	r18, 0x01	; 1
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	29 f0       	breq	.+10     	; 0x1d9a <DIO_u8SetPortDirection+0xc8>
    1d90:	3a c0       	rjmp	.+116    	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					case DIO_u8_INPUT :
						DDRB_u8_REG = 0x00;
    1d92:	e7 e3       	ldi	r30, 0x37	; 55
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	10 82       	st	Z, r1
    1d98:	36 c0       	rjmp	.+108    	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					break;
					case DIO_u8_OUTPUT :
						DDRB_u8_REG = 0xFF;
    1d9a:	e7 e3       	ldi	r30, 0x37	; 55
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	8f ef       	ldi	r24, 0xFF	; 255
    1da0:	80 83       	st	Z, r24
    1da2:	31 c0       	rjmp	.+98     	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection){
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	3f 83       	std	Y+7, r19	; 0x07
    1dac:	2e 83       	std	Y+6, r18	; 0x06
    1dae:	8e 81       	ldd	r24, Y+6	; 0x06
    1db0:	9f 81       	ldd	r25, Y+7	; 0x07
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	31 f0       	breq	.+12     	; 0x1dc2 <DIO_u8SetPortDirection+0xf0>
    1db6:	2e 81       	ldd	r18, Y+6	; 0x06
    1db8:	3f 81       	ldd	r19, Y+7	; 0x07
    1dba:	21 30       	cpi	r18, 0x01	; 1
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <DIO_u8SetPortDirection+0xf8>
    1dc0:	22 c0       	rjmp	.+68     	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					case DIO_u8_INPUT :
						DDRC_u8_REG = 0x00;
    1dc2:	e4 e3       	ldi	r30, 0x34	; 52
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	10 82       	st	Z, r1
    1dc8:	1e c0       	rjmp	.+60     	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					break;
					case DIO_u8_OUTPUT :
						DDRC_u8_REG = 0xFF;
    1dca:	e4 e3       	ldi	r30, 0x34	; 52
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	80 83       	st	Z, r24
    1dd2:	19 c0       	rjmp	.+50     	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection){
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	3d 83       	std	Y+5, r19	; 0x05
    1ddc:	2c 83       	std	Y+4, r18	; 0x04
    1dde:	8c 81       	ldd	r24, Y+4	; 0x04
    1de0:	9d 81       	ldd	r25, Y+5	; 0x05
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	31 f0       	breq	.+12     	; 0x1df2 <DIO_u8SetPortDirection+0x120>
    1de6:	2c 81       	ldd	r18, Y+4	; 0x04
    1de8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dea:	21 30       	cpi	r18, 0x01	; 1
    1dec:	31 05       	cpc	r19, r1
    1dee:	29 f0       	breq	.+10     	; 0x1dfa <DIO_u8SetPortDirection+0x128>
    1df0:	0a c0       	rjmp	.+20     	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					case DIO_u8_INPUT :
						DDRD_u8_REG = 0x00;
    1df2:	e1 e3       	ldi	r30, 0x31	; 49
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	10 82       	st	Z, r1
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					break;
					case DIO_u8_OUTPUT :
						DDRD_u8_REG = 0xFF;
    1dfa:	e1 e3       	ldi	r30, 0x31	; 49
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	80 83       	st	Z, r24
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <DIO_u8SetPortDirection+0x134>
					break;
			}
			break;
	}} else{
		Local_u8ErrorStatus = STD_TYPES_NOK;
    1e04:	19 82       	std	Y+1, r1	; 0x01
	}return Local_u8ErrorStatus;
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e08:	2d 96       	adiw	r28, 0x0d	; 13
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue       (u8 Copy_u8PortId , u8 Copy_u8PortValue){
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <DIO_u8SetPortValue+0x6>
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <DIO_u8SetPortValue+0x8>
    1e22:	0f 92       	push	r0
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	8a 83       	std	Y+2, r24	; 0x02
    1e2a:	6b 83       	std	Y+3, r22	; 0x03
	
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId){
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	3d 83       	std	Y+5, r19	; 0x05
    1e38:	2c 83       	std	Y+4, r18	; 0x04
    1e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	91 05       	cpc	r25, r1
    1e42:	d1 f0       	breq	.+52     	; 0x1e78 <DIO_u8SetPortValue+0x5e>
    1e44:	2c 81       	ldd	r18, Y+4	; 0x04
    1e46:	3d 81       	ldd	r19, Y+5	; 0x05
    1e48:	22 30       	cpi	r18, 0x02	; 2
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <DIO_u8SetPortValue+0x3e>
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	9d 81       	ldd	r25, Y+5	; 0x05
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	61 f0       	breq	.+24     	; 0x1e6e <DIO_u8SetPortValue+0x54>
    1e56:	1f c0       	rjmp	.+62     	; 0x1e96 <DIO_u8SetPortValue+0x7c>
    1e58:	2c 81       	ldd	r18, Y+4	; 0x04
    1e5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e5c:	22 30       	cpi	r18, 0x02	; 2
    1e5e:	31 05       	cpc	r19, r1
    1e60:	81 f0       	breq	.+32     	; 0x1e82 <DIO_u8SetPortValue+0x68>
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	9d 81       	ldd	r25, Y+5	; 0x05
    1e66:	83 30       	cpi	r24, 0x03	; 3
    1e68:	91 05       	cpc	r25, r1
    1e6a:	81 f0       	breq	.+32     	; 0x1e8c <DIO_u8SetPortValue+0x72>
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <DIO_u8SetPortValue+0x7c>
		case DIO_u8_PORTA:
			PORTA_u8_REG = Copy_u8PortValue;
    1e6e:	eb e3       	ldi	r30, 0x3B	; 59
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	80 83       	st	Z, r24
    1e76:	10 c0       	rjmp	.+32     	; 0x1e98 <DIO_u8SetPortValue+0x7e>
		break;
		case DIO_u8_PORTB:
			PORTB_u8_REG = Copy_u8PortValue;
    1e78:	e8 e3       	ldi	r30, 0x38	; 56
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	80 83       	st	Z, r24
    1e80:	0b c0       	rjmp	.+22     	; 0x1e98 <DIO_u8SetPortValue+0x7e>
		break;
		case DIO_u8_PORTC:
			PORTC_u8_REG = Copy_u8PortValue;
    1e82:	e5 e3       	ldi	r30, 0x35	; 53
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	80 83       	st	Z, r24
    1e8a:	06 c0       	rjmp	.+12     	; 0x1e98 <DIO_u8SetPortValue+0x7e>
		break;
		case DIO_u8_PORTD:
			PORTD_u8_REG = Copy_u8PortValue;
    1e8c:	e2 e3       	ldi	r30, 0x32	; 50
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	80 83       	st	Z, r24
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <DIO_u8SetPortValue+0x7e>
		break;
		default :
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1e96:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return Local_u8ErrorStatus;
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue       (u8 Copy_u8PortId , u8 *Copy_pu8ReturnedPortValue){
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <DIO_u8GetPortValue+0x6>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <DIO_u8GetPortValue+0x8>
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <DIO_u8GetPortValue+0xa>
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	8a 83       	std	Y+2, r24	; 0x02
    1eba:	7c 83       	std	Y+4, r23	; 0x04
    1ebc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8ReturnedPortValue != NULL){
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	e9 f1       	breq	.+122    	; 0x1f44 <DIO_u8GetPortValue+0x9a>
	switch(Copy_u8PortId){
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	3e 83       	std	Y+6, r19	; 0x06
    1ed2:	2d 83       	std	Y+5, r18	; 0x05
    1ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	91 05       	cpc	r25, r1
    1edc:	e1 f0       	breq	.+56     	; 0x1f16 <DIO_u8GetPortValue+0x6c>
    1ede:	2d 81       	ldd	r18, Y+5	; 0x05
    1ee0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ee2:	22 30       	cpi	r18, 0x02	; 2
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <DIO_u8GetPortValue+0x48>
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	9e 81       	ldd	r25, Y+6	; 0x06
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	61 f0       	breq	.+24     	; 0x1f08 <DIO_u8GetPortValue+0x5e>
    1ef0:	27 c0       	rjmp	.+78     	; 0x1f40 <DIO_u8GetPortValue+0x96>
    1ef2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ef4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ef6:	22 30       	cpi	r18, 0x02	; 2
    1ef8:	31 05       	cpc	r19, r1
    1efa:	a1 f0       	breq	.+40     	; 0x1f24 <DIO_u8GetPortValue+0x7a>
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	83 30       	cpi	r24, 0x03	; 3
    1f02:	91 05       	cpc	r25, r1
    1f04:	b1 f0       	breq	.+44     	; 0x1f32 <DIO_u8GetPortValue+0x88>
    1f06:	1c c0       	rjmp	.+56     	; 0x1f40 <DIO_u8GetPortValue+0x96>
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = PINA_u8_REG;
    1f08:	e9 e3       	ldi	r30, 0x39	; 57
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f10:	fc 81       	ldd	r31, Y+4	; 0x04
    1f12:	80 83       	st	Z, r24
    1f14:	18 c0       	rjmp	.+48     	; 0x1f46 <DIO_u8GetPortValue+0x9c>
		break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = PINB_u8_REG;
    1f16:	e6 e3       	ldi	r30, 0x36	; 54
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f20:	80 83       	st	Z, r24
    1f22:	11 c0       	rjmp	.+34     	; 0x1f46 <DIO_u8GetPortValue+0x9c>
		break;
		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = PINC_u8_REG;
    1f24:	e3 e3       	ldi	r30, 0x33	; 51
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f2e:	80 83       	st	Z, r24
    1f30:	0a c0       	rjmp	.+20     	; 0x1f46 <DIO_u8GetPortValue+0x9c>
		break;
		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = PIND_u8_REG;
    1f32:	e0 e3       	ldi	r30, 0x30	; 48
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	eb 81       	ldd	r30, Y+3	; 0x03
    1f3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3c:	80 83       	st	Z, r24
    1f3e:	03 c0       	rjmp	.+6      	; 0x1f46 <DIO_u8GetPortValue+0x9c>
		break;
		default :
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1f40:	19 82       	std	Y+1, r1	; 0x01
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <DIO_u8GetPortValue+0x9c>
		break;
	}	
  }else {
	  Local_u8ErrorStatus = STD_TYPES_NOK;
    1f44:	19 82       	std	Y+1, r1	; 0x01
  }
	return Local_u8ErrorStatus;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f48:	26 96       	adiw	r28, 0x06	; 6
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <ADC_voidInit>:
#include "ADC_config.h"



void ADC_voidInit(void)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
	/* 1 -Select Vref = AVCC */
	CLR_BIT(ADC_u8_ADMUX_REG,7);
    1f62:	a7 e2       	ldi	r26, 0x27	; 39
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e7 e2       	ldi	r30, 0x27	; 39
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8f 77       	andi	r24, 0x7F	; 127
    1f6e:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
    1f70:	a7 e2       	ldi	r26, 0x27	; 39
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e7 e2       	ldi	r30, 0x27	; 39
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	80 64       	ori	r24, 0x40	; 64
    1f7c:	8c 93       	st	X, r24
	
	/* 2 -Right Adjust */
	CLR_BIT(ADC_u8_ADMUX_REG,5);
    1f7e:	a7 e2       	ldi	r26, 0x27	; 39
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e7 e2       	ldi	r30, 0x27	; 39
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	8f 7d       	andi	r24, 0xDF	; 223
    1f8a:	8c 93       	st	X, r24
	
	/* 3- Disable AutoTrigger */
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
    1f8c:	a6 e2       	ldi	r26, 0x26	; 38
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e6 e2       	ldi	r30, 0x26	; 38
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	8f 7d       	andi	r24, 0xDF	; 223
    1f98:	8c 93       	st	X, r24
	
	/* 4- CLK / 64   */
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
    1f9a:	a6 e2       	ldi	r26, 0x26	; 38
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e6 e2       	ldi	r30, 0x26	; 38
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	8e 7f       	andi	r24, 0xFE	; 254
    1fa6:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
    1fa8:	a6 e2       	ldi	r26, 0x26	; 38
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e6 e2       	ldi	r30, 0x26	; 38
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	82 60       	ori	r24, 0x02	; 2
    1fb4:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,2);
    1fb6:	a6 e2       	ldi	r26, 0x26	; 38
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e6 e2       	ldi	r30, 0x26	; 38
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	84 60       	ori	r24, 0x04	; 4
    1fc2:	8c 93       	st	X, r24
	
	/* 5- Enable ADC Peripheral */
	SET_BIT(ADC_u8_ADCSRA_REG,7);
    1fc4:	a6 e2       	ldi	r26, 0x26	; 38
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e6 e2       	ldi	r30, 0x26	; 38
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	80 68       	ori	r24, 0x80	; 128
    1fd0:	8c 93       	st	X, r24
}
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <ADC_u8GetDigitalValue>:

u8 ADC_u8GetDigitalValue( u8 Copy_u8ChannelNb ,u16 * Copy_pu16DigitalValue)
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <ADC_u8GetDigitalValue+0x6>
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <ADC_u8GetDigitalValue+0x8>
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
    1fe6:	7c 83       	std	Y+4, r23	; 0x04
    1fe8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	89 83       	std	Y+1, r24	; 0x01
	
	if((Copy_u8ChannelNb <32) && (Copy_pu16DigitalValue != NULL))
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	80 32       	cpi	r24, 0x20	; 32
    1ff2:	70 f5       	brcc	.+92     	; 0x2050 <ADC_u8GetDigitalValue+0x78>
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	51 f1       	breq	.+84     	; 0x2050 <ADC_u8GetDigitalValue+0x78>
	{
		/* Clear MUX4....0 Bits */
		ADC_u8_ADMUX_REG &= 0b11100000;
    1ffc:	a7 e2       	ldi	r26, 0x27	; 39
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e7 e2       	ldi	r30, 0x27	; 39
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	80 7e       	andi	r24, 0xE0	; 224
    2008:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    200a:	a7 e2       	ldi	r26, 0x27	; 39
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e7 e2       	ldi	r30, 0x27	; 39
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	90 81       	ld	r25, Z
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	89 2b       	or	r24, r25
    2018:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    201a:	a6 e2       	ldi	r26, 0x26	; 38
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e6 e2       	ldi	r30, 0x26	; 38
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	80 64       	ori	r24, 0x40	; 64
    2026:	8c 93       	st	X, r24
		/* wait until flag = 1 */
		//while(GET_BIT(ADC_u8_ADCSRA_REG,4) == 0);
		while(!GET_BIT(ADC_u8_ADCSRA_REG,4));
    2028:	e6 e2       	ldi	r30, 0x26	; 38
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	82 95       	swap	r24
    2030:	8f 70       	andi	r24, 0x0F	; 15
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	81 70       	andi	r24, 0x01	; 1
    2038:	90 70       	andi	r25, 0x00	; 0
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	a9 f3       	breq	.-22     	; 0x2028 <ADC_u8GetDigitalValue+0x50>
		
		/* Read Digital Value */
		*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
    203e:	e4 e2       	ldi	r30, 0x24	; 36
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	eb 81       	ldd	r30, Y+3	; 0x03
    2048:	fc 81       	ldd	r31, Y+4	; 0x04
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
    204e:	01 c0       	rjmp	.+2      	; 0x2052 <ADC_u8GetDigitalValue+0x7a>
		
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2050:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return Local_u8ErrorState;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
}
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <STP_enuRotate>:
#include "STEPPER_MOTOR_interface.h"

// MCAL Layer
#include "../../MCAL/DIO/DIO_interface.h"

STP_ErrorStatus STP_enuRotate(u16 angle, u8 Copy_u8Direction){
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	cc 57       	subi	r28, 0x7C	; 124
    2070:	d0 40       	sbci	r29, 0x00	; 0
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	fe 01       	movw	r30, r28
    207e:	e8 58       	subi	r30, 0x88	; 136
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
    2086:	fe 01       	movw	r30, r28
    2088:	e6 58       	subi	r30, 0x86	; 134
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	60 83       	st	Z, r22
	u8 Local_enuErrorState = STP_OK;
    208e:	fe 01       	movw	r30, r28
    2090:	e9 58       	subi	r30, 0x89	; 137
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	80 83       	st	Z, r24
	u32 numberOfSteps = (u32)((angle * 2050UL)/360);
    2098:	fe 01       	movw	r30, r28
    209a:	e8 58       	subi	r30, 0x88	; 136
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	cc 01       	movw	r24, r24
    20a4:	a0 e0       	ldi	r26, 0x00	; 0
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	22 e0       	ldi	r18, 0x02	; 2
    20aa:	38 e0       	ldi	r19, 0x08	; 8
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	28 e6       	ldi	r18, 0x68	; 104
    20be:	31 e0       	ldi	r19, 0x01	; 1
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 87 24 	call	0x490e	; 0x490e <__udivmodsi4>
    20cc:	da 01       	movw	r26, r20
    20ce:	c9 01       	movw	r24, r18
    20d0:	fe 01       	movw	r30, r28
    20d2:	eb 58       	subi	r30, 0x8B	; 139
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	91 83       	std	Z+1, r25	; 0x01
    20d8:	80 83       	st	Z, r24
	numberOfSteps = numberOfSteps/4;
    20da:	de 01       	movw	r26, r28
    20dc:	ab 58       	subi	r26, 0x8B	; 139
    20de:	bf 4f       	sbci	r27, 0xFF	; 255
    20e0:	fe 01       	movw	r30, r28
    20e2:	eb 58       	subi	r30, 0x8B	; 139
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 81       	ld	r24, Z
    20e8:	91 81       	ldd	r25, Z+1	; 0x01
    20ea:	96 95       	lsr	r25
    20ec:	87 95       	ror	r24
    20ee:	96 95       	lsr	r25
    20f0:	87 95       	ror	r24
    20f2:	11 96       	adiw	r26, 0x01	; 1
    20f4:	9c 93       	st	X, r25
    20f6:	8e 93       	st	-X, r24
	switch(Copy_u8Direction){
    20f8:	fe 01       	movw	r30, r28
    20fa:	e6 58       	subi	r30, 0x86	; 134
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	80 81       	ld	r24, Z
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	ed 96       	adiw	r28, 0x3d	; 61
    2106:	3f af       	std	Y+63, r19	; 0x3f
    2108:	2e af       	std	Y+62, r18	; 0x3e
    210a:	ed 97       	sbiw	r28, 0x3d	; 61
    210c:	ed 96       	adiw	r28, 0x3d	; 61
    210e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2110:	9f ad       	ldd	r25, Y+63	; 0x3f
    2112:	ed 97       	sbiw	r28, 0x3d	; 61
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	49 f0       	breq	.+18     	; 0x212a <STP_enuRotate+0xc8>
    2118:	ed 96       	adiw	r28, 0x3d	; 61
    211a:	ee ad       	ldd	r30, Y+62	; 0x3e
    211c:	ff ad       	ldd	r31, Y+63	; 0x3f
    211e:	ed 97       	sbiw	r28, 0x3d	; 61
    2120:	e1 30       	cpi	r30, 0x01	; 1
    2122:	f1 05       	cpc	r31, r1
    2124:	09 f4       	brne	.+2      	; 0x2128 <STP_enuRotate+0xc6>
    2126:	10 c3       	rjmp	.+1568   	; 0x2748 <STP_enuRotate+0x6e6>
    2128:	48 c5       	rjmp	.+2704   	; 0x2bba <STP_enuRotate+0xb58>
	case STP_CLOCKWISE:
		for(u16 i = 0 ; i < numberOfSteps ; i++){
    212a:	fe 01       	movw	r30, r28
    212c:	ed 58       	subi	r30, 0x8D	; 141
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	11 82       	std	Z+1, r1	; 0x01
    2132:	10 82       	st	Z, r1
    2134:	f9 c2       	rjmp	.+1522   	; 0x2728 <STP_enuRotate+0x6c6>
		    //for a full rotation
		    // Step1
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	62 e0       	ldi	r22, 0x02	; 2
    214e:	41 e0       	ldi	r20, 0x01	; 1
    2150:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	63 e0       	ldi	r22, 0x03	; 3
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    215e:	fe 01       	movw	r30, r28
    2160:	e3 59       	subi	r30, 0x93	; 147
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a0 e2       	ldi	r26, 0x20	; 32
    216a:	b1 e4       	ldi	r27, 0x41	; 65
    216c:	80 83       	st	Z, r24
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	a2 83       	std	Z+2, r26	; 0x02
    2172:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	8e 01       	movw	r16, r28
    2176:	07 59       	subi	r16, 0x97	; 151
    2178:	1f 4f       	sbci	r17, 0xFF	; 255
    217a:	fe 01       	movw	r30, r28
    217c:	e3 59       	subi	r30, 0x93	; 147
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4a ef       	ldi	r20, 0xFA	; 250
    218e:	54 e4       	ldi	r21, 0x44	; 68
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	f8 01       	movw	r30, r16
    219a:	80 83       	st	Z, r24
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	a2 83       	std	Z+2, r26	; 0x02
    21a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21a2:	fe 01       	movw	r30, r28
    21a4:	e7 59       	subi	r30, 0x97	; 151
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e8       	ldi	r20, 0x80	; 128
    21b6:	5f e3       	ldi	r21, 0x3F	; 63
    21b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21bc:	88 23       	and	r24, r24
    21be:	44 f4       	brge	.+16     	; 0x21d0 <STP_enuRotate+0x16e>
		__ticks = 1;
    21c0:	fe 01       	movw	r30, r28
    21c2:	e9 59       	subi	r30, 0x99	; 153
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	80 83       	st	Z, r24
    21ce:	64 c0       	rjmp	.+200    	; 0x2298 <STP_enuRotate+0x236>
	else if (__tmp > 65535)
    21d0:	fe 01       	movw	r30, r28
    21d2:	e7 59       	subi	r30, 0x97	; 151
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	60 81       	ld	r22, Z
    21d8:	71 81       	ldd	r23, Z+1	; 0x01
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	0c f0       	brlt	.+2      	; 0x21f0 <STP_enuRotate+0x18e>
    21ee:	43 c0       	rjmp	.+134    	; 0x2276 <STP_enuRotate+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	fe 01       	movw	r30, r28
    21f2:	e3 59       	subi	r30, 0x93	; 147
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8e 01       	movw	r16, r28
    2210:	09 59       	subi	r16, 0x99	; 153
    2212:	1f 4f       	sbci	r17, 0xFF	; 255
    2214:	bc 01       	movw	r22, r24
    2216:	cd 01       	movw	r24, r26
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	f8 01       	movw	r30, r16
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
    2226:	1f c0       	rjmp	.+62     	; 0x2266 <STP_enuRotate+0x204>
    2228:	fe 01       	movw	r30, r28
    222a:	eb 59       	subi	r30, 0x9B	; 155
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	88 ec       	ldi	r24, 0xC8	; 200
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2236:	fe 01       	movw	r30, r28
    2238:	eb 59       	subi	r30, 0x9B	; 155
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <STP_enuRotate+0x1de>
    2244:	fe 01       	movw	r30, r28
    2246:	eb 59       	subi	r30, 0x9B	; 155
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	91 83       	std	Z+1, r25	; 0x01
    224c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224e:	de 01       	movw	r26, r28
    2250:	a9 59       	subi	r26, 0x99	; 153
    2252:	bf 4f       	sbci	r27, 0xFF	; 255
    2254:	fe 01       	movw	r30, r28
    2256:	e9 59       	subi	r30, 0x99	; 153
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	11 96       	adiw	r26, 0x01	; 1
    2262:	9c 93       	st	X, r25
    2264:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2266:	fe 01       	movw	r30, r28
    2268:	e9 59       	subi	r30, 0x99	; 153
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	80 81       	ld	r24, Z
    226e:	91 81       	ldd	r25, Z+1	; 0x01
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	d1 f6       	brne	.-76     	; 0x2228 <STP_enuRotate+0x1c6>
    2274:	27 c0       	rjmp	.+78     	; 0x22c4 <STP_enuRotate+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2276:	8e 01       	movw	r16, r28
    2278:	09 59       	subi	r16, 0x99	; 153
    227a:	1f 4f       	sbci	r17, 0xFF	; 255
    227c:	fe 01       	movw	r30, r28
    227e:	e7 59       	subi	r30, 0x97	; 151
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	60 81       	ld	r22, Z
    2284:	71 81       	ldd	r23, Z+1	; 0x01
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	93 81       	ldd	r25, Z+3	; 0x03
    228a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	f8 01       	movw	r30, r16
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	80 83       	st	Z, r24
    2298:	de 01       	movw	r26, r28
    229a:	ad 59       	subi	r26, 0x9D	; 157
    229c:	bf 4f       	sbci	r27, 0xFF	; 255
    229e:	fe 01       	movw	r30, r28
    22a0:	e9 59       	subi	r30, 0x99	; 153
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	8d 93       	st	X+, r24
    22aa:	9c 93       	st	X, r25
    22ac:	fe 01       	movw	r30, r28
    22ae:	ed 59       	subi	r30, 0x9D	; 157
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <STP_enuRotate+0x254>
    22ba:	fe 01       	movw	r30, r28
    22bc:	ed 59       	subi	r30, 0x9D	; 157
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	80 83       	st	Z, r24
		    _delay_ms(10);
		    // Step2
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	61 e0       	ldi	r22, 0x01	; 1
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	62 e0       	ldi	r22, 0x02	; 2
    22dc:	41 e0       	ldi	r20, 0x01	; 1
    22de:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	63 e0       	ldi	r22, 0x03	; 3
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    22ec:	fe 01       	movw	r30, r28
    22ee:	e1 5a       	subi	r30, 0xA1	; 161
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e2       	ldi	r26, 0x20	; 32
    22f8:	b1 e4       	ldi	r27, 0x41	; 65
    22fa:	80 83       	st	Z, r24
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	a2 83       	std	Z+2, r26	; 0x02
    2300:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	8e 01       	movw	r16, r28
    2304:	05 5a       	subi	r16, 0xA5	; 165
    2306:	1f 4f       	sbci	r17, 0xFF	; 255
    2308:	fe 01       	movw	r30, r28
    230a:	e1 5a       	subi	r30, 0xA1	; 161
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	4a ef       	ldi	r20, 0xFA	; 250
    231c:	54 e4       	ldi	r21, 0x44	; 68
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	80 83       	st	Z, r24
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	a2 83       	std	Z+2, r26	; 0x02
    232e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2330:	fe 01       	movw	r30, r28
    2332:	e5 5a       	subi	r30, 0xA5	; 165
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	44 f4       	brge	.+16     	; 0x235e <STP_enuRotate+0x2fc>
		__ticks = 1;
    234e:	fe 01       	movw	r30, r28
    2350:	e7 5a       	subi	r30, 0xA7	; 167
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
    235c:	64 c0       	rjmp	.+200    	; 0x2426 <STP_enuRotate+0x3c4>
	else if (__tmp > 65535)
    235e:	fe 01       	movw	r30, r28
    2360:	e5 5a       	subi	r30, 0xA5	; 165
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	0c f0       	brlt	.+2      	; 0x237e <STP_enuRotate+0x31c>
    237c:	43 c0       	rjmp	.+134    	; 0x2404 <STP_enuRotate+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	fe 01       	movw	r30, r28
    2380:	e1 5a       	subi	r30, 0xA1	; 161
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	60 81       	ld	r22, Z
    2386:	71 81       	ldd	r23, Z+1	; 0x01
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e2       	ldi	r20, 0x20	; 32
    2392:	51 e4       	ldi	r21, 0x41	; 65
    2394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8e 01       	movw	r16, r28
    239e:	07 5a       	subi	r16, 0xA7	; 167
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	f8 01       	movw	r30, r16
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	80 83       	st	Z, r24
    23b4:	1f c0       	rjmp	.+62     	; 0x23f4 <STP_enuRotate+0x392>
    23b6:	fe 01       	movw	r30, r28
    23b8:	e9 5a       	subi	r30, 0xA9	; 169
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	88 ec       	ldi	r24, 0xC8	; 200
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	fe 01       	movw	r30, r28
    23c6:	e9 5a       	subi	r30, 0xA9	; 169
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <STP_enuRotate+0x36c>
    23d2:	fe 01       	movw	r30, r28
    23d4:	e9 5a       	subi	r30, 0xA9	; 169
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23dc:	de 01       	movw	r26, r28
    23de:	a7 5a       	subi	r26, 0xA7	; 167
    23e0:	bf 4f       	sbci	r27, 0xFF	; 255
    23e2:	fe 01       	movw	r30, r28
    23e4:	e7 5a       	subi	r30, 0xA7	; 167
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	11 96       	adiw	r26, 0x01	; 1
    23f0:	9c 93       	st	X, r25
    23f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	fe 01       	movw	r30, r28
    23f6:	e7 5a       	subi	r30, 0xA7	; 167
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	d1 f6       	brne	.-76     	; 0x23b6 <STP_enuRotate+0x354>
    2402:	27 c0       	rjmp	.+78     	; 0x2452 <STP_enuRotate+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	8e 01       	movw	r16, r28
    2406:	07 5a       	subi	r16, 0xA7	; 167
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e5 5a       	subi	r30, 0xA5	; 165
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	f8 01       	movw	r30, r16
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
    2426:	de 01       	movw	r26, r28
    2428:	ab 5a       	subi	r26, 0xAB	; 171
    242a:	bf 4f       	sbci	r27, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	e7 5a       	subi	r30, 0xA7	; 167
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	8d 93       	st	X+, r24
    2438:	9c 93       	st	X, r25
    243a:	fe 01       	movw	r30, r28
    243c:	eb 5a       	subi	r30, 0xAB	; 171
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <STP_enuRotate+0x3e2>
    2448:	fe 01       	movw	r30, r28
    244a:	eb 5a       	subi	r30, 0xAB	; 171
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	80 83       	st	Z, r24
		    _delay_ms(10);
		    // Step3
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	60 e0       	ldi	r22, 0x00	; 0
    2456:	41 e0       	ldi	r20, 0x01	; 1
    2458:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	61 e0       	ldi	r22, 0x01	; 1
    2460:	41 e0       	ldi	r20, 0x01	; 1
    2462:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	62 e0       	ldi	r22, 0x02	; 2
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	63 e0       	ldi	r22, 0x03	; 3
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    247a:	fe 01       	movw	r30, r28
    247c:	ef 5a       	subi	r30, 0xAF	; 175
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a0 e2       	ldi	r26, 0x20	; 32
    2486:	b1 e4       	ldi	r27, 0x41	; 65
    2488:	80 83       	st	Z, r24
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	a2 83       	std	Z+2, r26	; 0x02
    248e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2490:	8e 01       	movw	r16, r28
    2492:	03 5b       	subi	r16, 0xB3	; 179
    2494:	1f 4f       	sbci	r17, 0xFF	; 255
    2496:	fe 01       	movw	r30, r28
    2498:	ef 5a       	subi	r30, 0xAF	; 175
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	60 81       	ld	r22, Z
    249e:	71 81       	ldd	r23, Z+1	; 0x01
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	4a ef       	ldi	r20, 0xFA	; 250
    24aa:	54 e4       	ldi	r21, 0x44	; 68
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	f8 01       	movw	r30, r16
    24b6:	80 83       	st	Z, r24
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	a2 83       	std	Z+2, r26	; 0x02
    24bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24be:	fe 01       	movw	r30, r28
    24c0:	e3 5b       	subi	r30, 0xB3	; 179
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	44 f4       	brge	.+16     	; 0x24ec <STP_enuRotate+0x48a>
		__ticks = 1;
    24dc:	fe 01       	movw	r30, r28
    24de:	e5 5b       	subi	r30, 0xB5	; 181
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	80 83       	st	Z, r24
    24ea:	64 c0       	rjmp	.+200    	; 0x25b4 <STP_enuRotate+0x552>
	else if (__tmp > 65535)
    24ec:	fe 01       	movw	r30, r28
    24ee:	e3 5b       	subi	r30, 0xB3	; 179
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	3f ef       	ldi	r19, 0xFF	; 255
    24fe:	4f e7       	ldi	r20, 0x7F	; 127
    2500:	57 e4       	ldi	r21, 0x47	; 71
    2502:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2506:	18 16       	cp	r1, r24
    2508:	0c f0       	brlt	.+2      	; 0x250c <STP_enuRotate+0x4aa>
    250a:	43 c0       	rjmp	.+134    	; 0x2592 <STP_enuRotate+0x530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250c:	fe 01       	movw	r30, r28
    250e:	ef 5a       	subi	r30, 0xAF	; 175
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	8e 01       	movw	r16, r28
    252c:	05 5b       	subi	r16, 0xB5	; 181
    252e:	1f 4f       	sbci	r17, 0xFF	; 255
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	f8 01       	movw	r30, r16
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
    2542:	1f c0       	rjmp	.+62     	; 0x2582 <STP_enuRotate+0x520>
    2544:	fe 01       	movw	r30, r28
    2546:	e7 5b       	subi	r30, 0xB7	; 183
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	88 ec       	ldi	r24, 0xC8	; 200
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	80 83       	st	Z, r24
    2552:	fe 01       	movw	r30, r28
    2554:	e7 5b       	subi	r30, 0xB7	; 183
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 81       	ld	r24, Z
    255a:	91 81       	ldd	r25, Z+1	; 0x01
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <STP_enuRotate+0x4fa>
    2560:	fe 01       	movw	r30, r28
    2562:	e7 5b       	subi	r30, 0xB7	; 183
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256a:	de 01       	movw	r26, r28
    256c:	a5 5b       	subi	r26, 0xB5	; 181
    256e:	bf 4f       	sbci	r27, 0xFF	; 255
    2570:	fe 01       	movw	r30, r28
    2572:	e5 5b       	subi	r30, 0xB5	; 181
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	11 96       	adiw	r26, 0x01	; 1
    257e:	9c 93       	st	X, r25
    2580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	fe 01       	movw	r30, r28
    2584:	e5 5b       	subi	r30, 0xB5	; 181
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	d1 f6       	brne	.-76     	; 0x2544 <STP_enuRotate+0x4e2>
    2590:	27 c0       	rjmp	.+78     	; 0x25e0 <STP_enuRotate+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	8e 01       	movw	r16, r28
    2594:	05 5b       	subi	r16, 0xB5	; 181
    2596:	1f 4f       	sbci	r17, 0xFF	; 255
    2598:	fe 01       	movw	r30, r28
    259a:	e3 5b       	subi	r30, 0xB3	; 179
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	f8 01       	movw	r30, r16
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24
    25b4:	de 01       	movw	r26, r28
    25b6:	a9 5b       	subi	r26, 0xB9	; 185
    25b8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ba:	fe 01       	movw	r30, r28
    25bc:	e5 5b       	subi	r30, 0xB5	; 181
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	80 81       	ld	r24, Z
    25c2:	91 81       	ldd	r25, Z+1	; 0x01
    25c4:	8d 93       	st	X+, r24
    25c6:	9c 93       	st	X, r25
    25c8:	fe 01       	movw	r30, r28
    25ca:	e9 5b       	subi	r30, 0xB9	; 185
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <STP_enuRotate+0x570>
    25d6:	fe 01       	movw	r30, r28
    25d8:	e9 5b       	subi	r30, 0xB9	; 185
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24
		    _delay_ms(10);
		    // Step4
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	61 e0       	ldi	r22, 0x01	; 1
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	62 e0       	ldi	r22, 0x02	; 2
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	63 e0       	ldi	r22, 0x03	; 3
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    2608:	fe 01       	movw	r30, r28
    260a:	ed 5b       	subi	r30, 0xBD	; 189
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	a0 e2       	ldi	r26, 0x20	; 32
    2614:	b1 e4       	ldi	r27, 0x41	; 65
    2616:	80 83       	st	Z, r24
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	a2 83       	std	Z+2, r26	; 0x02
    261c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261e:	8e 01       	movw	r16, r28
    2620:	01 5c       	subi	r16, 0xC1	; 193
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	fe 01       	movw	r30, r28
    2626:	ed 5b       	subi	r30, 0xBD	; 189
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	4a ef       	ldi	r20, 0xFA	; 250
    2638:	54 e4       	ldi	r21, 0x44	; 68
    263a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	f8 01       	movw	r30, r16
    2644:	80 83       	st	Z, r24
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	a2 83       	std	Z+2, r26	; 0x02
    264a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    264c:	fe 01       	movw	r30, r28
    264e:	ff 96       	adiw	r30, 0x3f	; 63
    2650:	60 81       	ld	r22, Z
    2652:	71 81       	ldd	r23, Z+1	; 0x01
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e8       	ldi	r20, 0x80	; 128
    265e:	5f e3       	ldi	r21, 0x3F	; 63
    2660:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2664:	88 23       	and	r24, r24
    2666:	2c f4       	brge	.+10     	; 0x2672 <STP_enuRotate+0x610>
		__ticks = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9e af       	std	Y+62, r25	; 0x3e
    266e:	8d af       	std	Y+61, r24	; 0x3d
    2670:	46 c0       	rjmp	.+140    	; 0x26fe <STP_enuRotate+0x69c>
	else if (__tmp > 65535)
    2672:	fe 01       	movw	r30, r28
    2674:	ff 96       	adiw	r30, 0x3f	; 63
    2676:	60 81       	ld	r22, Z
    2678:	71 81       	ldd	r23, Z+1	; 0x01
    267a:	82 81       	ldd	r24, Z+2	; 0x02
    267c:	93 81       	ldd	r25, Z+3	; 0x03
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	4f e7       	ldi	r20, 0x7F	; 127
    2684:	57 e4       	ldi	r21, 0x47	; 71
    2686:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    268a:	18 16       	cp	r1, r24
    268c:	64 f5       	brge	.+88     	; 0x26e6 <STP_enuRotate+0x684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	fe 01       	movw	r30, r28
    2690:	ed 5b       	subi	r30, 0xBD	; 189
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e2       	ldi	r20, 0x20	; 32
    26a2:	51 e4       	ldi	r21, 0x41	; 65
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	9e af       	std	Y+62, r25	; 0x3e
    26ba:	8d af       	std	Y+61, r24	; 0x3d
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <STP_enuRotate+0x67a>
    26be:	88 ec       	ldi	r24, 0xC8	; 200
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	9c af       	std	Y+60, r25	; 0x3c
    26c4:	8b af       	std	Y+59, r24	; 0x3b
    26c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    26c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <STP_enuRotate+0x668>
    26ce:	9c af       	std	Y+60, r25	; 0x3c
    26d0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    26d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	9e af       	std	Y+62, r25	; 0x3e
    26da:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    26de:	9e ad       	ldd	r25, Y+62	; 0x3e
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	69 f7       	brne	.-38     	; 0x26be <STP_enuRotate+0x65c>
    26e4:	16 c0       	rjmp	.+44     	; 0x2712 <STP_enuRotate+0x6b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e6:	fe 01       	movw	r30, r28
    26e8:	ff 96       	adiw	r30, 0x3f	; 63
    26ea:	60 81       	ld	r22, Z
    26ec:	71 81       	ldd	r23, Z+1	; 0x01
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	93 81       	ldd	r25, Z+3	; 0x03
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9e af       	std	Y+62, r25	; 0x3e
    26fc:	8d af       	std	Y+61, r24	; 0x3d
    26fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2700:	9e ad       	ldd	r25, Y+62	; 0x3e
    2702:	9a af       	std	Y+58, r25	; 0x3a
    2704:	89 af       	std	Y+57, r24	; 0x39
    2706:	89 ad       	ldd	r24, Y+57	; 0x39
    2708:	9a ad       	ldd	r25, Y+58	; 0x3a
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <STP_enuRotate+0x6a8>
    270e:	9a af       	std	Y+58, r25	; 0x3a
    2710:	89 af       	std	Y+57, r24	; 0x39
	u8 Local_enuErrorState = STP_OK;
	u32 numberOfSteps = (u32)((angle * 2050UL)/360);
	numberOfSteps = numberOfSteps/4;
	switch(Copy_u8Direction){
	case STP_CLOCKWISE:
		for(u16 i = 0 ; i < numberOfSteps ; i++){
    2712:	de 01       	movw	r26, r28
    2714:	ad 58       	subi	r26, 0x8D	; 141
    2716:	bf 4f       	sbci	r27, 0xFF	; 255
    2718:	fe 01       	movw	r30, r28
    271a:	ed 58       	subi	r30, 0x8D	; 141
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	80 81       	ld	r24, Z
    2720:	91 81       	ldd	r25, Z+1	; 0x01
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	8d 93       	st	X+, r24
    2726:	9c 93       	st	X, r25
    2728:	fe 01       	movw	r30, r28
    272a:	ed 58       	subi	r30, 0x8D	; 141
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	de 01       	movw	r26, r28
    2730:	ab 58       	subi	r26, 0x8B	; 139
    2732:	bf 4f       	sbci	r27, 0xFF	; 255
    2734:	20 81       	ld	r18, Z
    2736:	31 81       	ldd	r19, Z+1	; 0x01
    2738:	8d 91       	ld	r24, X+
    273a:	9c 91       	ld	r25, X
    273c:	11 97       	sbiw	r26, 0x01	; 1
    273e:	28 17       	cp	r18, r24
    2740:	39 07       	cpc	r19, r25
    2742:	08 f4       	brcc	.+2      	; 0x2746 <STP_enuRotate+0x6e4>
    2744:	f8 cc       	rjmp	.-1552   	; 0x2136 <STP_enuRotate+0xd4>
    2746:	3e c2       	rjmp	.+1148   	; 0x2bc4 <STP_enuRotate+0xb62>
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
		    _delay_ms(10);
		}
	break;
	case STP_ANTICLOCKWISE:
		for(u16 i = 0 ; i < numberOfSteps ; i++){
    2748:	fe 01       	movw	r30, r28
    274a:	ef 58       	subi	r30, 0x8F	; 143
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	11 82       	std	Z+1, r1	; 0x01
    2750:	10 82       	st	Z, r1
    2752:	23 c2       	rjmp	.+1094   	; 0x2b9a <STP_enuRotate+0xb38>
			//for a full rotation
			// Step1
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	41 e0       	ldi	r20, 0x01	; 1
    275a:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	61 e0       	ldi	r22, 0x01	; 1
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	62 e0       	ldi	r22, 0x02	; 2
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	63 e0       	ldi	r22, 0x03	; 3
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a0 e2       	ldi	r26, 0x20	; 32
    2782:	b1 e4       	ldi	r27, 0x41	; 65
    2784:	8d ab       	std	Y+53, r24	; 0x35
    2786:	9e ab       	std	Y+54, r25	; 0x36
    2788:	af ab       	std	Y+55, r26	; 0x37
    278a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278c:	6d a9       	ldd	r22, Y+53	; 0x35
    278e:	7e a9       	ldd	r23, Y+54	; 0x36
    2790:	8f a9       	ldd	r24, Y+55	; 0x37
    2792:	98 ad       	ldd	r25, Y+56	; 0x38
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4a ef       	ldi	r20, 0xFA	; 250
    279a:	54 e4       	ldi	r21, 0x44	; 68
    279c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	89 ab       	std	Y+49, r24	; 0x31
    27a6:	9a ab       	std	Y+50, r25	; 0x32
    27a8:	ab ab       	std	Y+51, r26	; 0x33
    27aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27ac:	69 a9       	ldd	r22, Y+49	; 0x31
    27ae:	7a a9       	ldd	r23, Y+50	; 0x32
    27b0:	8b a9       	ldd	r24, Y+51	; 0x33
    27b2:	9c a9       	ldd	r25, Y+52	; 0x34
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c0:	88 23       	and	r24, r24
    27c2:	2c f4       	brge	.+10     	; 0x27ce <STP_enuRotate+0x76c>
		__ticks = 1;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	98 ab       	std	Y+48, r25	; 0x30
    27ca:	8f a7       	std	Y+47, r24	; 0x2f
    27cc:	3f c0       	rjmp	.+126    	; 0x284c <STP_enuRotate+0x7ea>
	else if (__tmp > 65535)
    27ce:	69 a9       	ldd	r22, Y+49	; 0x31
    27d0:	7a a9       	ldd	r23, Y+50	; 0x32
    27d2:	8b a9       	ldd	r24, Y+51	; 0x33
    27d4:	9c a9       	ldd	r25, Y+52	; 0x34
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	3f ef       	ldi	r19, 0xFF	; 255
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	57 e4       	ldi	r21, 0x47	; 71
    27de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e2:	18 16       	cp	r1, r24
    27e4:	4c f5       	brge	.+82     	; 0x2838 <STP_enuRotate+0x7d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e6:	6d a9       	ldd	r22, Y+53	; 0x35
    27e8:	7e a9       	ldd	r23, Y+54	; 0x36
    27ea:	8f a9       	ldd	r24, Y+55	; 0x37
    27ec:	98 ad       	ldd	r25, Y+56	; 0x38
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e2       	ldi	r20, 0x20	; 32
    27f4:	51 e4       	ldi	r21, 0x41	; 65
    27f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	98 ab       	std	Y+48, r25	; 0x30
    280c:	8f a7       	std	Y+47, r24	; 0x2f
    280e:	0f c0       	rjmp	.+30     	; 0x282e <STP_enuRotate+0x7cc>
    2810:	88 ec       	ldi	r24, 0xC8	; 200
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9e a7       	std	Y+46, r25	; 0x2e
    2816:	8d a7       	std	Y+45, r24	; 0x2d
    2818:	8d a5       	ldd	r24, Y+45	; 0x2d
    281a:	9e a5       	ldd	r25, Y+46	; 0x2e
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <STP_enuRotate+0x7ba>
    2820:	9e a7       	std	Y+46, r25	; 0x2e
    2822:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2824:	8f a5       	ldd	r24, Y+47	; 0x2f
    2826:	98 a9       	ldd	r25, Y+48	; 0x30
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	98 ab       	std	Y+48, r25	; 0x30
    282c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2830:	98 a9       	ldd	r25, Y+48	; 0x30
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	69 f7       	brne	.-38     	; 0x2810 <STP_enuRotate+0x7ae>
    2836:	14 c0       	rjmp	.+40     	; 0x2860 <STP_enuRotate+0x7fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2838:	69 a9       	ldd	r22, Y+49	; 0x31
    283a:	7a a9       	ldd	r23, Y+50	; 0x32
    283c:	8b a9       	ldd	r24, Y+51	; 0x33
    283e:	9c a9       	ldd	r25, Y+52	; 0x34
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	98 ab       	std	Y+48, r25	; 0x30
    284a:	8f a7       	std	Y+47, r24	; 0x2f
    284c:	8f a5       	ldd	r24, Y+47	; 0x2f
    284e:	98 a9       	ldd	r25, Y+48	; 0x30
    2850:	9c a7       	std	Y+44, r25	; 0x2c
    2852:	8b a7       	std	Y+43, r24	; 0x2b
    2854:	8b a5       	ldd	r24, Y+43	; 0x2b
    2856:	9c a5       	ldd	r25, Y+44	; 0x2c
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <STP_enuRotate+0x7f6>
    285c:	9c a7       	std	Y+44, r25	; 0x2c
    285e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			// Step2
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	41 e0       	ldi	r20, 0x01	; 1
    2866:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	61 e0       	ldi	r22, 0x01	; 1
    286e:	41 e0       	ldi	r20, 0x01	; 1
    2870:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	62 e0       	ldi	r22, 0x02	; 2
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	63 e0       	ldi	r22, 0x03	; 3
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	a0 e2       	ldi	r26, 0x20	; 32
    288e:	b1 e4       	ldi	r27, 0x41	; 65
    2890:	8f a3       	std	Y+39, r24	; 0x27
    2892:	98 a7       	std	Y+40, r25	; 0x28
    2894:	a9 a7       	std	Y+41, r26	; 0x29
    2896:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2898:	6f a1       	ldd	r22, Y+39	; 0x27
    289a:	78 a5       	ldd	r23, Y+40	; 0x28
    289c:	89 a5       	ldd	r24, Y+41	; 0x29
    289e:	9a a5       	ldd	r25, Y+42	; 0x2a
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	4a ef       	ldi	r20, 0xFA	; 250
    28a6:	54 e4       	ldi	r21, 0x44	; 68
    28a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	8b a3       	std	Y+35, r24	; 0x23
    28b2:	9c a3       	std	Y+36, r25	; 0x24
    28b4:	ad a3       	std	Y+37, r26	; 0x25
    28b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28b8:	6b a1       	ldd	r22, Y+35	; 0x23
    28ba:	7c a1       	ldd	r23, Y+36	; 0x24
    28bc:	8d a1       	ldd	r24, Y+37	; 0x25
    28be:	9e a1       	ldd	r25, Y+38	; 0x26
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e8       	ldi	r20, 0x80	; 128
    28c6:	5f e3       	ldi	r21, 0x3F	; 63
    28c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28cc:	88 23       	and	r24, r24
    28ce:	2c f4       	brge	.+10     	; 0x28da <STP_enuRotate+0x878>
		__ticks = 1;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	9a a3       	std	Y+34, r25	; 0x22
    28d6:	89 a3       	std	Y+33, r24	; 0x21
    28d8:	3f c0       	rjmp	.+126    	; 0x2958 <STP_enuRotate+0x8f6>
	else if (__tmp > 65535)
    28da:	6b a1       	ldd	r22, Y+35	; 0x23
    28dc:	7c a1       	ldd	r23, Y+36	; 0x24
    28de:	8d a1       	ldd	r24, Y+37	; 0x25
    28e0:	9e a1       	ldd	r25, Y+38	; 0x26
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	3f ef       	ldi	r19, 0xFF	; 255
    28e6:	4f e7       	ldi	r20, 0x7F	; 127
    28e8:	57 e4       	ldi	r21, 0x47	; 71
    28ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ee:	18 16       	cp	r1, r24
    28f0:	4c f5       	brge	.+82     	; 0x2944 <STP_enuRotate+0x8e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f2:	6f a1       	ldd	r22, Y+39	; 0x27
    28f4:	78 a5       	ldd	r23, Y+40	; 0x28
    28f6:	89 a5       	ldd	r24, Y+41	; 0x29
    28f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e2       	ldi	r20, 0x20	; 32
    2900:	51 e4       	ldi	r21, 0x41	; 65
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	bc 01       	movw	r22, r24
    290c:	cd 01       	movw	r24, r26
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9a a3       	std	Y+34, r25	; 0x22
    2918:	89 a3       	std	Y+33, r24	; 0x21
    291a:	0f c0       	rjmp	.+30     	; 0x293a <STP_enuRotate+0x8d8>
    291c:	88 ec       	ldi	r24, 0xC8	; 200
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	98 a3       	std	Y+32, r25	; 0x20
    2922:	8f 8f       	std	Y+31, r24	; 0x1f
    2924:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2926:	98 a1       	ldd	r25, Y+32	; 0x20
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <STP_enuRotate+0x8c6>
    292c:	98 a3       	std	Y+32, r25	; 0x20
    292e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2930:	89 a1       	ldd	r24, Y+33	; 0x21
    2932:	9a a1       	ldd	r25, Y+34	; 0x22
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	9a a3       	std	Y+34, r25	; 0x22
    2938:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	89 a1       	ldd	r24, Y+33	; 0x21
    293c:	9a a1       	ldd	r25, Y+34	; 0x22
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	69 f7       	brne	.-38     	; 0x291c <STP_enuRotate+0x8ba>
    2942:	14 c0       	rjmp	.+40     	; 0x296c <STP_enuRotate+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2944:	6b a1       	ldd	r22, Y+35	; 0x23
    2946:	7c a1       	ldd	r23, Y+36	; 0x24
    2948:	8d a1       	ldd	r24, Y+37	; 0x25
    294a:	9e a1       	ldd	r25, Y+38	; 0x26
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9a a3       	std	Y+34, r25	; 0x22
    2956:	89 a3       	std	Y+33, r24	; 0x21
    2958:	89 a1       	ldd	r24, Y+33	; 0x21
    295a:	9a a1       	ldd	r25, Y+34	; 0x22
    295c:	9e 8f       	std	Y+30, r25	; 0x1e
    295e:	8d 8f       	std	Y+29, r24	; 0x1d
    2960:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2962:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <STP_enuRotate+0x902>
    2968:	9e 8f       	std	Y+30, r25	; 0x1e
    296a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			// Step3
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	41 e0       	ldi	r20, 0x01	; 1
    2972:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	61 e0       	ldi	r22, 0x01	; 1
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	62 e0       	ldi	r22, 0x02	; 2
    2984:	41 e0       	ldi	r20, 0x01	; 1
    2986:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	63 e0       	ldi	r22, 0x03	; 3
    298e:	41 e0       	ldi	r20, 0x01	; 1
    2990:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	a0 e2       	ldi	r26, 0x20	; 32
    299a:	b1 e4       	ldi	r27, 0x41	; 65
    299c:	89 8f       	std	Y+25, r24	; 0x19
    299e:	9a 8f       	std	Y+26, r25	; 0x1a
    29a0:	ab 8f       	std	Y+27, r26	; 0x1b
    29a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a4:	69 8d       	ldd	r22, Y+25	; 0x19
    29a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a ef       	ldi	r20, 0xFA	; 250
    29b2:	54 e4       	ldi	r21, 0x44	; 68
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	8d 8b       	std	Y+21, r24	; 0x15
    29be:	9e 8b       	std	Y+22, r25	; 0x16
    29c0:	af 8b       	std	Y+23, r26	; 0x17
    29c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29c4:	6d 89       	ldd	r22, Y+21	; 0x15
    29c6:	7e 89       	ldd	r23, Y+22	; 0x16
    29c8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ca:	98 8d       	ldd	r25, Y+24	; 0x18
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	2c f4       	brge	.+10     	; 0x29e6 <STP_enuRotate+0x984>
		__ticks = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9c 8b       	std	Y+20, r25	; 0x14
    29e2:	8b 8b       	std	Y+19, r24	; 0x13
    29e4:	3f c0       	rjmp	.+126    	; 0x2a64 <STP_enuRotate+0xa02>
	else if (__tmp > 65535)
    29e6:	6d 89       	ldd	r22, Y+21	; 0x15
    29e8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ea:	8f 89       	ldd	r24, Y+23	; 0x17
    29ec:	98 8d       	ldd	r25, Y+24	; 0x18
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	4c f5       	brge	.+82     	; 0x2a50 <STP_enuRotate+0x9ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2a00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9c 8b       	std	Y+20, r25	; 0x14
    2a24:	8b 8b       	std	Y+19, r24	; 0x13
    2a26:	0f c0       	rjmp	.+30     	; 0x2a46 <STP_enuRotate+0x9e4>
    2a28:	88 ec       	ldi	r24, 0xC8	; 200
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9a 8b       	std	Y+18, r25	; 0x12
    2a2e:	89 8b       	std	Y+17, r24	; 0x11
    2a30:	89 89       	ldd	r24, Y+17	; 0x11
    2a32:	9a 89       	ldd	r25, Y+18	; 0x12
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <STP_enuRotate+0x9d2>
    2a38:	9a 8b       	std	Y+18, r25	; 0x12
    2a3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9c 8b       	std	Y+20, r25	; 0x14
    2a44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	8b 89       	ldd	r24, Y+19	; 0x13
    2a48:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f7       	brne	.-38     	; 0x2a28 <STP_enuRotate+0x9c6>
    2a4e:	14 c0       	rjmp	.+40     	; 0x2a78 <STP_enuRotate+0xa16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a50:	6d 89       	ldd	r22, Y+21	; 0x15
    2a52:	7e 89       	ldd	r23, Y+22	; 0x16
    2a54:	8f 89       	ldd	r24, Y+23	; 0x17
    2a56:	98 8d       	ldd	r25, Y+24	; 0x18
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9c 8b       	std	Y+20, r25	; 0x14
    2a62:	8b 8b       	std	Y+19, r24	; 0x13
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	9c 89       	ldd	r25, Y+20	; 0x14
    2a68:	98 8b       	std	Y+16, r25	; 0x10
    2a6a:	8f 87       	std	Y+15, r24	; 0x0f
    2a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a6e:	98 89       	ldd	r25, Y+16	; 0x10
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <STP_enuRotate+0xa0e>
    2a74:	98 8b       	std	Y+16, r25	; 0x10
    2a76:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			// Step4
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	40 e0       	ldi	r20, 0x00	; 0
    2a7e:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	61 e0       	ldi	r22, 0x01	; 1
    2a86:	41 e0       	ldi	r20, 0x01	; 1
    2a88:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	62 e0       	ldi	r22, 0x02	; 2
    2a90:	41 e0       	ldi	r20, 0x01	; 1
    2a92:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	63 e0       	ldi	r22, 0x03	; 3
    2a9a:	41 e0       	ldi	r20, 0x01	; 1
    2a9c:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	a0 e2       	ldi	r26, 0x20	; 32
    2aa6:	b1 e4       	ldi	r27, 0x41	; 65
    2aa8:	8b 87       	std	Y+11, r24	; 0x0b
    2aaa:	9c 87       	std	Y+12, r25	; 0x0c
    2aac:	ad 87       	std	Y+13, r26	; 0x0d
    2aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	4a ef       	ldi	r20, 0xFA	; 250
    2abe:	54 e4       	ldi	r21, 0x44	; 68
    2ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	8f 83       	std	Y+7, r24	; 0x07
    2aca:	98 87       	std	Y+8, r25	; 0x08
    2acc:	a9 87       	std	Y+9, r26	; 0x09
    2ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad2:	78 85       	ldd	r23, Y+8	; 0x08
    2ad4:	89 85       	ldd	r24, Y+9	; 0x09
    2ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae4:	88 23       	and	r24, r24
    2ae6:	2c f4       	brge	.+10     	; 0x2af2 <STP_enuRotate+0xa90>
		__ticks = 1;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	3f c0       	rjmp	.+126    	; 0x2b70 <STP_enuRotate+0xb0e>
	else if (__tmp > 65535)
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	3f ef       	ldi	r19, 0xFF	; 255
    2afe:	4f e7       	ldi	r20, 0x7F	; 127
    2b00:	57 e4       	ldi	r21, 0x47	; 71
    2b02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b06:	18 16       	cp	r1, r24
    2b08:	4c f5       	brge	.+82     	; 0x2b5c <STP_enuRotate+0xafa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e2       	ldi	r20, 0x20	; 32
    2b18:	51 e4       	ldi	r21, 0x41	; 65
    2b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	9e 83       	std	Y+6, r25	; 0x06
    2b30:	8d 83       	std	Y+5, r24	; 0x05
    2b32:	0f c0       	rjmp	.+30     	; 0x2b52 <STP_enuRotate+0xaf0>
    2b34:	88 ec       	ldi	r24, 0xC8	; 200
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9c 83       	std	Y+4, r25	; 0x04
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <STP_enuRotate+0xade>
    2b44:	9c 83       	std	Y+4, r25	; 0x04
    2b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b52:	8d 81       	ldd	r24, Y+5	; 0x05
    2b54:	9e 81       	ldd	r25, Y+6	; 0x06
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	69 f7       	brne	.-38     	; 0x2b34 <STP_enuRotate+0xad2>
    2b5a:	14 c0       	rjmp	.+40     	; 0x2b84 <STP_enuRotate+0xb22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5e:	78 85       	ldd	r23, Y+8	; 0x08
    2b60:	89 85       	ldd	r24, Y+9	; 0x09
    2b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	9e 81       	ldd	r25, Y+6	; 0x06
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <STP_enuRotate+0xb1a>
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
		    DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
		    _delay_ms(10);
		}
	break;
	case STP_ANTICLOCKWISE:
		for(u16 i = 0 ; i < numberOfSteps ; i++){
    2b84:	de 01       	movw	r26, r28
    2b86:	af 58       	subi	r26, 0x8F	; 143
    2b88:	bf 4f       	sbci	r27, 0xFF	; 255
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	ef 58       	subi	r30, 0x8F	; 143
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	01 96       	adiw	r24, 0x01	; 1
    2b96:	8d 93       	st	X+, r24
    2b98:	9c 93       	st	X, r25
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	ef 58       	subi	r30, 0x8F	; 143
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	de 01       	movw	r26, r28
    2ba2:	ab 58       	subi	r26, 0x8B	; 139
    2ba4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba6:	20 81       	ld	r18, Z
    2ba8:	31 81       	ldd	r19, Z+1	; 0x01
    2baa:	8d 91       	ld	r24, X+
    2bac:	9c 91       	ld	r25, X
    2bae:	11 97       	sbiw	r26, 0x01	; 1
    2bb0:	28 17       	cp	r18, r24
    2bb2:	39 07       	cpc	r19, r25
    2bb4:	08 f4       	brcc	.+2      	; 0x2bb8 <STP_enuRotate+0xb56>
    2bb6:	ce cd       	rjmp	.-1124   	; 0x2754 <STP_enuRotate+0x6f2>
    2bb8:	05 c0       	rjmp	.+10     	; 0x2bc4 <STP_enuRotate+0xb62>
			DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
			_delay_ms(10);
		}
	break;
	default:
		Local_enuErrorState = STP_NOK;
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e9 58       	subi	r30, 0x89	; 137
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	82 e0       	ldi	r24, 0x02	; 2
    2bc2:	80 83       	st	Z, r24
	break;
	}
	return Local_enuErrorState;
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e9 58       	subi	r30, 0x89	; 137
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
}
    2bcc:	c4 58       	subi	r28, 0x84	; 132
    2bce:	df 4f       	sbci	r29, 0xFF	; 255
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	08 95       	ret

00002be4 <STP_voidStop>:
void STP_voidStop(void){
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62

	DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	41 e0       	ldi	r20, 0x01	; 1
    2bf2:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	61 e0       	ldi	r22, 0x01	; 1
    2bfa:	41 e0       	ldi	r20, 0x01	; 1
    2bfc:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	62 e0       	ldi	r22, 0x02	; 2
    2c04:	41 e0       	ldi	r20, 0x01	; 1
    2c06:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	63 e0       	ldi	r22, 0x03	; 3
    2c0e:	41 e0       	ldi	r20, 0x01	; 1
    2c10:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
}
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <LCD_voidInit>:

#include "LCD_private.h"
#include "LCD_config.h"
#include "LCD_interface.h"

void LCD_voidInit(void){
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	cc 54       	subi	r28, 0x4C	; 76
    2c28:	d0 40       	sbci	r29, 0x00	; 0
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	de bf       	out	0x3e, r29	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	cd bf       	out	0x3d, r28	; 61
    2c34:	fe 01       	movw	r30, r28
    2c36:	e7 5b       	subi	r30, 0xB7	; 183
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	ac e0       	ldi	r26, 0x0C	; 12
    2c40:	b2 e4       	ldi	r27, 0x42	; 66
    2c42:	80 83       	st	Z, r24
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	a2 83       	std	Z+2, r26	; 0x02
    2c48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4a:	8e 01       	movw	r16, r28
    2c4c:	0b 5b       	subi	r16, 0xBB	; 187
    2c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c50:	fe 01       	movw	r30, r28
    2c52:	e7 5b       	subi	r30, 0xB7	; 183
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	60 81       	ld	r22, Z
    2c58:	71 81       	ldd	r23, Z+1	; 0x01
    2c5a:	82 81       	ldd	r24, Z+2	; 0x02
    2c5c:	93 81       	ldd	r25, Z+3	; 0x03
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	4a ef       	ldi	r20, 0xFA	; 250
    2c64:	54 e4       	ldi	r21, 0x44	; 68
    2c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	f8 01       	movw	r30, r16
    2c70:	80 83       	st	Z, r24
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	a2 83       	std	Z+2, r26	; 0x02
    2c76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c78:	fe 01       	movw	r30, r28
    2c7a:	eb 5b       	subi	r30, 0xBB	; 187
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e8       	ldi	r20, 0x80	; 128
    2c8c:	5f e3       	ldi	r21, 0x3F	; 63
    2c8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c92:	88 23       	and	r24, r24
    2c94:	44 f4       	brge	.+16     	; 0x2ca6 <LCD_voidInit+0x8c>
		__ticks = 1;
    2c96:	fe 01       	movw	r30, r28
    2c98:	ed 5b       	subi	r30, 0xBD	; 189
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	91 83       	std	Z+1, r25	; 0x01
    2ca2:	80 83       	st	Z, r24
    2ca4:	64 c0       	rjmp	.+200    	; 0x2d6e <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	eb 5b       	subi	r30, 0xBB	; 187
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	3f ef       	ldi	r19, 0xFF	; 255
    2cb8:	4f e7       	ldi	r20, 0x7F	; 127
    2cba:	57 e4       	ldi	r21, 0x47	; 71
    2cbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc0:	18 16       	cp	r1, r24
    2cc2:	0c f0       	brlt	.+2      	; 0x2cc6 <LCD_voidInit+0xac>
    2cc4:	43 c0       	rjmp	.+134    	; 0x2d4c <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	e7 5b       	subi	r30, 0xB7	; 183
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	60 81       	ld	r22, Z
    2cce:	71 81       	ldd	r23, Z+1	; 0x01
    2cd0:	82 81       	ldd	r24, Z+2	; 0x02
    2cd2:	93 81       	ldd	r25, Z+3	; 0x03
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e2       	ldi	r20, 0x20	; 32
    2cda:	51 e4       	ldi	r21, 0x41	; 65
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	8e 01       	movw	r16, r28
    2ce6:	0d 5b       	subi	r16, 0xBD	; 189
    2ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	f8 01       	movw	r30, r16
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	80 83       	st	Z, r24
    2cfc:	1f c0       	rjmp	.+62     	; 0x2d3c <LCD_voidInit+0x122>
    2cfe:	fe 01       	movw	r30, r28
    2d00:	ef 5b       	subi	r30, 0xBF	; 191
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	88 ec       	ldi	r24, 0xC8	; 200
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	ef 5b       	subi	r30, 0xBF	; 191
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 81       	ld	r24, Z
    2d14:	91 81       	ldd	r25, Z+1	; 0x01
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <LCD_voidInit+0xfc>
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	ef 5b       	subi	r30, 0xBF	; 191
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d24:	de 01       	movw	r26, r28
    2d26:	ad 5b       	subi	r26, 0xBD	; 189
    2d28:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	ed 5b       	subi	r30, 0xBD	; 189
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	11 96       	adiw	r26, 0x01	; 1
    2d38:	9c 93       	st	X, r25
    2d3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	ed 5b       	subi	r30, 0xBD	; 189
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 81       	ld	r24, Z
    2d44:	91 81       	ldd	r25, Z+1	; 0x01
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	d1 f6       	brne	.-76     	; 0x2cfe <LCD_voidInit+0xe4>
    2d4a:	24 c0       	rjmp	.+72     	; 0x2d94 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4c:	8e 01       	movw	r16, r28
    2d4e:	0d 5b       	subi	r16, 0xBD	; 189
    2d50:	1f 4f       	sbci	r17, 0xFF	; 255
    2d52:	fe 01       	movw	r30, r28
    2d54:	eb 5b       	subi	r30, 0xBB	; 187
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	60 81       	ld	r22, Z
    2d5a:	71 81       	ldd	r23, Z+1	; 0x01
    2d5c:	82 81       	ldd	r24, Z+2	; 0x02
    2d5e:	93 81       	ldd	r25, Z+3	; 0x03
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	f8 01       	movw	r30, r16
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ed 5b       	subi	r30, 0xBD	; 189
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	80 81       	ld	r24, Z
    2d76:	91 81       	ldd	r25, Z+1	; 0x01
    2d78:	fe 01       	movw	r30, r28
    2d7a:	ff 96       	adiw	r30, 0x3f	; 63
    2d7c:	91 83       	std	Z+1, r25	; 0x01
    2d7e:	80 83       	st	Z, r24
    2d80:	fe 01       	movw	r30, r28
    2d82:	ff 96       	adiw	r30, 0x3f	; 63
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <LCD_voidInit+0x16e>
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	ff 96       	adiw	r30, 0x3f	; 63
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	80 83       	st	Z, r24

	#if MODE == EIGHT_BITS

	_delay_ms(35);
	LCD_voidSendCmd(0b00111000);
    2d94:	88 e3       	ldi	r24, 0x38	; 56
    2d96:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidSendCmd>
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	a0 e2       	ldi	r26, 0x20	; 32
    2da0:	b2 e4       	ldi	r27, 0x42	; 66
    2da2:	8b af       	std	Y+59, r24	; 0x3b
    2da4:	9c af       	std	Y+60, r25	; 0x3c
    2da6:	ad af       	std	Y+61, r26	; 0x3d
    2da8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2daa:	6b ad       	ldd	r22, Y+59	; 0x3b
    2dac:	7c ad       	ldd	r23, Y+60	; 0x3c
    2dae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2db0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2db2:	2b ea       	ldi	r18, 0xAB	; 171
    2db4:	3a ea       	ldi	r19, 0xAA	; 170
    2db6:	4a e2       	ldi	r20, 0x2A	; 42
    2db8:	50 e4       	ldi	r21, 0x40	; 64
    2dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	8f ab       	std	Y+55, r24	; 0x37
    2dc4:	98 af       	std	Y+56, r25	; 0x38
    2dc6:	a9 af       	std	Y+57, r26	; 0x39
    2dc8:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2dca:	6f a9       	ldd	r22, Y+55	; 0x37
    2dcc:	78 ad       	ldd	r23, Y+56	; 0x38
    2dce:	89 ad       	ldd	r24, Y+57	; 0x39
    2dd0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f e3       	ldi	r21, 0x3F	; 63
    2dda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dde:	88 23       	and	r24, r24
    2de0:	1c f4       	brge	.+6      	; 0x2de8 <LCD_voidInit+0x1ce>
		__ticks = 1;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	8e ab       	std	Y+54, r24	; 0x36
    2de6:	91 c0       	rjmp	.+290    	; 0x2f0a <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    2de8:	6f a9       	ldd	r22, Y+55	; 0x37
    2dea:	78 ad       	ldd	r23, Y+56	; 0x38
    2dec:	89 ad       	ldd	r24, Y+57	; 0x39
    2dee:	9a ad       	ldd	r25, Y+58	; 0x3a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	4f e7       	ldi	r20, 0x7F	; 127
    2df6:	53 e4       	ldi	r21, 0x43	; 67
    2df8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfc:	18 16       	cp	r1, r24
    2dfe:	0c f0       	brlt	.+2      	; 0x2e02 <LCD_voidInit+0x1e8>
    2e00:	7b c0       	rjmp	.+246    	; 0x2ef8 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    2e02:	6b ad       	ldd	r22, Y+59	; 0x3b
    2e04:	7c ad       	ldd	r23, Y+60	; 0x3c
    2e06:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e08:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	4a e7       	ldi	r20, 0x7A	; 122
    2e10:	54 e4       	ldi	r21, 0x44	; 68
    2e12:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	8a ab       	std	Y+50, r24	; 0x32
    2e1c:	9b ab       	std	Y+51, r25	; 0x33
    2e1e:	ac ab       	std	Y+52, r26	; 0x34
    2e20:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e22:	6a a9       	ldd	r22, Y+50	; 0x32
    2e24:	7b a9       	ldd	r23, Y+51	; 0x33
    2e26:	8c a9       	ldd	r24, Y+52	; 0x34
    2e28:	9d a9       	ldd	r25, Y+53	; 0x35
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	4a ef       	ldi	r20, 0xFA	; 250
    2e30:	54 e4       	ldi	r21, 0x44	; 68
    2e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	8e a7       	std	Y+46, r24	; 0x2e
    2e3c:	9f a7       	std	Y+47, r25	; 0x2f
    2e3e:	a8 ab       	std	Y+48, r26	; 0x30
    2e40:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2e42:	6e a5       	ldd	r22, Y+46	; 0x2e
    2e44:	7f a5       	ldd	r23, Y+47	; 0x2f
    2e46:	88 a9       	ldd	r24, Y+48	; 0x30
    2e48:	99 a9       	ldd	r25, Y+49	; 0x31
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e8       	ldi	r20, 0x80	; 128
    2e50:	5f e3       	ldi	r21, 0x3F	; 63
    2e52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e56:	88 23       	and	r24, r24
    2e58:	2c f4       	brge	.+10     	; 0x2e64 <LCD_voidInit+0x24a>
		__ticks = 1;
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	9d a7       	std	Y+45, r25	; 0x2d
    2e60:	8c a7       	std	Y+44, r24	; 0x2c
    2e62:	3f c0       	rjmp	.+126    	; 0x2ee2 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    2e64:	6e a5       	ldd	r22, Y+46	; 0x2e
    2e66:	7f a5       	ldd	r23, Y+47	; 0x2f
    2e68:	88 a9       	ldd	r24, Y+48	; 0x30
    2e6a:	99 a9       	ldd	r25, Y+49	; 0x31
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	3f ef       	ldi	r19, 0xFF	; 255
    2e70:	4f e7       	ldi	r20, 0x7F	; 127
    2e72:	57 e4       	ldi	r21, 0x47	; 71
    2e74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e78:	18 16       	cp	r1, r24
    2e7a:	4c f5       	brge	.+82     	; 0x2ece <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7c:	6a a9       	ldd	r22, Y+50	; 0x32
    2e7e:	7b a9       	ldd	r23, Y+51	; 0x33
    2e80:	8c a9       	ldd	r24, Y+52	; 0x34
    2e82:	9d a9       	ldd	r25, Y+53	; 0x35
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e2       	ldi	r20, 0x20	; 32
    2e8a:	51 e4       	ldi	r21, 0x41	; 65
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	bc 01       	movw	r22, r24
    2e96:	cd 01       	movw	r24, r26
    2e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	9d a7       	std	Y+45, r25	; 0x2d
    2ea2:	8c a7       	std	Y+44, r24	; 0x2c
    2ea4:	0f c0       	rjmp	.+30     	; 0x2ec4 <LCD_voidInit+0x2aa>
    2ea6:	88 ec       	ldi	r24, 0xC8	; 200
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	9b a7       	std	Y+43, r25	; 0x2b
    2eac:	8a a7       	std	Y+42, r24	; 0x2a
    2eae:	8a a5       	ldd	r24, Y+42	; 0x2a
    2eb0:	9b a5       	ldd	r25, Y+43	; 0x2b
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <LCD_voidInit+0x298>
    2eb6:	9b a7       	std	Y+43, r25	; 0x2b
    2eb8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eba:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ebc:	9d a5       	ldd	r25, Y+45	; 0x2d
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	9d a7       	std	Y+45, r25	; 0x2d
    2ec2:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ec6:	9d a5       	ldd	r25, Y+45	; 0x2d
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	69 f7       	brne	.-38     	; 0x2ea6 <LCD_voidInit+0x28c>
    2ecc:	24 c0       	rjmp	.+72     	; 0x2f16 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ece:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ed0:	7f a5       	ldd	r23, Y+47	; 0x2f
    2ed2:	88 a9       	ldd	r24, Y+48	; 0x30
    2ed4:	99 a9       	ldd	r25, Y+49	; 0x31
    2ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	9d a7       	std	Y+45, r25	; 0x2d
    2ee0:	8c a7       	std	Y+44, r24	; 0x2c
    2ee2:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ee4:	9d a5       	ldd	r25, Y+45	; 0x2d
    2ee6:	99 a7       	std	Y+41, r25	; 0x29
    2ee8:	88 a7       	std	Y+40, r24	; 0x28
    2eea:	88 a5       	ldd	r24, Y+40	; 0x28
    2eec:	99 a5       	ldd	r25, Y+41	; 0x29
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	f1 f7       	brne	.-4      	; 0x2eee <LCD_voidInit+0x2d4>
    2ef2:	99 a7       	std	Y+41, r25	; 0x29
    2ef4:	88 a7       	std	Y+40, r24	; 0x28
    2ef6:	0f c0       	rjmp	.+30     	; 0x2f16 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ef8:	6f a9       	ldd	r22, Y+55	; 0x37
    2efa:	78 ad       	ldd	r23, Y+56	; 0x38
    2efc:	89 ad       	ldd	r24, Y+57	; 0x39
    2efe:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	8e ab       	std	Y+54, r24	; 0x36
    2f0a:	8e a9       	ldd	r24, Y+54	; 0x36
    2f0c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f0e:	8f a1       	ldd	r24, Y+39	; 0x27
    2f10:	8a 95       	dec	r24
    2f12:	f1 f7       	brne	.-4      	; 0x2f10 <LCD_voidInit+0x2f6>
    2f14:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmd(0b00001111);
    2f16:	8f e0       	ldi	r24, 0x0F	; 15
    2f18:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidSendCmd>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	a0 e2       	ldi	r26, 0x20	; 32
    2f22:	b2 e4       	ldi	r27, 0x42	; 66
    2f24:	8b a3       	std	Y+35, r24	; 0x23
    2f26:	9c a3       	std	Y+36, r25	; 0x24
    2f28:	ad a3       	std	Y+37, r26	; 0x25
    2f2a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f30:	8d a1       	ldd	r24, Y+37	; 0x25
    2f32:	9e a1       	ldd	r25, Y+38	; 0x26
    2f34:	2b ea       	ldi	r18, 0xAB	; 171
    2f36:	3a ea       	ldi	r19, 0xAA	; 170
    2f38:	4a e2       	ldi	r20, 0x2A	; 42
    2f3a:	50 e4       	ldi	r21, 0x40	; 64
    2f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	8f 8f       	std	Y+31, r24	; 0x1f
    2f46:	98 a3       	std	Y+32, r25	; 0x20
    2f48:	a9 a3       	std	Y+33, r26	; 0x21
    2f4a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2f4c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2f4e:	78 a1       	ldd	r23, Y+32	; 0x20
    2f50:	89 a1       	ldd	r24, Y+33	; 0x21
    2f52:	9a a1       	ldd	r25, Y+34	; 0x22
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e8       	ldi	r20, 0x80	; 128
    2f5a:	5f e3       	ldi	r21, 0x3F	; 63
    2f5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f60:	88 23       	and	r24, r24
    2f62:	1c f4       	brge	.+6      	; 0x2f6a <LCD_voidInit+0x350>
		__ticks = 1;
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	8e 8f       	std	Y+30, r24	; 0x1e
    2f68:	91 c0       	rjmp	.+290    	; 0x308c <LCD_voidInit+0x472>
	else if (__tmp > 255)
    2f6a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2f6c:	78 a1       	ldd	r23, Y+32	; 0x20
    2f6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f70:	9a a1       	ldd	r25, Y+34	; 0x22
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	4f e7       	ldi	r20, 0x7F	; 127
    2f78:	53 e4       	ldi	r21, 0x43	; 67
    2f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f7e:	18 16       	cp	r1, r24
    2f80:	0c f0       	brlt	.+2      	; 0x2f84 <LCD_voidInit+0x36a>
    2f82:	7b c0       	rjmp	.+246    	; 0x307a <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2f84:	6b a1       	ldd	r22, Y+35	; 0x23
    2f86:	7c a1       	ldd	r23, Y+36	; 0x24
    2f88:	8d a1       	ldd	r24, Y+37	; 0x25
    2f8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	4a e7       	ldi	r20, 0x7A	; 122
    2f92:	54 e4       	ldi	r21, 0x44	; 68
    2f94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	8a 8f       	std	Y+26, r24	; 0x1a
    2f9e:	9b 8f       	std	Y+27, r25	; 0x1b
    2fa0:	ac 8f       	std	Y+28, r26	; 0x1c
    2fa2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2fa6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2fa8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2faa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	4a ef       	ldi	r20, 0xFA	; 250
    2fb2:	54 e4       	ldi	r21, 0x44	; 68
    2fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	8e 8b       	std	Y+22, r24	; 0x16
    2fbe:	9f 8b       	std	Y+23, r25	; 0x17
    2fc0:	a8 8f       	std	Y+24, r26	; 0x18
    2fc2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2fc4:	6e 89       	ldd	r22, Y+22	; 0x16
    2fc6:	7f 89       	ldd	r23, Y+23	; 0x17
    2fc8:	88 8d       	ldd	r24, Y+24	; 0x18
    2fca:	99 8d       	ldd	r25, Y+25	; 0x19
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	40 e8       	ldi	r20, 0x80	; 128
    2fd2:	5f e3       	ldi	r21, 0x3F	; 63
    2fd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fd8:	88 23       	and	r24, r24
    2fda:	2c f4       	brge	.+10     	; 0x2fe6 <LCD_voidInit+0x3cc>
		__ticks = 1;
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	9d 8b       	std	Y+21, r25	; 0x15
    2fe2:	8c 8b       	std	Y+20, r24	; 0x14
    2fe4:	3f c0       	rjmp	.+126    	; 0x3064 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2fe6:	6e 89       	ldd	r22, Y+22	; 0x16
    2fe8:	7f 89       	ldd	r23, Y+23	; 0x17
    2fea:	88 8d       	ldd	r24, Y+24	; 0x18
    2fec:	99 8d       	ldd	r25, Y+25	; 0x19
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	3f ef       	ldi	r19, 0xFF	; 255
    2ff2:	4f e7       	ldi	r20, 0x7F	; 127
    2ff4:	57 e4       	ldi	r21, 0x47	; 71
    2ff6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ffa:	18 16       	cp	r1, r24
    2ffc:	4c f5       	brge	.+82     	; 0x3050 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3000:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3002:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3004:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e2       	ldi	r20, 0x20	; 32
    300c:	51 e4       	ldi	r21, 0x41	; 65
    300e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	bc 01       	movw	r22, r24
    3018:	cd 01       	movw	r24, r26
    301a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	9d 8b       	std	Y+21, r25	; 0x15
    3024:	8c 8b       	std	Y+20, r24	; 0x14
    3026:	0f c0       	rjmp	.+30     	; 0x3046 <LCD_voidInit+0x42c>
    3028:	88 ec       	ldi	r24, 0xC8	; 200
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	9b 8b       	std	Y+19, r25	; 0x13
    302e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3030:	8a 89       	ldd	r24, Y+18	; 0x12
    3032:	9b 89       	ldd	r25, Y+19	; 0x13
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	f1 f7       	brne	.-4      	; 0x3034 <LCD_voidInit+0x41a>
    3038:	9b 8b       	std	Y+19, r25	; 0x13
    303a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303c:	8c 89       	ldd	r24, Y+20	; 0x14
    303e:	9d 89       	ldd	r25, Y+21	; 0x15
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	9d 8b       	std	Y+21, r25	; 0x15
    3044:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3046:	8c 89       	ldd	r24, Y+20	; 0x14
    3048:	9d 89       	ldd	r25, Y+21	; 0x15
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	69 f7       	brne	.-38     	; 0x3028 <LCD_voidInit+0x40e>
    304e:	24 c0       	rjmp	.+72     	; 0x3098 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3050:	6e 89       	ldd	r22, Y+22	; 0x16
    3052:	7f 89       	ldd	r23, Y+23	; 0x17
    3054:	88 8d       	ldd	r24, Y+24	; 0x18
    3056:	99 8d       	ldd	r25, Y+25	; 0x19
    3058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	9d 8b       	std	Y+21, r25	; 0x15
    3062:	8c 8b       	std	Y+20, r24	; 0x14
    3064:	8c 89       	ldd	r24, Y+20	; 0x14
    3066:	9d 89       	ldd	r25, Y+21	; 0x15
    3068:	99 8b       	std	Y+17, r25	; 0x11
    306a:	88 8b       	std	Y+16, r24	; 0x10
    306c:	88 89       	ldd	r24, Y+16	; 0x10
    306e:	99 89       	ldd	r25, Y+17	; 0x11
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	f1 f7       	brne	.-4      	; 0x3070 <LCD_voidInit+0x456>
    3074:	99 8b       	std	Y+17, r25	; 0x11
    3076:	88 8b       	std	Y+16, r24	; 0x10
    3078:	0f c0       	rjmp	.+30     	; 0x3098 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    307a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    307c:	78 a1       	ldd	r23, Y+32	; 0x20
    307e:	89 a1       	ldd	r24, Y+33	; 0x21
    3080:	9a a1       	ldd	r25, Y+34	; 0x22
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	8e 8f       	std	Y+30, r24	; 0x1e
    308c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    308e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3090:	8f 85       	ldd	r24, Y+15	; 0x0f
    3092:	8a 95       	dec	r24
    3094:	f1 f7       	brne	.-4      	; 0x3092 <LCD_voidInit+0x478>
    3096:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmd(0b00000001);
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidSendCmd>
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	a0 e0       	ldi	r26, 0x00	; 0
    30a4:	b0 e4       	ldi	r27, 0x40	; 64
    30a6:	8b 87       	std	Y+11, r24	; 0x0b
    30a8:	9c 87       	std	Y+12, r25	; 0x0c
    30aa:	ad 87       	std	Y+13, r26	; 0x0d
    30ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	4a ef       	ldi	r20, 0xFA	; 250
    30bc:	54 e4       	ldi	r21, 0x44	; 68
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	8f 83       	std	Y+7, r24	; 0x07
    30c8:	98 87       	std	Y+8, r25	; 0x08
    30ca:	a9 87       	std	Y+9, r26	; 0x09
    30cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30ce:	6f 81       	ldd	r22, Y+7	; 0x07
    30d0:	78 85       	ldd	r23, Y+8	; 0x08
    30d2:	89 85       	ldd	r24, Y+9	; 0x09
    30d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e8       	ldi	r20, 0x80	; 128
    30dc:	5f e3       	ldi	r21, 0x3F	; 63
    30de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e2:	88 23       	and	r24, r24
    30e4:	2c f4       	brge	.+10     	; 0x30f0 <LCD_voidInit+0x4d6>
		__ticks = 1;
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	9e 83       	std	Y+6, r25	; 0x06
    30ec:	8d 83       	std	Y+5, r24	; 0x05
    30ee:	3f c0       	rjmp	.+126    	; 0x316e <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    30f0:	6f 81       	ldd	r22, Y+7	; 0x07
    30f2:	78 85       	ldd	r23, Y+8	; 0x08
    30f4:	89 85       	ldd	r24, Y+9	; 0x09
    30f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	3f ef       	ldi	r19, 0xFF	; 255
    30fc:	4f e7       	ldi	r20, 0x7F	; 127
    30fe:	57 e4       	ldi	r21, 0x47	; 71
    3100:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3104:	18 16       	cp	r1, r24
    3106:	4c f5       	brge	.+82     	; 0x315a <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3108:	6b 85       	ldd	r22, Y+11	; 0x0b
    310a:	7c 85       	ldd	r23, Y+12	; 0x0c
    310c:	8d 85       	ldd	r24, Y+13	; 0x0d
    310e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e2       	ldi	r20, 0x20	; 32
    3116:	51 e4       	ldi	r21, 0x41	; 65
    3118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	bc 01       	movw	r22, r24
    3122:	cd 01       	movw	r24, r26
    3124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	9e 83       	std	Y+6, r25	; 0x06
    312e:	8d 83       	std	Y+5, r24	; 0x05
    3130:	0f c0       	rjmp	.+30     	; 0x3150 <LCD_voidInit+0x536>
    3132:	88 ec       	ldi	r24, 0xC8	; 200
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	9c 83       	std	Y+4, r25	; 0x04
    3138:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    313a:	8b 81       	ldd	r24, Y+3	; 0x03
    313c:	9c 81       	ldd	r25, Y+4	; 0x04
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	f1 f7       	brne	.-4      	; 0x313e <LCD_voidInit+0x524>
    3142:	9c 83       	std	Y+4, r25	; 0x04
    3144:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	9e 81       	ldd	r25, Y+6	; 0x06
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	9e 83       	std	Y+6, r25	; 0x06
    314e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3150:	8d 81       	ldd	r24, Y+5	; 0x05
    3152:	9e 81       	ldd	r25, Y+6	; 0x06
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	69 f7       	brne	.-38     	; 0x3132 <LCD_voidInit+0x518>
    3158:	14 c0       	rjmp	.+40     	; 0x3182 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315a:	6f 81       	ldd	r22, Y+7	; 0x07
    315c:	78 85       	ldd	r23, Y+8	; 0x08
    315e:	89 85       	ldd	r24, Y+9	; 0x09
    3160:	9a 85       	ldd	r25, Y+10	; 0x0a
    3162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	9e 83       	std	Y+6, r25	; 0x06
    316c:	8d 83       	std	Y+5, r24	; 0x05
    316e:	8d 81       	ldd	r24, Y+5	; 0x05
    3170:	9e 81       	ldd	r25, Y+6	; 0x06
    3172:	9a 83       	std	Y+2, r25	; 0x02
    3174:	89 83       	std	Y+1, r24	; 0x01
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	9a 81       	ldd	r25, Y+2	; 0x02
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <LCD_voidInit+0x560>
    317e:	9a 83       	std	Y+2, r25	; 0x02
    3180:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmd(0b00001110);
    3182:	8e e0       	ldi	r24, 0x0E	; 14
    3184:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidSendCmd>
     //#elif MODE == FOUR_BITS


	#endif
}
    3188:	c4 5b       	subi	r28, 0xB4	; 180
    318a:	df 4f       	sbci	r29, 0xFF	; 255
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	cf 91       	pop	r28
    3198:	df 91       	pop	r29
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	08 95       	ret

000031a0 <LCD_voidCLR>:
void LCD_voidCLR(void){
    31a0:	df 93       	push	r29
    31a2:	cf 93       	push	r28
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
    31a8:	2e 97       	sbiw	r28, 0x0e	; 14
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	cd bf       	out	0x3d, r28	; 61
//	DIO_u8SetPinValue(CONTROL_PORT,RS_PIN,DIO_u8_LOW); // setting Rs=0
//	DIO_u8SetPinValue(CONTROL_PORT,RW_PIN,DIO_u8_LOW); // setting Rw=0
	LCD_voidSendCmd(DISPLAY_CLR);
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidSendCmd>
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	a0 e0       	ldi	r26, 0x00	; 0
    31c0:	b0 e4       	ldi	r27, 0x40	; 64
    31c2:	8b 87       	std	Y+11, r24	; 0x0b
    31c4:	9c 87       	std	Y+12, r25	; 0x0c
    31c6:	ad 87       	std	Y+13, r26	; 0x0d
    31c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    31cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	4a ef       	ldi	r20, 0xFA	; 250
    31d8:	54 e4       	ldi	r21, 0x44	; 68
    31da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	8f 83       	std	Y+7, r24	; 0x07
    31e4:	98 87       	std	Y+8, r25	; 0x08
    31e6:	a9 87       	std	Y+9, r26	; 0x09
    31e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ea:	6f 81       	ldd	r22, Y+7	; 0x07
    31ec:	78 85       	ldd	r23, Y+8	; 0x08
    31ee:	89 85       	ldd	r24, Y+9	; 0x09
    31f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	40 e8       	ldi	r20, 0x80	; 128
    31f8:	5f e3       	ldi	r21, 0x3F	; 63
    31fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31fe:	88 23       	and	r24, r24
    3200:	2c f4       	brge	.+10     	; 0x320c <LCD_voidCLR+0x6c>
		__ticks = 1;
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	9e 83       	std	Y+6, r25	; 0x06
    3208:	8d 83       	std	Y+5, r24	; 0x05
    320a:	3f c0       	rjmp	.+126    	; 0x328a <LCD_voidCLR+0xea>
	else if (__tmp > 65535)
    320c:	6f 81       	ldd	r22, Y+7	; 0x07
    320e:	78 85       	ldd	r23, Y+8	; 0x08
    3210:	89 85       	ldd	r24, Y+9	; 0x09
    3212:	9a 85       	ldd	r25, Y+10	; 0x0a
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	3f ef       	ldi	r19, 0xFF	; 255
    3218:	4f e7       	ldi	r20, 0x7F	; 127
    321a:	57 e4       	ldi	r21, 0x47	; 71
    321c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3220:	18 16       	cp	r1, r24
    3222:	4c f5       	brge	.+82     	; 0x3276 <LCD_voidCLR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3224:	6b 85       	ldd	r22, Y+11	; 0x0b
    3226:	7c 85       	ldd	r23, Y+12	; 0x0c
    3228:	8d 85       	ldd	r24, Y+13	; 0x0d
    322a:	9e 85       	ldd	r25, Y+14	; 0x0e
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e2       	ldi	r20, 0x20	; 32
    3232:	51 e4       	ldi	r21, 0x41	; 65
    3234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	bc 01       	movw	r22, r24
    323e:	cd 01       	movw	r24, r26
    3240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	9e 83       	std	Y+6, r25	; 0x06
    324a:	8d 83       	std	Y+5, r24	; 0x05
    324c:	0f c0       	rjmp	.+30     	; 0x326c <LCD_voidCLR+0xcc>
    324e:	88 ec       	ldi	r24, 0xC8	; 200
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	9c 83       	std	Y+4, r25	; 0x04
    3254:	8b 83       	std	Y+3, r24	; 0x03
    3256:	8b 81       	ldd	r24, Y+3	; 0x03
    3258:	9c 81       	ldd	r25, Y+4	; 0x04
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	f1 f7       	brne	.-4      	; 0x325a <LCD_voidCLR+0xba>
    325e:	9c 83       	std	Y+4, r25	; 0x04
    3260:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3262:	8d 81       	ldd	r24, Y+5	; 0x05
    3264:	9e 81       	ldd	r25, Y+6	; 0x06
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	9e 83       	std	Y+6, r25	; 0x06
    326a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326c:	8d 81       	ldd	r24, Y+5	; 0x05
    326e:	9e 81       	ldd	r25, Y+6	; 0x06
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	69 f7       	brne	.-38     	; 0x324e <LCD_voidCLR+0xae>
    3274:	14 c0       	rjmp	.+40     	; 0x329e <LCD_voidCLR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3276:	6f 81       	ldd	r22, Y+7	; 0x07
    3278:	78 85       	ldd	r23, Y+8	; 0x08
    327a:	89 85       	ldd	r24, Y+9	; 0x09
    327c:	9a 85       	ldd	r25, Y+10	; 0x0a
    327e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	9e 83       	std	Y+6, r25	; 0x06
    3288:	8d 83       	std	Y+5, r24	; 0x05
    328a:	8d 81       	ldd	r24, Y+5	; 0x05
    328c:	9e 81       	ldd	r25, Y+6	; 0x06
    328e:	9a 83       	std	Y+2, r25	; 0x02
    3290:	89 83       	std	Y+1, r24	; 0x01
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	9a 81       	ldd	r25, Y+2	; 0x02
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <LCD_voidCLR+0xf6>
    329a:	9a 83       	std	Y+2, r25	; 0x02
    329c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    329e:	2e 96       	adiw	r28, 0x0e	; 14
    32a0:	0f b6       	in	r0, 0x3f	; 63
    32a2:	f8 94       	cli
    32a4:	de bf       	out	0x3e, r29	; 62
    32a6:	0f be       	out	0x3f, r0	; 63
    32a8:	cd bf       	out	0x3d, r28	; 61
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <LCD_voidSendCmd>:
void LCD_voidSendCmd(u8 Copy_u8Cmd){
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	e1 97       	sbiw	r28, 0x31	; 49
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	89 ab       	std	Y+49, r24	; 0x31
    // To send command we should clear RS & RW
	DIO_u8SetPinValue(CONTROL_PORT,RS_PIN,DIO_u8_LOW); // setting Rs=0
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	60 e0       	ldi	r22, 0x00	; 0
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CONTROL_PORT,RW_PIN,DIO_u8_LOW); // setting Rw=0
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	61 e0       	ldi	r22, 0x01	; 1
    32d4:	40 e0       	ldi	r20, 0x00	; 0
    32d6:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>

	DIO_u8SetPortValue(DATA_PORT,Copy_u8Cmd);
    32da:	82 e0       	ldi	r24, 0x02	; 2
    32dc:	69 a9       	ldd	r22, Y+49	; 0x31
    32de:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_HIGH);  // E=1 then wait delay of  then E=0
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	62 e0       	ldi	r22, 0x02	; 2
    32e6:	41 e0       	ldi	r20, 0x01	; 1
    32e8:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	a0 e8       	ldi	r26, 0x80	; 128
    32f2:	bf e3       	ldi	r27, 0x3F	; 63
    32f4:	8d a7       	std	Y+45, r24	; 0x2d
    32f6:	9e a7       	std	Y+46, r25	; 0x2e
    32f8:	af a7       	std	Y+47, r26	; 0x2f
    32fa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32fc:	6d a5       	ldd	r22, Y+45	; 0x2d
    32fe:	7e a5       	ldd	r23, Y+46	; 0x2e
    3300:	8f a5       	ldd	r24, Y+47	; 0x2f
    3302:	98 a9       	ldd	r25, Y+48	; 0x30
    3304:	2b ea       	ldi	r18, 0xAB	; 171
    3306:	3a ea       	ldi	r19, 0xAA	; 170
    3308:	4a e2       	ldi	r20, 0x2A	; 42
    330a:	50 e4       	ldi	r21, 0x40	; 64
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	89 a7       	std	Y+41, r24	; 0x29
    3316:	9a a7       	std	Y+42, r25	; 0x2a
    3318:	ab a7       	std	Y+43, r26	; 0x2b
    331a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    331c:	69 a5       	ldd	r22, Y+41	; 0x29
    331e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3320:	8b a5       	ldd	r24, Y+43	; 0x2b
    3322:	9c a5       	ldd	r25, Y+44	; 0x2c
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e8       	ldi	r20, 0x80	; 128
    332a:	5f e3       	ldi	r21, 0x3F	; 63
    332c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3330:	88 23       	and	r24, r24
    3332:	1c f4       	brge	.+6      	; 0x333a <LCD_voidSendCmd+0x8a>
		__ticks = 1;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	88 a7       	std	Y+40, r24	; 0x28
    3338:	91 c0       	rjmp	.+290    	; 0x345c <LCD_voidSendCmd+0x1ac>
	else if (__tmp > 255)
    333a:	69 a5       	ldd	r22, Y+41	; 0x29
    333c:	7a a5       	ldd	r23, Y+42	; 0x2a
    333e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3340:	9c a5       	ldd	r25, Y+44	; 0x2c
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	4f e7       	ldi	r20, 0x7F	; 127
    3348:	53 e4       	ldi	r21, 0x43	; 67
    334a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334e:	18 16       	cp	r1, r24
    3350:	0c f0       	brlt	.+2      	; 0x3354 <LCD_voidSendCmd+0xa4>
    3352:	7b c0       	rjmp	.+246    	; 0x344a <LCD_voidSendCmd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3354:	6d a5       	ldd	r22, Y+45	; 0x2d
    3356:	7e a5       	ldd	r23, Y+46	; 0x2e
    3358:	8f a5       	ldd	r24, Y+47	; 0x2f
    335a:	98 a9       	ldd	r25, Y+48	; 0x30
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	4a e7       	ldi	r20, 0x7A	; 122
    3362:	54 e4       	ldi	r21, 0x44	; 68
    3364:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	8c a3       	std	Y+36, r24	; 0x24
    336e:	9d a3       	std	Y+37, r25	; 0x25
    3370:	ae a3       	std	Y+38, r26	; 0x26
    3372:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3374:	6c a1       	ldd	r22, Y+36	; 0x24
    3376:	7d a1       	ldd	r23, Y+37	; 0x25
    3378:	8e a1       	ldd	r24, Y+38	; 0x26
    337a:	9f a1       	ldd	r25, Y+39	; 0x27
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	4a ef       	ldi	r20, 0xFA	; 250
    3382:	54 e4       	ldi	r21, 0x44	; 68
    3384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	88 a3       	std	Y+32, r24	; 0x20
    338e:	99 a3       	std	Y+33, r25	; 0x21
    3390:	aa a3       	std	Y+34, r26	; 0x22
    3392:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3394:	68 a1       	ldd	r22, Y+32	; 0x20
    3396:	79 a1       	ldd	r23, Y+33	; 0x21
    3398:	8a a1       	ldd	r24, Y+34	; 0x22
    339a:	9b a1       	ldd	r25, Y+35	; 0x23
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	40 e8       	ldi	r20, 0x80	; 128
    33a2:	5f e3       	ldi	r21, 0x3F	; 63
    33a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33a8:	88 23       	and	r24, r24
    33aa:	2c f4       	brge	.+10     	; 0x33b6 <LCD_voidSendCmd+0x106>
		__ticks = 1;
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	9f 8f       	std	Y+31, r25	; 0x1f
    33b2:	8e 8f       	std	Y+30, r24	; 0x1e
    33b4:	3f c0       	rjmp	.+126    	; 0x3434 <LCD_voidSendCmd+0x184>
	else if (__tmp > 65535)
    33b6:	68 a1       	ldd	r22, Y+32	; 0x20
    33b8:	79 a1       	ldd	r23, Y+33	; 0x21
    33ba:	8a a1       	ldd	r24, Y+34	; 0x22
    33bc:	9b a1       	ldd	r25, Y+35	; 0x23
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	3f ef       	ldi	r19, 0xFF	; 255
    33c2:	4f e7       	ldi	r20, 0x7F	; 127
    33c4:	57 e4       	ldi	r21, 0x47	; 71
    33c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ca:	18 16       	cp	r1, r24
    33cc:	4c f5       	brge	.+82     	; 0x3420 <LCD_voidSendCmd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ce:	6c a1       	ldd	r22, Y+36	; 0x24
    33d0:	7d a1       	ldd	r23, Y+37	; 0x25
    33d2:	8e a1       	ldd	r24, Y+38	; 0x26
    33d4:	9f a1       	ldd	r25, Y+39	; 0x27
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	40 e2       	ldi	r20, 0x20	; 32
    33dc:	51 e4       	ldi	r21, 0x41	; 65
    33de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	bc 01       	movw	r22, r24
    33e8:	cd 01       	movw	r24, r26
    33ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	9f 8f       	std	Y+31, r25	; 0x1f
    33f4:	8e 8f       	std	Y+30, r24	; 0x1e
    33f6:	0f c0       	rjmp	.+30     	; 0x3416 <LCD_voidSendCmd+0x166>
    33f8:	88 ec       	ldi	r24, 0xC8	; 200
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	9d 8f       	std	Y+29, r25	; 0x1d
    33fe:	8c 8f       	std	Y+28, r24	; 0x1c
    3400:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3402:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	f1 f7       	brne	.-4      	; 0x3404 <LCD_voidSendCmd+0x154>
    3408:	9d 8f       	std	Y+29, r25	; 0x1d
    340a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    340e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	9f 8f       	std	Y+31, r25	; 0x1f
    3414:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3416:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3418:	9f 8d       	ldd	r25, Y+31	; 0x1f
    341a:	00 97       	sbiw	r24, 0x00	; 0
    341c:	69 f7       	brne	.-38     	; 0x33f8 <LCD_voidSendCmd+0x148>
    341e:	24 c0       	rjmp	.+72     	; 0x3468 <LCD_voidSendCmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3420:	68 a1       	ldd	r22, Y+32	; 0x20
    3422:	79 a1       	ldd	r23, Y+33	; 0x21
    3424:	8a a1       	ldd	r24, Y+34	; 0x22
    3426:	9b a1       	ldd	r25, Y+35	; 0x23
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	9f 8f       	std	Y+31, r25	; 0x1f
    3432:	8e 8f       	std	Y+30, r24	; 0x1e
    3434:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3436:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3438:	9b 8f       	std	Y+27, r25	; 0x1b
    343a:	8a 8f       	std	Y+26, r24	; 0x1a
    343c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    343e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	f1 f7       	brne	.-4      	; 0x3440 <LCD_voidSendCmd+0x190>
    3444:	9b 8f       	std	Y+27, r25	; 0x1b
    3446:	8a 8f       	std	Y+26, r24	; 0x1a
    3448:	0f c0       	rjmp	.+30     	; 0x3468 <LCD_voidSendCmd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    344a:	69 a5       	ldd	r22, Y+41	; 0x29
    344c:	7a a5       	ldd	r23, Y+42	; 0x2a
    344e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3450:	9c a5       	ldd	r25, Y+44	; 0x2c
    3452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	88 a7       	std	Y+40, r24	; 0x28
    345c:	88 a5       	ldd	r24, Y+40	; 0x28
    345e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3460:	89 8d       	ldd	r24, Y+25	; 0x19
    3462:	8a 95       	dec	r24
    3464:	f1 f7       	brne	.-4      	; 0x3462 <LCD_voidSendCmd+0x1b2>
    3466:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_LOW);
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	62 e0       	ldi	r22, 0x02	; 2
    346c:	40 e0       	ldi	r20, 0x00	; 0
    346e:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	a0 e8       	ldi	r26, 0x80	; 128
    3478:	bf e3       	ldi	r27, 0x3F	; 63
    347a:	8d 8b       	std	Y+21, r24	; 0x15
    347c:	9e 8b       	std	Y+22, r25	; 0x16
    347e:	af 8b       	std	Y+23, r26	; 0x17
    3480:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3482:	6d 89       	ldd	r22, Y+21	; 0x15
    3484:	7e 89       	ldd	r23, Y+22	; 0x16
    3486:	8f 89       	ldd	r24, Y+23	; 0x17
    3488:	98 8d       	ldd	r25, Y+24	; 0x18
    348a:	2b ea       	ldi	r18, 0xAB	; 171
    348c:	3a ea       	ldi	r19, 0xAA	; 170
    348e:	4a e2       	ldi	r20, 0x2A	; 42
    3490:	50 e4       	ldi	r21, 0x40	; 64
    3492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	89 8b       	std	Y+17, r24	; 0x11
    349c:	9a 8b       	std	Y+18, r25	; 0x12
    349e:	ab 8b       	std	Y+19, r26	; 0x13
    34a0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    34a2:	69 89       	ldd	r22, Y+17	; 0x11
    34a4:	7a 89       	ldd	r23, Y+18	; 0x12
    34a6:	8b 89       	ldd	r24, Y+19	; 0x13
    34a8:	9c 89       	ldd	r25, Y+20	; 0x14
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	40 e8       	ldi	r20, 0x80	; 128
    34b0:	5f e3       	ldi	r21, 0x3F	; 63
    34b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b6:	88 23       	and	r24, r24
    34b8:	1c f4       	brge	.+6      	; 0x34c0 <LCD_voidSendCmd+0x210>
		__ticks = 1;
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	88 8b       	std	Y+16, r24	; 0x10
    34be:	91 c0       	rjmp	.+290    	; 0x35e2 <LCD_voidSendCmd+0x332>
	else if (__tmp > 255)
    34c0:	69 89       	ldd	r22, Y+17	; 0x11
    34c2:	7a 89       	ldd	r23, Y+18	; 0x12
    34c4:	8b 89       	ldd	r24, Y+19	; 0x13
    34c6:	9c 89       	ldd	r25, Y+20	; 0x14
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	4f e7       	ldi	r20, 0x7F	; 127
    34ce:	53 e4       	ldi	r21, 0x43	; 67
    34d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34d4:	18 16       	cp	r1, r24
    34d6:	0c f0       	brlt	.+2      	; 0x34da <LCD_voidSendCmd+0x22a>
    34d8:	7b c0       	rjmp	.+246    	; 0x35d0 <LCD_voidSendCmd+0x320>
	{
		_delay_ms(__us / 1000.0);
    34da:	6d 89       	ldd	r22, Y+21	; 0x15
    34dc:	7e 89       	ldd	r23, Y+22	; 0x16
    34de:	8f 89       	ldd	r24, Y+23	; 0x17
    34e0:	98 8d       	ldd	r25, Y+24	; 0x18
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	4a e7       	ldi	r20, 0x7A	; 122
    34e8:	54 e4       	ldi	r21, 0x44	; 68
    34ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	8c 87       	std	Y+12, r24	; 0x0c
    34f4:	9d 87       	std	Y+13, r25	; 0x0d
    34f6:	ae 87       	std	Y+14, r26	; 0x0e
    34f8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    34fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    34fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3500:	9f 85       	ldd	r25, Y+15	; 0x0f
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	4a ef       	ldi	r20, 0xFA	; 250
    3508:	54 e4       	ldi	r21, 0x44	; 68
    350a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	88 87       	std	Y+8, r24	; 0x08
    3514:	99 87       	std	Y+9, r25	; 0x09
    3516:	aa 87       	std	Y+10, r26	; 0x0a
    3518:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    351a:	68 85       	ldd	r22, Y+8	; 0x08
    351c:	79 85       	ldd	r23, Y+9	; 0x09
    351e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3520:	9b 85       	ldd	r25, Y+11	; 0x0b
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	40 e8       	ldi	r20, 0x80	; 128
    3528:	5f e3       	ldi	r21, 0x3F	; 63
    352a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    352e:	88 23       	and	r24, r24
    3530:	2c f4       	brge	.+10     	; 0x353c <LCD_voidSendCmd+0x28c>
		__ticks = 1;
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	9f 83       	std	Y+7, r25	; 0x07
    3538:	8e 83       	std	Y+6, r24	; 0x06
    353a:	3f c0       	rjmp	.+126    	; 0x35ba <LCD_voidSendCmd+0x30a>
	else if (__tmp > 65535)
    353c:	68 85       	ldd	r22, Y+8	; 0x08
    353e:	79 85       	ldd	r23, Y+9	; 0x09
    3540:	8a 85       	ldd	r24, Y+10	; 0x0a
    3542:	9b 85       	ldd	r25, Y+11	; 0x0b
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	3f ef       	ldi	r19, 0xFF	; 255
    3548:	4f e7       	ldi	r20, 0x7F	; 127
    354a:	57 e4       	ldi	r21, 0x47	; 71
    354c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3550:	18 16       	cp	r1, r24
    3552:	4c f5       	brge	.+82     	; 0x35a6 <LCD_voidSendCmd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3554:	6c 85       	ldd	r22, Y+12	; 0x0c
    3556:	7d 85       	ldd	r23, Y+13	; 0x0d
    3558:	8e 85       	ldd	r24, Y+14	; 0x0e
    355a:	9f 85       	ldd	r25, Y+15	; 0x0f
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	40 e2       	ldi	r20, 0x20	; 32
    3562:	51 e4       	ldi	r21, 0x41	; 65
    3564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	bc 01       	movw	r22, r24
    356e:	cd 01       	movw	r24, r26
    3570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	9f 83       	std	Y+7, r25	; 0x07
    357a:	8e 83       	std	Y+6, r24	; 0x06
    357c:	0f c0       	rjmp	.+30     	; 0x359c <LCD_voidSendCmd+0x2ec>
    357e:	88 ec       	ldi	r24, 0xC8	; 200
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	9d 83       	std	Y+5, r25	; 0x05
    3584:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3586:	8c 81       	ldd	r24, Y+4	; 0x04
    3588:	9d 81       	ldd	r25, Y+5	; 0x05
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	f1 f7       	brne	.-4      	; 0x358a <LCD_voidSendCmd+0x2da>
    358e:	9d 83       	std	Y+5, r25	; 0x05
    3590:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3592:	8e 81       	ldd	r24, Y+6	; 0x06
    3594:	9f 81       	ldd	r25, Y+7	; 0x07
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	9f 83       	std	Y+7, r25	; 0x07
    359a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359c:	8e 81       	ldd	r24, Y+6	; 0x06
    359e:	9f 81       	ldd	r25, Y+7	; 0x07
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	69 f7       	brne	.-38     	; 0x357e <LCD_voidSendCmd+0x2ce>
    35a4:	24 c0       	rjmp	.+72     	; 0x35ee <LCD_voidSendCmd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a6:	68 85       	ldd	r22, Y+8	; 0x08
    35a8:	79 85       	ldd	r23, Y+9	; 0x09
    35aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    35ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    35ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	9f 83       	std	Y+7, r25	; 0x07
    35b8:	8e 83       	std	Y+6, r24	; 0x06
    35ba:	8e 81       	ldd	r24, Y+6	; 0x06
    35bc:	9f 81       	ldd	r25, Y+7	; 0x07
    35be:	9b 83       	std	Y+3, r25	; 0x03
    35c0:	8a 83       	std	Y+2, r24	; 0x02
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	9b 81       	ldd	r25, Y+3	; 0x03
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <LCD_voidSendCmd+0x316>
    35ca:	9b 83       	std	Y+3, r25	; 0x03
    35cc:	8a 83       	std	Y+2, r24	; 0x02
    35ce:	0f c0       	rjmp	.+30     	; 0x35ee <LCD_voidSendCmd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    35d0:	69 89       	ldd	r22, Y+17	; 0x11
    35d2:	7a 89       	ldd	r23, Y+18	; 0x12
    35d4:	8b 89       	ldd	r24, Y+19	; 0x13
    35d6:	9c 89       	ldd	r25, Y+20	; 0x14
    35d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	88 8b       	std	Y+16, r24	; 0x10
    35e2:	88 89       	ldd	r24, Y+16	; 0x10
    35e4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	8a 95       	dec	r24
    35ea:	f1 f7       	brne	.-4      	; 0x35e8 <LCD_voidSendCmd+0x338>
    35ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    35ee:	e1 96       	adiw	r28, 0x31	; 49
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	f8 94       	cli
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	cd bf       	out	0x3d, r28	; 61
    35fa:	cf 91       	pop	r28
    35fc:	df 91       	pop	r29
    35fe:	08 95       	ret

00003600 <LCD_voidSendData>:
void LCD_voidSendData(u8 Copy_u8Data){
    3600:	df 93       	push	r29
    3602:	cf 93       	push	r28
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	e1 97       	sbiw	r28, 0x31	; 49
    360a:	0f b6       	in	r0, 0x3f	; 63
    360c:	f8 94       	cli
    360e:	de bf       	out	0x3e, r29	; 62
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	cd bf       	out	0x3d, r28	; 61
    3614:	89 ab       	std	Y+49, r24	; 0x31
	// To send command we should clear RW & set Rs
	DIO_u8SetPinValue(CONTROL_PORT,RS_PIN,DIO_u8_HIGH); // setting Rs=1
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	60 e0       	ldi	r22, 0x00	; 0
    361a:	41 e0       	ldi	r20, 0x01	; 1
    361c:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CONTROL_PORT,RW_PIN,DIO_u8_LOW); // setting Rw=0
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	61 e0       	ldi	r22, 0x01	; 1
    3624:	40 e0       	ldi	r20, 0x00	; 0
    3626:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>

	DIO_u8SetPortValue(DATA_PORT,Copy_u8Data);
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	69 a9       	ldd	r22, Y+49	; 0x31
    362e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_HIGH);  // E=1 then wait delay of  then E=0
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	62 e0       	ldi	r22, 0x02	; 2
    3636:	41 e0       	ldi	r20, 0x01	; 1
    3638:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	a0 e8       	ldi	r26, 0x80	; 128
    3642:	bf e3       	ldi	r27, 0x3F	; 63
    3644:	8d a7       	std	Y+45, r24	; 0x2d
    3646:	9e a7       	std	Y+46, r25	; 0x2e
    3648:	af a7       	std	Y+47, r26	; 0x2f
    364a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    364c:	6d a5       	ldd	r22, Y+45	; 0x2d
    364e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3650:	8f a5       	ldd	r24, Y+47	; 0x2f
    3652:	98 a9       	ldd	r25, Y+48	; 0x30
    3654:	2b ea       	ldi	r18, 0xAB	; 171
    3656:	3a ea       	ldi	r19, 0xAA	; 170
    3658:	4a e2       	ldi	r20, 0x2A	; 42
    365a:	50 e4       	ldi	r21, 0x40	; 64
    365c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3660:	dc 01       	movw	r26, r24
    3662:	cb 01       	movw	r24, r22
    3664:	89 a7       	std	Y+41, r24	; 0x29
    3666:	9a a7       	std	Y+42, r25	; 0x2a
    3668:	ab a7       	std	Y+43, r26	; 0x2b
    366a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    366c:	69 a5       	ldd	r22, Y+41	; 0x29
    366e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3670:	8b a5       	ldd	r24, Y+43	; 0x2b
    3672:	9c a5       	ldd	r25, Y+44	; 0x2c
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	40 e8       	ldi	r20, 0x80	; 128
    367a:	5f e3       	ldi	r21, 0x3F	; 63
    367c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3680:	88 23       	and	r24, r24
    3682:	1c f4       	brge	.+6      	; 0x368a <LCD_voidSendData+0x8a>
		__ticks = 1;
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	88 a7       	std	Y+40, r24	; 0x28
    3688:	91 c0       	rjmp	.+290    	; 0x37ac <LCD_voidSendData+0x1ac>
	else if (__tmp > 255)
    368a:	69 a5       	ldd	r22, Y+41	; 0x29
    368c:	7a a5       	ldd	r23, Y+42	; 0x2a
    368e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3690:	9c a5       	ldd	r25, Y+44	; 0x2c
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	4f e7       	ldi	r20, 0x7F	; 127
    3698:	53 e4       	ldi	r21, 0x43	; 67
    369a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    369e:	18 16       	cp	r1, r24
    36a0:	0c f0       	brlt	.+2      	; 0x36a4 <LCD_voidSendData+0xa4>
    36a2:	7b c0       	rjmp	.+246    	; 0x379a <LCD_voidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    36a4:	6d a5       	ldd	r22, Y+45	; 0x2d
    36a6:	7e a5       	ldd	r23, Y+46	; 0x2e
    36a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    36aa:	98 a9       	ldd	r25, Y+48	; 0x30
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	4a e7       	ldi	r20, 0x7A	; 122
    36b2:	54 e4       	ldi	r21, 0x44	; 68
    36b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	8c a3       	std	Y+36, r24	; 0x24
    36be:	9d a3       	std	Y+37, r25	; 0x25
    36c0:	ae a3       	std	Y+38, r26	; 0x26
    36c2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c4:	6c a1       	ldd	r22, Y+36	; 0x24
    36c6:	7d a1       	ldd	r23, Y+37	; 0x25
    36c8:	8e a1       	ldd	r24, Y+38	; 0x26
    36ca:	9f a1       	ldd	r25, Y+39	; 0x27
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	4a ef       	ldi	r20, 0xFA	; 250
    36d2:	54 e4       	ldi	r21, 0x44	; 68
    36d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	88 a3       	std	Y+32, r24	; 0x20
    36de:	99 a3       	std	Y+33, r25	; 0x21
    36e0:	aa a3       	std	Y+34, r26	; 0x22
    36e2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    36e4:	68 a1       	ldd	r22, Y+32	; 0x20
    36e6:	79 a1       	ldd	r23, Y+33	; 0x21
    36e8:	8a a1       	ldd	r24, Y+34	; 0x22
    36ea:	9b a1       	ldd	r25, Y+35	; 0x23
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e8       	ldi	r20, 0x80	; 128
    36f2:	5f e3       	ldi	r21, 0x3F	; 63
    36f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36f8:	88 23       	and	r24, r24
    36fa:	2c f4       	brge	.+10     	; 0x3706 <LCD_voidSendData+0x106>
		__ticks = 1;
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	9f 8f       	std	Y+31, r25	; 0x1f
    3702:	8e 8f       	std	Y+30, r24	; 0x1e
    3704:	3f c0       	rjmp	.+126    	; 0x3784 <LCD_voidSendData+0x184>
	else if (__tmp > 65535)
    3706:	68 a1       	ldd	r22, Y+32	; 0x20
    3708:	79 a1       	ldd	r23, Y+33	; 0x21
    370a:	8a a1       	ldd	r24, Y+34	; 0x22
    370c:	9b a1       	ldd	r25, Y+35	; 0x23
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	3f ef       	ldi	r19, 0xFF	; 255
    3712:	4f e7       	ldi	r20, 0x7F	; 127
    3714:	57 e4       	ldi	r21, 0x47	; 71
    3716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    371a:	18 16       	cp	r1, r24
    371c:	4c f5       	brge	.+82     	; 0x3770 <LCD_voidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371e:	6c a1       	ldd	r22, Y+36	; 0x24
    3720:	7d a1       	ldd	r23, Y+37	; 0x25
    3722:	8e a1       	ldd	r24, Y+38	; 0x26
    3724:	9f a1       	ldd	r25, Y+39	; 0x27
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	40 e2       	ldi	r20, 0x20	; 32
    372c:	51 e4       	ldi	r21, 0x41	; 65
    372e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	bc 01       	movw	r22, r24
    3738:	cd 01       	movw	r24, r26
    373a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	9f 8f       	std	Y+31, r25	; 0x1f
    3744:	8e 8f       	std	Y+30, r24	; 0x1e
    3746:	0f c0       	rjmp	.+30     	; 0x3766 <LCD_voidSendData+0x166>
    3748:	88 ec       	ldi	r24, 0xC8	; 200
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	9d 8f       	std	Y+29, r25	; 0x1d
    374e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3750:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3752:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <LCD_voidSendData+0x154>
    3758:	9d 8f       	std	Y+29, r25	; 0x1d
    375a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    375c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    375e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	9f 8f       	std	Y+31, r25	; 0x1f
    3764:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3766:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3768:	9f 8d       	ldd	r25, Y+31	; 0x1f
    376a:	00 97       	sbiw	r24, 0x00	; 0
    376c:	69 f7       	brne	.-38     	; 0x3748 <LCD_voidSendData+0x148>
    376e:	24 c0       	rjmp	.+72     	; 0x37b8 <LCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3770:	68 a1       	ldd	r22, Y+32	; 0x20
    3772:	79 a1       	ldd	r23, Y+33	; 0x21
    3774:	8a a1       	ldd	r24, Y+34	; 0x22
    3776:	9b a1       	ldd	r25, Y+35	; 0x23
    3778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	9f 8f       	std	Y+31, r25	; 0x1f
    3782:	8e 8f       	std	Y+30, r24	; 0x1e
    3784:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3786:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3788:	9b 8f       	std	Y+27, r25	; 0x1b
    378a:	8a 8f       	std	Y+26, r24	; 0x1a
    378c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    378e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <LCD_voidSendData+0x190>
    3794:	9b 8f       	std	Y+27, r25	; 0x1b
    3796:	8a 8f       	std	Y+26, r24	; 0x1a
    3798:	0f c0       	rjmp	.+30     	; 0x37b8 <LCD_voidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    379a:	69 a5       	ldd	r22, Y+41	; 0x29
    379c:	7a a5       	ldd	r23, Y+42	; 0x2a
    379e:	8b a5       	ldd	r24, Y+43	; 0x2b
    37a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    37a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	88 a7       	std	Y+40, r24	; 0x28
    37ac:	88 a5       	ldd	r24, Y+40	; 0x28
    37ae:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37b0:	89 8d       	ldd	r24, Y+25	; 0x19
    37b2:	8a 95       	dec	r24
    37b4:	f1 f7       	brne	.-4      	; 0x37b2 <LCD_voidSendData+0x1b2>
    37b6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_LOW);
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	62 e0       	ldi	r22, 0x02	; 2
    37bc:	40 e0       	ldi	r20, 0x00	; 0
    37be:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	a0 e8       	ldi	r26, 0x80	; 128
    37c8:	bf e3       	ldi	r27, 0x3F	; 63
    37ca:	8d 8b       	std	Y+21, r24	; 0x15
    37cc:	9e 8b       	std	Y+22, r25	; 0x16
    37ce:	af 8b       	std	Y+23, r26	; 0x17
    37d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37d2:	6d 89       	ldd	r22, Y+21	; 0x15
    37d4:	7e 89       	ldd	r23, Y+22	; 0x16
    37d6:	8f 89       	ldd	r24, Y+23	; 0x17
    37d8:	98 8d       	ldd	r25, Y+24	; 0x18
    37da:	2b ea       	ldi	r18, 0xAB	; 171
    37dc:	3a ea       	ldi	r19, 0xAA	; 170
    37de:	4a e2       	ldi	r20, 0x2A	; 42
    37e0:	50 e4       	ldi	r21, 0x40	; 64
    37e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	89 8b       	std	Y+17, r24	; 0x11
    37ec:	9a 8b       	std	Y+18, r25	; 0x12
    37ee:	ab 8b       	std	Y+19, r26	; 0x13
    37f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    37f2:	69 89       	ldd	r22, Y+17	; 0x11
    37f4:	7a 89       	ldd	r23, Y+18	; 0x12
    37f6:	8b 89       	ldd	r24, Y+19	; 0x13
    37f8:	9c 89       	ldd	r25, Y+20	; 0x14
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e8       	ldi	r20, 0x80	; 128
    3800:	5f e3       	ldi	r21, 0x3F	; 63
    3802:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3806:	88 23       	and	r24, r24
    3808:	1c f4       	brge	.+6      	; 0x3810 <LCD_voidSendData+0x210>
		__ticks = 1;
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	88 8b       	std	Y+16, r24	; 0x10
    380e:	91 c0       	rjmp	.+290    	; 0x3932 <LCD_voidSendData+0x332>
	else if (__tmp > 255)
    3810:	69 89       	ldd	r22, Y+17	; 0x11
    3812:	7a 89       	ldd	r23, Y+18	; 0x12
    3814:	8b 89       	ldd	r24, Y+19	; 0x13
    3816:	9c 89       	ldd	r25, Y+20	; 0x14
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	4f e7       	ldi	r20, 0x7F	; 127
    381e:	53 e4       	ldi	r21, 0x43	; 67
    3820:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3824:	18 16       	cp	r1, r24
    3826:	0c f0       	brlt	.+2      	; 0x382a <LCD_voidSendData+0x22a>
    3828:	7b c0       	rjmp	.+246    	; 0x3920 <LCD_voidSendData+0x320>
	{
		_delay_ms(__us / 1000.0);
    382a:	6d 89       	ldd	r22, Y+21	; 0x15
    382c:	7e 89       	ldd	r23, Y+22	; 0x16
    382e:	8f 89       	ldd	r24, Y+23	; 0x17
    3830:	98 8d       	ldd	r25, Y+24	; 0x18
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	4a e7       	ldi	r20, 0x7A	; 122
    3838:	54 e4       	ldi	r21, 0x44	; 68
    383a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	8c 87       	std	Y+12, r24	; 0x0c
    3844:	9d 87       	std	Y+13, r25	; 0x0d
    3846:	ae 87       	std	Y+14, r26	; 0x0e
    3848:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    384a:	6c 85       	ldd	r22, Y+12	; 0x0c
    384c:	7d 85       	ldd	r23, Y+13	; 0x0d
    384e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3850:	9f 85       	ldd	r25, Y+15	; 0x0f
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	4a ef       	ldi	r20, 0xFA	; 250
    3858:	54 e4       	ldi	r21, 0x44	; 68
    385a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	88 87       	std	Y+8, r24	; 0x08
    3864:	99 87       	std	Y+9, r25	; 0x09
    3866:	aa 87       	std	Y+10, r26	; 0x0a
    3868:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    386a:	68 85       	ldd	r22, Y+8	; 0x08
    386c:	79 85       	ldd	r23, Y+9	; 0x09
    386e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3870:	9b 85       	ldd	r25, Y+11	; 0x0b
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	40 e8       	ldi	r20, 0x80	; 128
    3878:	5f e3       	ldi	r21, 0x3F	; 63
    387a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    387e:	88 23       	and	r24, r24
    3880:	2c f4       	brge	.+10     	; 0x388c <LCD_voidSendData+0x28c>
		__ticks = 1;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	9f 83       	std	Y+7, r25	; 0x07
    3888:	8e 83       	std	Y+6, r24	; 0x06
    388a:	3f c0       	rjmp	.+126    	; 0x390a <LCD_voidSendData+0x30a>
	else if (__tmp > 65535)
    388c:	68 85       	ldd	r22, Y+8	; 0x08
    388e:	79 85       	ldd	r23, Y+9	; 0x09
    3890:	8a 85       	ldd	r24, Y+10	; 0x0a
    3892:	9b 85       	ldd	r25, Y+11	; 0x0b
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	3f ef       	ldi	r19, 0xFF	; 255
    3898:	4f e7       	ldi	r20, 0x7F	; 127
    389a:	57 e4       	ldi	r21, 0x47	; 71
    389c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38a0:	18 16       	cp	r1, r24
    38a2:	4c f5       	brge	.+82     	; 0x38f6 <LCD_voidSendData+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    38a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    38a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    38aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e2       	ldi	r20, 0x20	; 32
    38b2:	51 e4       	ldi	r21, 0x41	; 65
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	bc 01       	movw	r22, r24
    38be:	cd 01       	movw	r24, r26
    38c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	9f 83       	std	Y+7, r25	; 0x07
    38ca:	8e 83       	std	Y+6, r24	; 0x06
    38cc:	0f c0       	rjmp	.+30     	; 0x38ec <LCD_voidSendData+0x2ec>
    38ce:	88 ec       	ldi	r24, 0xC8	; 200
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	9d 83       	std	Y+5, r25	; 0x05
    38d4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38d6:	8c 81       	ldd	r24, Y+4	; 0x04
    38d8:	9d 81       	ldd	r25, Y+5	; 0x05
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <LCD_voidSendData+0x2da>
    38de:	9d 83       	std	Y+5, r25	; 0x05
    38e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e2:	8e 81       	ldd	r24, Y+6	; 0x06
    38e4:	9f 81       	ldd	r25, Y+7	; 0x07
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	9f 83       	std	Y+7, r25	; 0x07
    38ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ec:	8e 81       	ldd	r24, Y+6	; 0x06
    38ee:	9f 81       	ldd	r25, Y+7	; 0x07
    38f0:	00 97       	sbiw	r24, 0x00	; 0
    38f2:	69 f7       	brne	.-38     	; 0x38ce <LCD_voidSendData+0x2ce>
    38f4:	24 c0       	rjmp	.+72     	; 0x393e <LCD_voidSendData+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f6:	68 85       	ldd	r22, Y+8	; 0x08
    38f8:	79 85       	ldd	r23, Y+9	; 0x09
    38fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    38fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    38fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	9f 83       	std	Y+7, r25	; 0x07
    3908:	8e 83       	std	Y+6, r24	; 0x06
    390a:	8e 81       	ldd	r24, Y+6	; 0x06
    390c:	9f 81       	ldd	r25, Y+7	; 0x07
    390e:	9b 83       	std	Y+3, r25	; 0x03
    3910:	8a 83       	std	Y+2, r24	; 0x02
    3912:	8a 81       	ldd	r24, Y+2	; 0x02
    3914:	9b 81       	ldd	r25, Y+3	; 0x03
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <LCD_voidSendData+0x316>
    391a:	9b 83       	std	Y+3, r25	; 0x03
    391c:	8a 83       	std	Y+2, r24	; 0x02
    391e:	0f c0       	rjmp	.+30     	; 0x393e <LCD_voidSendData+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3920:	69 89       	ldd	r22, Y+17	; 0x11
    3922:	7a 89       	ldd	r23, Y+18	; 0x12
    3924:	8b 89       	ldd	r24, Y+19	; 0x13
    3926:	9c 89       	ldd	r25, Y+20	; 0x14
    3928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392c:	dc 01       	movw	r26, r24
    392e:	cb 01       	movw	r24, r22
    3930:	88 8b       	std	Y+16, r24	; 0x10
    3932:	88 89       	ldd	r24, Y+16	; 0x10
    3934:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3936:	89 81       	ldd	r24, Y+1	; 0x01
    3938:	8a 95       	dec	r24
    393a:	f1 f7       	brne	.-4      	; 0x3938 <LCD_voidSendData+0x338>
    393c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    393e:	e1 96       	adiw	r28, 0x31	; 49
    3940:	0f b6       	in	r0, 0x3f	; 63
    3942:	f8 94       	cli
    3944:	de bf       	out	0x3e, r29	; 62
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	cd bf       	out	0x3d, r28	; 61
    394a:	cf 91       	pop	r28
    394c:	df 91       	pop	r29
    394e:	08 95       	ret

00003950 <LCD_voidWrtiteString>:
void LCD_voidWrtiteString(u8 *Copy_pu8Ptr){
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	00 d0       	rcall	.+0      	; 0x3956 <LCD_voidWrtiteString+0x6>
    3956:	0f 92       	push	r0
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	9b 83       	std	Y+3, r25	; 0x03
    395e:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pu8Ptr != NULL){
    3960:	8a 81       	ldd	r24, Y+2	; 0x02
    3962:	9b 81       	ldd	r25, Y+3	; 0x03
    3964:	00 97       	sbiw	r24, 0x00	; 0
    3966:	d9 f0       	breq	.+54     	; 0x399e <LCD_voidWrtiteString+0x4e>
		u8 ptr = 0;
    3968:	19 82       	std	Y+1, r1	; 0x01
    396a:	0e c0       	rjmp	.+28     	; 0x3988 <LCD_voidWrtiteString+0x38>
		while(Copy_pu8Ptr[ptr] != '\0'){
			LCD_voidSendData(Copy_pu8Ptr[ptr]);
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	28 2f       	mov	r18, r24
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	8a 81       	ldd	r24, Y+2	; 0x02
    3974:	9b 81       	ldd	r25, Y+3	; 0x03
    3976:	fc 01       	movw	r30, r24
    3978:	e2 0f       	add	r30, r18
    397a:	f3 1f       	adc	r31, r19
    397c:	80 81       	ld	r24, Z
    397e:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
			ptr++;
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	8f 5f       	subi	r24, 0xFF	; 255
    3986:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
void LCD_voidWrtiteString(u8 *Copy_pu8Ptr){
	if(Copy_pu8Ptr != NULL){
		u8 ptr = 0;
		while(Copy_pu8Ptr[ptr] != '\0'){
    3988:	89 81       	ldd	r24, Y+1	; 0x01
    398a:	28 2f       	mov	r18, r24
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	8a 81       	ldd	r24, Y+2	; 0x02
    3990:	9b 81       	ldd	r25, Y+3	; 0x03
    3992:	fc 01       	movw	r30, r24
    3994:	e2 0f       	add	r30, r18
    3996:	f3 1f       	adc	r31, r19
    3998:	80 81       	ld	r24, Z
    399a:	88 23       	and	r24, r24
    399c:	39 f7       	brne	.-50     	; 0x396c <LCD_voidWrtiteString+0x1c>
			LCD_voidSendData(Copy_pu8Ptr[ptr]);
			ptr++;
		}
	}
}
    399e:	0f 90       	pop	r0
    39a0:	0f 90       	pop	r0
    39a2:	0f 90       	pop	r0
    39a4:	cf 91       	pop	r28
    39a6:	df 91       	pop	r29
    39a8:	08 95       	ret

000039aa <LCD_voidDisplayNumber>:
void LCD_voidDisplayNumber(u32 Copy_u8Num){
    39aa:	df 93       	push	r29
    39ac:	cf 93       	push	r28
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	2f 97       	sbiw	r28, 0x0f	; 15
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	f8 94       	cli
    39b8:	de bf       	out	0x3e, r29	; 62
    39ba:	0f be       	out	0x3f, r0	; 63
    39bc:	cd bf       	out	0x3d, r28	; 61
    39be:	9f 87       	std	Y+15, r25	; 0x0f
    39c0:	8e 87       	std	Y+14, r24	; 0x0e
//				}
//			}
//		}
//	}
	u8 Arr[10];
	u8 Local_counter = 0;
    39c2:	1b 82       	std	Y+3, r1	; 0x03

	for(s8 i = 0 ; i < 10 ; i++ )
    39c4:	1a 82       	std	Y+2, r1	; 0x02
    39c6:	29 c0       	rjmp	.+82     	; 0x3a1a <LCD_voidDisplayNumber+0x70>
	{
		if((Copy_u8Num > 0) || (Local_counter < 1))
    39c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    39ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    39cc:	00 97       	sbiw	r24, 0x00	; 0
    39ce:	19 f4       	brne	.+6      	; 0x39d6 <LCD_voidDisplayNumber+0x2c>
    39d0:	8b 81       	ldd	r24, Y+3	; 0x03
    39d2:	88 23       	and	r24, r24
    39d4:	f9 f4       	brne	.+62     	; 0x3a14 <LCD_voidDisplayNumber+0x6a>
		{
			Arr[i] = (Copy_u8Num%10);
    39d6:	8a 81       	ldd	r24, Y+2	; 0x02
    39d8:	e8 2f       	mov	r30, r24
    39da:	ff 27       	eor	r31, r31
    39dc:	e7 fd       	sbrc	r30, 7
    39de:	f0 95       	com	r31
    39e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    39e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    39e4:	2a e0       	ldi	r18, 0x0A	; 10
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	b9 01       	movw	r22, r18
    39ea:	0e 94 73 24 	call	0x48e6	; 0x48e6 <__udivmodhi4>
    39ee:	28 2f       	mov	r18, r24
    39f0:	ce 01       	movw	r24, r28
    39f2:	04 96       	adiw	r24, 0x04	; 4
    39f4:	e8 0f       	add	r30, r24
    39f6:	f9 1f       	adc	r31, r25
    39f8:	20 83       	st	Z, r18
			Copy_u8Num = (Copy_u8Num/10);
    39fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    39fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    39fe:	2a e0       	ldi	r18, 0x0A	; 10
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	b9 01       	movw	r22, r18
    3a04:	0e 94 73 24 	call	0x48e6	; 0x48e6 <__udivmodhi4>
    3a08:	cb 01       	movw	r24, r22
    3a0a:	9f 87       	std	Y+15, r25	; 0x0f
    3a0c:	8e 87       	std	Y+14, r24	; 0x0e
			Local_counter ++;
    3a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a10:	8f 5f       	subi	r24, 0xFF	; 255
    3a12:	8b 83       	std	Y+3, r24	; 0x03
//		}
//	}
	u8 Arr[10];
	u8 Local_counter = 0;

	for(s8 i = 0 ; i < 10 ; i++ )
    3a14:	8a 81       	ldd	r24, Y+2	; 0x02
    3a16:	8f 5f       	subi	r24, 0xFF	; 255
    3a18:	8a 83       	std	Y+2, r24	; 0x02
    3a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1c:	8a 30       	cpi	r24, 0x0A	; 10
    3a1e:	a4 f2       	brlt	.-88     	; 0x39c8 <LCD_voidDisplayNumber+0x1e>
			Copy_u8Num = (Copy_u8Num/10);
			Local_counter ++;
		}
	}

	for(s8 i =Local_counter-1; i >= 0 ;i-- )
    3a20:	8b 81       	ldd	r24, Y+3	; 0x03
    3a22:	81 50       	subi	r24, 0x01	; 1
    3a24:	89 83       	std	Y+1, r24	; 0x01
    3a26:	11 c0       	rjmp	.+34     	; 0x3a4a <LCD_voidDisplayNumber+0xa0>
	{
		LCD_voidSendData(Arr[i] + 48);
    3a28:	89 81       	ldd	r24, Y+1	; 0x01
    3a2a:	28 2f       	mov	r18, r24
    3a2c:	33 27       	eor	r19, r19
    3a2e:	27 fd       	sbrc	r18, 7
    3a30:	30 95       	com	r19
    3a32:	ce 01       	movw	r24, r28
    3a34:	04 96       	adiw	r24, 0x04	; 4
    3a36:	fc 01       	movw	r30, r24
    3a38:	e2 0f       	add	r30, r18
    3a3a:	f3 1f       	adc	r31, r19
    3a3c:	80 81       	ld	r24, Z
    3a3e:	80 5d       	subi	r24, 0xD0	; 208
    3a40:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
			Copy_u8Num = (Copy_u8Num/10);
			Local_counter ++;
		}
	}

	for(s8 i =Local_counter-1; i >= 0 ;i-- )
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	81 50       	subi	r24, 0x01	; 1
    3a48:	89 83       	std	Y+1, r24	; 0x01
    3a4a:	89 81       	ldd	r24, Y+1	; 0x01
    3a4c:	88 23       	and	r24, r24
    3a4e:	64 f7       	brge	.-40     	; 0x3a28 <LCD_voidDisplayNumber+0x7e>
	{
		LCD_voidSendData(Arr[i] + 48);

	}
}
    3a50:	2f 96       	adiw	r28, 0x0f	; 15
    3a52:	0f b6       	in	r0, 0x3f	; 63
    3a54:	f8 94       	cli
    3a56:	de bf       	out	0x3e, r29	; 62
    3a58:	0f be       	out	0x3f, r0	; 63
    3a5a:	cd bf       	out	0x3d, r28	; 61
    3a5c:	cf 91       	pop	r28
    3a5e:	df 91       	pop	r29
    3a60:	08 95       	ret

00003a62 <LCD_voidSendSpecialCharacter>:
void LCD_voidSendSpecialCharacter(){
    3a62:	df 93       	push	r29
    3a64:	cf 93       	push	r28
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
	// From AC to CGRAM
	LCD_voidSendCmd(0b01000000);
    3a6a:	80 e4       	ldi	r24, 0x40	; 64
    3a6c:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidSendCmd>
	// Shape to be created
	LCD_voidSendData(0b00100001);
    3a70:	81 e2       	ldi	r24, 0x21	; 33
    3a72:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
	LCD_voidSendData(0b00100111);
    3a76:	87 e2       	ldi	r24, 0x27	; 39
    3a78:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
	LCD_voidSendData(0b00101001);
    3a7c:	89 e2       	ldi	r24, 0x29	; 41
    3a7e:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
	LCD_voidSendData(0b00100001);
    3a82:	81 e2       	ldi	r24, 0x21	; 33
    3a84:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
	LCD_voidSendData(0b00000110);
    3a88:	86 e0       	ldi	r24, 0x06	; 6
    3a8a:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
	LCD_voidSendData(0b00100001);
    3a8e:	81 e2       	ldi	r24, 0x21	; 33
    3a90:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
	LCD_voidSendData(0b00100001);
    3a94:	81 e2       	ldi	r24, 0x21	; 33
    3a96:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
	LCD_voidSendData(0b00100001);
    3a9a:	81 e2       	ldi	r24, 0x21	; 33
    3a9c:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
	//From AC to DDRAM
	LCD_voidGoToXY(LCD_u8_Line1,0);
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	60 e0       	ldi	r22, 0x00	; 0
    3aa4:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <LCD_voidGoToXY>
	LCD_voidSendData(0);
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
}
    3aae:	cf 91       	pop	r28
    3ab0:	df 91       	pop	r29
    3ab2:	08 95       	ret

00003ab4 <LCD_voidGoToXY>:
void LCD_voidGoToXY(u8 Copy_u8Row, u8 Copy_u8Column){
    3ab4:	df 93       	push	r29
    3ab6:	cf 93       	push	r28
    3ab8:	00 d0       	rcall	.+0      	; 0x3aba <LCD_voidGoToXY+0x6>
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <LCD_voidGoToXY+0x8>
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	89 83       	std	Y+1, r24	; 0x01
    3ac2:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8Row <= LCD_u8_Line2)&&(Copy_u8Column < 39)){
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
    3ac6:	82 30       	cpi	r24, 0x02	; 2
    3ac8:	d8 f4       	brcc	.+54     	; 0x3b00 <LCD_voidGoToXY+0x4c>
    3aca:	8a 81       	ldd	r24, Y+2	; 0x02
    3acc:	87 32       	cpi	r24, 0x27	; 39
    3ace:	c0 f4       	brcc	.+48     	; 0x3b00 <LCD_voidGoToXY+0x4c>
		switch(Copy_u8Row){
    3ad0:	89 81       	ldd	r24, Y+1	; 0x01
    3ad2:	28 2f       	mov	r18, r24
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	3c 83       	std	Y+4, r19	; 0x04
    3ad8:	2b 83       	std	Y+3, r18	; 0x03
    3ada:	8b 81       	ldd	r24, Y+3	; 0x03
    3adc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	31 f0       	breq	.+12     	; 0x3aee <LCD_voidGoToXY+0x3a>
    3ae2:	2b 81       	ldd	r18, Y+3	; 0x03
    3ae4:	3c 81       	ldd	r19, Y+4	; 0x04
    3ae6:	21 30       	cpi	r18, 0x01	; 1
    3ae8:	31 05       	cpc	r19, r1
    3aea:	31 f0       	breq	.+12     	; 0x3af8 <LCD_voidGoToXY+0x44>
    3aec:	09 c0       	rjmp	.+18     	; 0x3b00 <LCD_voidGoToXY+0x4c>
		case LCD_u8_Line1:
			LCD_voidSendCmd(0x80+Copy_u8Column);
    3aee:	8a 81       	ldd	r24, Y+2	; 0x02
    3af0:	80 58       	subi	r24, 0x80	; 128
    3af2:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidSendCmd>
    3af6:	04 c0       	rjmp	.+8      	; 0x3b00 <LCD_voidGoToXY+0x4c>
		break;
		case LCD_u8_Line2 :
			LCD_voidSendCmd(0xC0+Copy_u8Column);
    3af8:	8a 81       	ldd	r24, Y+2	; 0x02
    3afa:	80 54       	subi	r24, 0x40	; 64
    3afc:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidSendCmd>
		break;
		}
	}
}
    3b00:	0f 90       	pop	r0
    3b02:	0f 90       	pop	r0
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	cf 91       	pop	r28
    3b0a:	df 91       	pop	r29
    3b0c:	08 95       	ret

00003b0e <KPD_enuGetKey>:

// Let rows as output and columns as input
u8 KPD_Au8RowPins[4]={KPD_u8_R1,KPD_u8_R2,KPD_u8_R3,KPD_u8_R4};
u8 KPD_Au8ColumnPins[4]={KPD_u8_C1,KPD_u8_C2,KPD_u8_C3,KPD_u8_C4};

KPD_ErrorStatus KPD_enuGetKey(u8 *Copy_pu8ReturnedKey){
    3b0e:	df 93       	push	r29
    3b10:	cf 93       	push	r28
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	65 97       	sbiw	r28, 0x15	; 21
    3b18:	0f b6       	in	r0, 0x3f	; 63
    3b1a:	f8 94       	cli
    3b1c:	de bf       	out	0x3e, r29	; 62
    3b1e:	0f be       	out	0x3f, r0	; 63
    3b20:	cd bf       	out	0x3d, r28	; 61
    3b22:	9d 8b       	std	Y+21, r25	; 0x15
    3b24:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_enuErrorState = KPD_OK;
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter, Local_u8ColumnsCounter, Local_u8ReturnedKey, Local_u8Flag = 0;
    3b2a:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL){
    3b2c:	8c 89       	ldd	r24, Y+20	; 0x14
    3b2e:	9d 89       	ldd	r25, Y+21	; 0x15
    3b30:	00 97       	sbiw	r24, 0x00	; 0
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <KPD_enuGetKey+0x28>
    3b34:	e1 c0       	rjmp	.+450    	; 0x3cf8 <KPD_enuGetKey+0x1ea>

		*Copy_pu8ReturnedKey = KPD_NOT_PRESSED;
    3b36:	ec 89       	ldd	r30, Y+20	; 0x14
    3b38:	fd 89       	ldd	r31, Y+21	; 0x15
    3b3a:	8f ef       	ldi	r24, 0xFF	; 255
    3b3c:	80 83       	st	Z, r24

		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++){
    3b3e:	19 8a       	std	Y+17, r1	; 0x11
    3b40:	d6 c0       	rjmp	.+428    	; 0x3cee <KPD_enuGetKey+0x1e0>
			DIO_u8SetPinValue(KPD_u8_PORT1,KPD_Au8RowPins[Local_u8RowsCounter],DIO_u8_LOW); //activate Rows
    3b42:	89 89       	ldd	r24, Y+17	; 0x11
    3b44:	88 2f       	mov	r24, r24
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	fc 01       	movw	r30, r24
    3b4a:	e5 54       	subi	r30, 0x45	; 69
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	90 81       	ld	r25, Z
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	69 2f       	mov	r22, r25
    3b54:	40 e0       	ldi	r20, 0x00	; 0
    3b56:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			for(Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter <= 3 ; Local_u8ColumnsCounter++){
    3b5a:	18 8a       	std	Y+16, r1	; 0x10
    3b5c:	b2 c0       	rjmp	.+356    	; 0x3cc2 <KPD_enuGetKey+0x1b4>
				DIO_u8GetPinValue(KPD_u8_PORT2,KPD_Au8ColumnPins[Local_u8ColumnsCounter],&Local_u8ReturnedKey); //reading columns
    3b5e:	88 89       	ldd	r24, Y+16	; 0x10
    3b60:	88 2f       	mov	r24, r24
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	fc 01       	movw	r30, r24
    3b66:	e1 54       	subi	r30, 0x41	; 65
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	90 81       	ld	r25, Z
    3b6c:	9e 01       	movw	r18, r28
    3b6e:	2d 5e       	subi	r18, 0xED	; 237
    3b70:	3f 4f       	sbci	r19, 0xFF	; 255
    3b72:	83 e0       	ldi	r24, 0x03	; 3
    3b74:	69 2f       	mov	r22, r25
    3b76:	a9 01       	movw	r20, r18
    3b78:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_u8GetPinValue>
			if(Local_u8ReturnedKey == 0){
    3b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b7e:	88 23       	and	r24, r24
    3b80:	09 f0       	breq	.+2      	; 0x3b84 <KPD_enuGetKey+0x76>
    3b82:	9c c0       	rjmp	.+312    	; 0x3cbc <KPD_enuGetKey+0x1ae>
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	a0 ea       	ldi	r26, 0xA0	; 160
    3b8a:	b1 e4       	ldi	r27, 0x41	; 65
    3b8c:	8b 87       	std	Y+11, r24	; 0x0b
    3b8e:	9c 87       	std	Y+12, r25	; 0x0c
    3b90:	ad 87       	std	Y+13, r26	; 0x0d
    3b92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b94:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b96:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	4a ef       	ldi	r20, 0xFA	; 250
    3ba2:	54 e4       	ldi	r21, 0x44	; 68
    3ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	8f 83       	std	Y+7, r24	; 0x07
    3bae:	98 87       	std	Y+8, r25	; 0x08
    3bb0:	a9 87       	std	Y+9, r26	; 0x09
    3bb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb6:	78 85       	ldd	r23, Y+8	; 0x08
    3bb8:	89 85       	ldd	r24, Y+9	; 0x09
    3bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	40 e8       	ldi	r20, 0x80	; 128
    3bc2:	5f e3       	ldi	r21, 0x3F	; 63
    3bc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bc8:	88 23       	and	r24, r24
    3bca:	2c f4       	brge	.+10     	; 0x3bd6 <KPD_enuGetKey+0xc8>
		__ticks = 1;
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	9e 83       	std	Y+6, r25	; 0x06
    3bd2:	8d 83       	std	Y+5, r24	; 0x05
    3bd4:	3f c0       	rjmp	.+126    	; 0x3c54 <KPD_enuGetKey+0x146>
	else if (__tmp > 65535)
    3bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd8:	78 85       	ldd	r23, Y+8	; 0x08
    3bda:	89 85       	ldd	r24, Y+9	; 0x09
    3bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	3f ef       	ldi	r19, 0xFF	; 255
    3be2:	4f e7       	ldi	r20, 0x7F	; 127
    3be4:	57 e4       	ldi	r21, 0x47	; 71
    3be6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bea:	18 16       	cp	r1, r24
    3bec:	4c f5       	brge	.+82     	; 0x3c40 <KPD_enuGetKey+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	40 e2       	ldi	r20, 0x20	; 32
    3bfc:	51 e4       	ldi	r21, 0x41	; 65
    3bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	bc 01       	movw	r22, r24
    3c08:	cd 01       	movw	r24, r26
    3c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	9e 83       	std	Y+6, r25	; 0x06
    3c14:	8d 83       	std	Y+5, r24	; 0x05
    3c16:	0f c0       	rjmp	.+30     	; 0x3c36 <KPD_enuGetKey+0x128>
    3c18:	88 ec       	ldi	r24, 0xC8	; 200
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	9c 83       	std	Y+4, r25	; 0x04
    3c1e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c20:	8b 81       	ldd	r24, Y+3	; 0x03
    3c22:	9c 81       	ldd	r25, Y+4	; 0x04
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	f1 f7       	brne	.-4      	; 0x3c24 <KPD_enuGetKey+0x116>
    3c28:	9c 83       	std	Y+4, r25	; 0x04
    3c2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c30:	01 97       	sbiw	r24, 0x01	; 1
    3c32:	9e 83       	std	Y+6, r25	; 0x06
    3c34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c36:	8d 81       	ldd	r24, Y+5	; 0x05
    3c38:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3a:	00 97       	sbiw	r24, 0x00	; 0
    3c3c:	69 f7       	brne	.-38     	; 0x3c18 <KPD_enuGetKey+0x10a>
    3c3e:	24 c0       	rjmp	.+72     	; 0x3c88 <KPD_enuGetKey+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c40:	6f 81       	ldd	r22, Y+7	; 0x07
    3c42:	78 85       	ldd	r23, Y+8	; 0x08
    3c44:	89 85       	ldd	r24, Y+9	; 0x09
    3c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	cb 01       	movw	r24, r22
    3c50:	9e 83       	std	Y+6, r25	; 0x06
    3c52:	8d 83       	std	Y+5, r24	; 0x05
    3c54:	8d 81       	ldd	r24, Y+5	; 0x05
    3c56:	9e 81       	ldd	r25, Y+6	; 0x06
    3c58:	9a 83       	std	Y+2, r25	; 0x02
    3c5a:	89 83       	std	Y+1, r24	; 0x01
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	f1 f7       	brne	.-4      	; 0x3c60 <KPD_enuGetKey+0x152>
    3c64:	9a 83       	std	Y+2, r25	; 0x02
    3c66:	89 83       	std	Y+1, r24	; 0x01
    3c68:	0f c0       	rjmp	.+30     	; 0x3c88 <KPD_enuGetKey+0x17a>
				// To avoid debouncing problem we added a delay
				_delay_ms(20);
				while(Local_u8ReturnedKey == 0){
					DIO_u8GetPinValue(KPD_u8_PORT2,KPD_Au8ColumnPins[Local_u8ColumnsCounter],&Local_u8ReturnedKey); //to keep checking the value of the pressed key
    3c6a:	88 89       	ldd	r24, Y+16	; 0x10
    3c6c:	88 2f       	mov	r24, r24
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	fc 01       	movw	r30, r24
    3c72:	e1 54       	subi	r30, 0x41	; 65
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	90 81       	ld	r25, Z
    3c78:	9e 01       	movw	r18, r28
    3c7a:	2d 5e       	subi	r18, 0xED	; 237
    3c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c7e:	83 e0       	ldi	r24, 0x03	; 3
    3c80:	69 2f       	mov	r22, r25
    3c82:	a9 01       	movw	r20, r18
    3c84:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_u8GetPinValue>
			for(Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter <= 3 ; Local_u8ColumnsCounter++){
				DIO_u8GetPinValue(KPD_u8_PORT2,KPD_Au8ColumnPins[Local_u8ColumnsCounter],&Local_u8ReturnedKey); //reading columns
			if(Local_u8ReturnedKey == 0){
				// To avoid debouncing problem we added a delay
				_delay_ms(20);
				while(Local_u8ReturnedKey == 0){
    3c88:	8b 89       	ldd	r24, Y+19	; 0x13
    3c8a:	88 23       	and	r24, r24
    3c8c:	71 f3       	breq	.-36     	; 0x3c6a <KPD_enuGetKey+0x15c>
					DIO_u8GetPinValue(KPD_u8_PORT2,KPD_Au8ColumnPins[Local_u8ColumnsCounter],&Local_u8ReturnedKey); //to keep checking the value of the pressed key
				}
				*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColumnsCounter];
    3c8e:	89 89       	ldd	r24, Y+17	; 0x11
    3c90:	48 2f       	mov	r20, r24
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	88 89       	ldd	r24, Y+16	; 0x10
    3c96:	28 2f       	mov	r18, r24
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	ca 01       	movw	r24, r20
    3c9c:	88 0f       	add	r24, r24
    3c9e:	99 1f       	adc	r25, r25
    3ca0:	88 0f       	add	r24, r24
    3ca2:	99 1f       	adc	r25, r25
    3ca4:	82 0f       	add	r24, r18
    3ca6:	93 1f       	adc	r25, r19
    3ca8:	fc 01       	movw	r30, r24
    3caa:	e5 55       	subi	r30, 0x55	; 85
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	80 81       	ld	r24, Z
    3cb0:	ec 89       	ldd	r30, Y+20	; 0x14
    3cb2:	fd 89       	ldd	r31, Y+21	; 0x15
    3cb4:	80 83       	st	Z, r24
				Local_u8Flag = 1;
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	8f 87       	std	Y+15, r24	; 0x0f
    3cba:	07 c0       	rjmp	.+14     	; 0x3cca <KPD_enuGetKey+0x1bc>

		*Copy_pu8ReturnedKey = KPD_NOT_PRESSED;

		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++){
			DIO_u8SetPinValue(KPD_u8_PORT1,KPD_Au8RowPins[Local_u8RowsCounter],DIO_u8_LOW); //activate Rows
			for(Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter <= 3 ; Local_u8ColumnsCounter++){
    3cbc:	88 89       	ldd	r24, Y+16	; 0x10
    3cbe:	8f 5f       	subi	r24, 0xFF	; 255
    3cc0:	88 8b       	std	Y+16, r24	; 0x10
    3cc2:	88 89       	ldd	r24, Y+16	; 0x10
    3cc4:	84 30       	cpi	r24, 0x04	; 4
    3cc6:	08 f4       	brcc	.+2      	; 0x3cca <KPD_enuGetKey+0x1bc>
    3cc8:	4a cf       	rjmp	.-364    	; 0x3b5e <KPD_enuGetKey+0x50>
				Local_u8Flag = 1;
				// breaks the loop once the key is pressed
				break;
			}
		  }
			DIO_u8SetPinValue(KPD_u8_PORT1,KPD_Au8RowPins[Local_u8RowsCounter],DIO_u8_HIGH); // to avoid activating all rows not knowing which key in which row was pressed
    3cca:	89 89       	ldd	r24, Y+17	; 0x11
    3ccc:	88 2f       	mov	r24, r24
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	fc 01       	movw	r30, r24
    3cd2:	e5 54       	subi	r30, 0x45	; 69
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	90 81       	ld	r25, Z
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	69 2f       	mov	r22, r25
    3cdc:	41 e0       	ldi	r20, 0x01	; 1
    3cde:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
			if (Local_u8Flag == 1){
    3ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ce4:	81 30       	cpi	r24, 0x01	; 1
    3ce6:	51 f0       	breq	.+20     	; 0x3cfc <KPD_enuGetKey+0x1ee>
	u8 Local_u8RowsCounter, Local_u8ColumnsCounter, Local_u8ReturnedKey, Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL){

		*Copy_pu8ReturnedKey = KPD_NOT_PRESSED;

		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++){
    3ce8:	89 89       	ldd	r24, Y+17	; 0x11
    3cea:	8f 5f       	subi	r24, 0xFF	; 255
    3cec:	89 8b       	std	Y+17, r24	; 0x11
    3cee:	89 89       	ldd	r24, Y+17	; 0x11
    3cf0:	84 30       	cpi	r24, 0x04	; 4
    3cf2:	08 f4       	brcc	.+2      	; 0x3cf6 <KPD_enuGetKey+0x1e8>
    3cf4:	26 cf       	rjmp	.-436    	; 0x3b42 <KPD_enuGetKey+0x34>
    3cf6:	02 c0       	rjmp	.+4      	; 0x3cfc <KPD_enuGetKey+0x1ee>
			if (Local_u8Flag == 1){
				break;
			}
		}
	}else{
		Local_enuErrorState = KPD_GetKeyReturnedError;
    3cf8:	82 e0       	ldi	r24, 0x02	; 2
    3cfa:	8a 8b       	std	Y+18, r24	; 0x12
	}
	return Local_enuErrorState;
    3cfc:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3cfe:	65 96       	adiw	r28, 0x15	; 21
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	cd bf       	out	0x3d, r28	; 61
    3d0a:	cf 91       	pop	r28
    3d0c:	df 91       	pop	r29
    3d0e:	08 95       	ret

00003d10 <HBRD_enuRotate>:
#include "HBridge_interface.h"

// MCAL Layer
#include "../../MCAL/DIO/DIO_interface.h"

HBRD_ErrorStatus HBRD_enuRotate(u8 Copy_u8Direction){
    3d10:	df 93       	push	r29
    3d12:	cf 93       	push	r28
    3d14:	00 d0       	rcall	.+0      	; 0x3d16 <HBRD_enuRotate+0x6>
    3d16:	00 d0       	rcall	.+0      	; 0x3d18 <HBRD_enuRotate+0x8>
    3d18:	cd b7       	in	r28, 0x3d	; 61
    3d1a:	de b7       	in	r29, 0x3e	; 62
    3d1c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_enuErrorStatus = HBRD_OK;
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Direction){
    3d22:	8a 81       	ldd	r24, Y+2	; 0x02
    3d24:	28 2f       	mov	r18, r24
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	3c 83       	std	Y+4, r19	; 0x04
    3d2a:	2b 83       	std	Y+3, r18	; 0x03
    3d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	31 f0       	breq	.+12     	; 0x3d40 <HBRD_enuRotate+0x30>
    3d34:	2b 81       	ldd	r18, Y+3	; 0x03
    3d36:	3c 81       	ldd	r19, Y+4	; 0x04
    3d38:	21 30       	cpi	r18, 0x01	; 1
    3d3a:	31 05       	cpc	r19, r1
    3d3c:	61 f0       	breq	.+24     	; 0x3d56 <HBRD_enuRotate+0x46>
    3d3e:	16 c0       	rjmp	.+44     	; 0x3d6c <HBRD_enuRotate+0x5c>
	case HBRD_CLOCKWISE:
		DIO_u8SetPinValue(HBRD_PORT, HBRD_PINA, DIO_u8_LOW);
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	60 e0       	ldi	r22, 0x00	; 0
    3d44:	40 e0       	ldi	r20, 0x00	; 0
    3d46:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(HBRD_PORT, HBRD_PINB, DIO_u8_HIGH);
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	61 e0       	ldi	r22, 0x01	; 1
    3d4e:	41 e0       	ldi	r20, 0x01	; 1
    3d50:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    3d54:	0d c0       	rjmp	.+26     	; 0x3d70 <HBRD_enuRotate+0x60>
	break;
	case HBRD_ANTICLOCKWISE:
		DIO_u8SetPinValue(HBRD_PORT, HBRD_PINA, DIO_u8_HIGH);
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	60 e0       	ldi	r22, 0x00	; 0
    3d5a:	41 e0       	ldi	r20, 0x01	; 1
    3d5c:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(HBRD_PORT, HBRD_PINB, DIO_u8_LOW);
    3d60:	80 e0       	ldi	r24, 0x00	; 0
    3d62:	61 e0       	ldi	r22, 0x01	; 1
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    3d6a:	02 c0       	rjmp	.+4      	; 0x3d70 <HBRD_enuRotate+0x60>
	break;
	default:
		Local_enuErrorStatus = HBRD_NOK;
    3d6c:	82 e0       	ldi	r24, 0x02	; 2
    3d6e:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return Local_enuErrorStatus;
    3d70:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	cf 91       	pop	r28
    3d7c:	df 91       	pop	r29
    3d7e:	08 95       	ret

00003d80 <HBRD_voidStop>:
void HBRD_voidStop(void){
    3d80:	df 93       	push	r29
    3d82:	cf 93       	push	r28
    3d84:	cd b7       	in	r28, 0x3d	; 61
    3d86:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(HBRD_PORT, HBRD_PINA, DIO_u8_LOW);
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	60 e0       	ldi	r22, 0x00	; 0
    3d8c:	40 e0       	ldi	r20, 0x00	; 0
    3d8e:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(HBRD_PORT, HBRD_PINB, DIO_u8_LOW);
    3d92:	80 e0       	ldi	r24, 0x00	; 0
    3d94:	61 e0       	ldi	r22, 0x01	; 1
    3d96:	40 e0       	ldi	r20, 0x00	; 0
    3d98:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
}
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <Private_u8ErrorStatusCheck>:
#include "../../MCAL/TWI/TWI_interface.h"

//HAL Layer
#include "../LCD/LCD_interface.h"

static u8 Private_u8ErrorStatusCheck(TWI_ErrorStatus Copy_enumErrorStatus){
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	00 d0       	rcall	.+0      	; 0x3da8 <Private_u8ErrorStatusCheck+0x6>
    3da8:	cd b7       	in	r28, 0x3d	; 61
    3daa:	de b7       	in	r29, 0x3e	; 62
    3dac:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_enumErrorStatus != TWI_OK){
    3db2:	8a 81       	ldd	r24, Y+2	; 0x02
    3db4:	81 30       	cpi	r24, 0x01	; 1
    3db6:	09 f0       	breq	.+2      	; 0x3dba <Private_u8ErrorStatusCheck+0x18>
		Local_u8ErrorState = STD_TYPES_NOK;
    3db8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	cf 91       	pop	r28
    3dc2:	df 91       	pop	r29
    3dc4:	08 95       	ret

00003dc6 <EEPROM_voidInit>:

void EEPROM_voidInit(void){
    3dc6:	df 93       	push	r29
    3dc8:	cf 93       	push	r28
    3dca:	cd b7       	in	r28, 0x3d	; 61
    3dcc:	de b7       	in	r29, 0x3e	; 62
	TWI_voidMasterInit();
    3dce:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TWI_voidMasterInit>
}
    3dd2:	cf 91       	pop	r28
    3dd4:	df 91       	pop	r29
    3dd6:	08 95       	ret

00003dd8 <EEPROM_u8WriteDataByte>:
u8 EEPROM_u8WriteDataByte(u8 Copy_u8Data, u16 Copy_u16ByteAddress){
    3dd8:	df 93       	push	r29
    3dda:	cf 93       	push	r28
    3ddc:	cd b7       	in	r28, 0x3d	; 61
    3dde:	de b7       	in	r29, 0x3e	; 62
    3de0:	64 97       	sbiw	r28, 0x14	; 20
    3de2:	0f b6       	in	r0, 0x3f	; 63
    3de4:	f8 94       	cli
    3de6:	de bf       	out	0x3e, r29	; 62
    3de8:	0f be       	out	0x3f, r0	; 63
    3dea:	cd bf       	out	0x3d, r28	; 61
    3dec:	8a 8b       	std	Y+18, r24	; 0x12
    3dee:	7c 8b       	std	Y+20, r23	; 0x14
    3df0:	6b 8b       	std	Y+19, r22	; 0x13
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	89 8b       	std	Y+17, r24	; 0x11
	TWI_ErrorStatus Local_enuTWIErrorStatus = TWI_OK;
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8EEPROMAddress = (EEPROM_FIXED_ADDRESS) | (EEPROM_A2_VALUE<<2)|(u8)(Copy_u16ByteAddress>>8);
    3dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    3dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    3dfe:	89 2f       	mov	r24, r25
    3e00:	99 27       	eor	r25, r25
    3e02:	80 65       	ori	r24, 0x50	; 80
    3e04:	8f 87       	std	Y+15, r24	; 0x0f

	// Start Condition
	Local_enuTWIErrorStatus = TWI_enuSendStartCondition();
    3e06:	0e 94 97 06 	call	0xd2e	; 0xd2e <TWI_enuSendStartCondition>
    3e0a:	88 8b       	std	Y+16, r24	; 0x10
	Local_u8ErrorState = Private_u8ErrorStatusCheck(Local_enuTWIErrorStatus);
    3e0c:	88 89       	ldd	r24, Y+16	; 0x10
    3e0e:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Private_u8ErrorStatusCheck>
    3e12:	89 8b       	std	Y+17, r24	; 0x11

	// Sending slave address + W
	Local_enuTWIErrorStatus = TWI_enuSendSlaveWithWrite(Local_u8EEPROMAddress);
    3e14:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e16:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_enuSendSlaveWithWrite>
    3e1a:	88 8b       	std	Y+16, r24	; 0x10
	Local_u8ErrorState = Private_u8ErrorStatusCheck(Local_enuTWIErrorStatus);
    3e1c:	88 89       	ldd	r24, Y+16	; 0x10
    3e1e:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Private_u8ErrorStatusCheck>
    3e22:	89 8b       	std	Y+17, r24	; 0x11

	// Sending the rest of the Byte address
	Local_enuTWIErrorStatus = TWI_enuSendDataByte((u8)Copy_u16ByteAddress);
    3e24:	8b 89       	ldd	r24, Y+19	; 0x13
    3e26:	0e 94 17 07 	call	0xe2e	; 0xe2e <TWI_enuSendDataByte>
    3e2a:	88 8b       	std	Y+16, r24	; 0x10
	Local_u8ErrorState = Private_u8ErrorStatusCheck(Local_enuTWIErrorStatus);
    3e2c:	88 89       	ldd	r24, Y+16	; 0x10
    3e2e:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Private_u8ErrorStatusCheck>
    3e32:	89 8b       	std	Y+17, r24	; 0x11

	// Send Data Byte
	Local_enuTWIErrorStatus = TWI_enuSendDataByte(Copy_u8Data);
    3e34:	8a 89       	ldd	r24, Y+18	; 0x12
    3e36:	0e 94 17 07 	call	0xe2e	; 0xe2e <TWI_enuSendDataByte>
    3e3a:	88 8b       	std	Y+16, r24	; 0x10
	Local_u8ErrorState = Private_u8ErrorStatusCheck(Local_enuTWIErrorStatus);
    3e3c:	88 89       	ldd	r24, Y+16	; 0x10
    3e3e:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Private_u8ErrorStatusCheck>
    3e42:	89 8b       	std	Y+17, r24	; 0x11

	// Send Stop Condition
	TWI_u8SendStopCondition();
    3e44:	0e 94 52 07 	call	0xea4	; 0xea4 <TWI_u8SendStopCondition>
    3e48:	80 e0       	ldi	r24, 0x00	; 0
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	a0 ea       	ldi	r26, 0xA0	; 160
    3e4e:	b0 e4       	ldi	r27, 0x40	; 64
    3e50:	8b 87       	std	Y+11, r24	; 0x0b
    3e52:	9c 87       	std	Y+12, r25	; 0x0c
    3e54:	ad 87       	std	Y+13, r26	; 0x0d
    3e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	4a ef       	ldi	r20, 0xFA	; 250
    3e66:	54 e4       	ldi	r21, 0x44	; 68
    3e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6c:	dc 01       	movw	r26, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	8f 83       	std	Y+7, r24	; 0x07
    3e72:	98 87       	std	Y+8, r25	; 0x08
    3e74:	a9 87       	std	Y+9, r26	; 0x09
    3e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e78:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7a:	78 85       	ldd	r23, Y+8	; 0x08
    3e7c:	89 85       	ldd	r24, Y+9	; 0x09
    3e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	40 e8       	ldi	r20, 0x80	; 128
    3e86:	5f e3       	ldi	r21, 0x3F	; 63
    3e88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e8c:	88 23       	and	r24, r24
    3e8e:	2c f4       	brge	.+10     	; 0x3e9a <EEPROM_u8WriteDataByte+0xc2>
		__ticks = 1;
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	9e 83       	std	Y+6, r25	; 0x06
    3e96:	8d 83       	std	Y+5, r24	; 0x05
    3e98:	3f c0       	rjmp	.+126    	; 0x3f18 <EEPROM_u8WriteDataByte+0x140>
	else if (__tmp > 65535)
    3e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e9c:	78 85       	ldd	r23, Y+8	; 0x08
    3e9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	3f ef       	ldi	r19, 0xFF	; 255
    3ea6:	4f e7       	ldi	r20, 0x7F	; 127
    3ea8:	57 e4       	ldi	r21, 0x47	; 71
    3eaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eae:	18 16       	cp	r1, r24
    3eb0:	4c f5       	brge	.+82     	; 0x3f04 <EEPROM_u8WriteDataByte+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	40 e2       	ldi	r20, 0x20	; 32
    3ec0:	51 e4       	ldi	r21, 0x41	; 65
    3ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	cb 01       	movw	r24, r22
    3eca:	bc 01       	movw	r22, r24
    3ecc:	cd 01       	movw	r24, r26
    3ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	cb 01       	movw	r24, r22
    3ed6:	9e 83       	std	Y+6, r25	; 0x06
    3ed8:	8d 83       	std	Y+5, r24	; 0x05
    3eda:	0f c0       	rjmp	.+30     	; 0x3efa <EEPROM_u8WriteDataByte+0x122>
    3edc:	88 ec       	ldi	r24, 0xC8	; 200
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	9c 83       	std	Y+4, r25	; 0x04
    3ee2:	8b 83       	std	Y+3, r24	; 0x03
    3ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee8:	01 97       	sbiw	r24, 0x01	; 1
    3eea:	f1 f7       	brne	.-4      	; 0x3ee8 <EEPROM_u8WriteDataByte+0x110>
    3eec:	9c 83       	std	Y+4, r25	; 0x04
    3eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef4:	01 97       	sbiw	r24, 0x01	; 1
    3ef6:	9e 83       	std	Y+6, r25	; 0x06
    3ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3efa:	8d 81       	ldd	r24, Y+5	; 0x05
    3efc:	9e 81       	ldd	r25, Y+6	; 0x06
    3efe:	00 97       	sbiw	r24, 0x00	; 0
    3f00:	69 f7       	brne	.-38     	; 0x3edc <EEPROM_u8WriteDataByte+0x104>
    3f02:	14 c0       	rjmp	.+40     	; 0x3f2c <EEPROM_u8WriteDataByte+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f04:	6f 81       	ldd	r22, Y+7	; 0x07
    3f06:	78 85       	ldd	r23, Y+8	; 0x08
    3f08:	89 85       	ldd	r24, Y+9	; 0x09
    3f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	9e 83       	std	Y+6, r25	; 0x06
    3f16:	8d 83       	std	Y+5, r24	; 0x05
    3f18:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f1c:	9a 83       	std	Y+2, r25	; 0x02
    3f1e:	89 83       	std	Y+1, r24	; 0x01
    3f20:	89 81       	ldd	r24, Y+1	; 0x01
    3f22:	9a 81       	ldd	r25, Y+2	; 0x02
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	f1 f7       	brne	.-4      	; 0x3f24 <EEPROM_u8WriteDataByte+0x14c>
    3f28:	9a 83       	std	Y+2, r25	; 0x02
    3f2a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
	return Local_u8ErrorState;
    3f2c:	89 89       	ldd	r24, Y+17	; 0x11
}
    3f2e:	64 96       	adiw	r28, 0x14	; 20
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	cf 91       	pop	r28
    3f3c:	df 91       	pop	r29
    3f3e:	08 95       	ret

00003f40 <EEPROM_u8ReadDataByte>:
u8 EEPROM_u8ReadDataByte(u8 *Copy_u8ReceivedData, u16 Copy_u16ByteAddress){
    3f40:	df 93       	push	r29
    3f42:	cf 93       	push	r28
    3f44:	cd b7       	in	r28, 0x3d	; 61
    3f46:	de b7       	in	r29, 0x3e	; 62
    3f48:	65 97       	sbiw	r28, 0x15	; 21
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	de bf       	out	0x3e, r29	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	cd bf       	out	0x3d, r28	; 61
    3f54:	9b 8b       	std	Y+19, r25	; 0x13
    3f56:	8a 8b       	std	Y+18, r24	; 0x12
    3f58:	7d 8b       	std	Y+21, r23	; 0x15
    3f5a:	6c 8b       	std	Y+20, r22	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	89 8b       	std	Y+17, r24	; 0x11
	TWI_ErrorStatus Local_enuTWIErrorStatus = TWI_OK;
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8EEPROMAddress = (EEPROM_FIXED_ADDRESS) | (EEPROM_A2_VALUE<<2)|(u8)(Copy_u16ByteAddress>>8);
    3f64:	8c 89       	ldd	r24, Y+20	; 0x14
    3f66:	9d 89       	ldd	r25, Y+21	; 0x15
    3f68:	89 2f       	mov	r24, r25
    3f6a:	99 27       	eor	r25, r25
    3f6c:	80 65       	ori	r24, 0x50	; 80
    3f6e:	8f 87       	std	Y+15, r24	; 0x0f

	if(Copy_u8ReceivedData != NULL){
    3f70:	8a 89       	ldd	r24, Y+18	; 0x12
    3f72:	9b 89       	ldd	r25, Y+19	; 0x13
    3f74:	00 97       	sbiw	r24, 0x00	; 0
    3f76:	09 f4       	brne	.+2      	; 0x3f7a <EEPROM_u8ReadDataByte+0x3a>
    3f78:	a4 c0       	rjmp	.+328    	; 0x40c2 <EEPROM_u8ReadDataByte+0x182>
		// Start Condition
	    Local_enuTWIErrorStatus = TWI_enuSendStartCondition();
    3f7a:	0e 94 97 06 	call	0xd2e	; 0xd2e <TWI_enuSendStartCondition>
    3f7e:	88 8b       	std	Y+16, r24	; 0x10
	    Local_u8ErrorState = Private_u8ErrorStatusCheck(Local_enuTWIErrorStatus);
    3f80:	88 89       	ldd	r24, Y+16	; 0x10
    3f82:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Private_u8ErrorStatusCheck>
    3f86:	89 8b       	std	Y+17, r24	; 0x11

	    // Sending slave address + W
	    Local_enuTWIErrorStatus = TWI_enuSendSlaveWithWrite(Local_u8EEPROMAddress);
    3f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f8a:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_enuSendSlaveWithWrite>
    3f8e:	88 8b       	std	Y+16, r24	; 0x10
	    Local_u8ErrorState = Private_u8ErrorStatusCheck(Local_enuTWIErrorStatus);
    3f90:	88 89       	ldd	r24, Y+16	; 0x10
    3f92:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Private_u8ErrorStatusCheck>
    3f96:	89 8b       	std	Y+17, r24	; 0x11

	    // Sending the rest of the Byte address
	    Local_enuTWIErrorStatus = TWI_enuSendDataByte((u8)Copy_u16ByteAddress);
    3f98:	8c 89       	ldd	r24, Y+20	; 0x14
    3f9a:	0e 94 17 07 	call	0xe2e	; 0xe2e <TWI_enuSendDataByte>
    3f9e:	88 8b       	std	Y+16, r24	; 0x10
	    Local_u8ErrorState = Private_u8ErrorStatusCheck(Local_enuTWIErrorStatus);
    3fa0:	88 89       	ldd	r24, Y+16	; 0x10
    3fa2:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Private_u8ErrorStatusCheck>
    3fa6:	89 8b       	std	Y+17, r24	; 0x11

	    // Restart Condition
	    Local_enuTWIErrorStatus = TWI_enuSendReStartCondition();
    3fa8:	0e 94 b0 06 	call	0xd60	; 0xd60 <TWI_enuSendReStartCondition>
    3fac:	88 8b       	std	Y+16, r24	; 0x10
	    Local_u8ErrorState = Private_u8ErrorStatusCheck(Local_enuTWIErrorStatus);
    3fae:	88 89       	ldd	r24, Y+16	; 0x10
    3fb0:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Private_u8ErrorStatusCheck>
    3fb4:	89 8b       	std	Y+17, r24	; 0x11

	    // Sending slave address + R
	    Local_enuTWIErrorStatus = TWI_enuSendSlaveWithRead(Local_u8EEPROMAddress);
    3fb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fb8:	0e 94 f0 06 	call	0xde0	; 0xde0 <TWI_enuSendSlaveWithRead>
    3fbc:	88 8b       	std	Y+16, r24	; 0x10
	    Local_u8ErrorState = Private_u8ErrorStatusCheck(Local_enuTWIErrorStatus);
    3fbe:	88 89       	ldd	r24, Y+16	; 0x10
    3fc0:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Private_u8ErrorStatusCheck>
    3fc4:	89 8b       	std	Y+17, r24	; 0x11

	    // Receiving the data
	    Local_enuTWIErrorStatus = TWI_enuReceiveDataByte(Copy_u8ReceivedData); // & will give you the address of the pointer
    3fc6:	8a 89       	ldd	r24, Y+18	; 0x12
    3fc8:	9b 89       	ldd	r25, Y+19	; 0x13
    3fca:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_enuReceiveDataByte>
    3fce:	88 8b       	std	Y+16, r24	; 0x10
	    Local_u8ErrorState = Private_u8ErrorStatusCheck(Local_enuTWIErrorStatus);
    3fd0:	88 89       	ldd	r24, Y+16	; 0x10
    3fd2:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Private_u8ErrorStatusCheck>
    3fd6:	89 8b       	std	Y+17, r24	; 0x11

	    // Stop condition
	    TWI_u8SendStopCondition();
    3fd8:	0e 94 52 07 	call	0xea4	; 0xea4 <TWI_u8SendStopCondition>
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	a0 ea       	ldi	r26, 0xA0	; 160
    3fe2:	b0 e4       	ldi	r27, 0x40	; 64
    3fe4:	8b 87       	std	Y+11, r24	; 0x0b
    3fe6:	9c 87       	std	Y+12, r25	; 0x0c
    3fe8:	ad 87       	std	Y+13, r26	; 0x0d
    3fea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fec:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fee:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	4a ef       	ldi	r20, 0xFA	; 250
    3ffa:	54 e4       	ldi	r21, 0x44	; 68
    3ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4000:	dc 01       	movw	r26, r24
    4002:	cb 01       	movw	r24, r22
    4004:	8f 83       	std	Y+7, r24	; 0x07
    4006:	98 87       	std	Y+8, r25	; 0x08
    4008:	a9 87       	std	Y+9, r26	; 0x09
    400a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    400c:	6f 81       	ldd	r22, Y+7	; 0x07
    400e:	78 85       	ldd	r23, Y+8	; 0x08
    4010:	89 85       	ldd	r24, Y+9	; 0x09
    4012:	9a 85       	ldd	r25, Y+10	; 0x0a
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	40 e8       	ldi	r20, 0x80	; 128
    401a:	5f e3       	ldi	r21, 0x3F	; 63
    401c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4020:	88 23       	and	r24, r24
    4022:	2c f4       	brge	.+10     	; 0x402e <EEPROM_u8ReadDataByte+0xee>
		__ticks = 1;
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	9e 83       	std	Y+6, r25	; 0x06
    402a:	8d 83       	std	Y+5, r24	; 0x05
    402c:	3f c0       	rjmp	.+126    	; 0x40ac <EEPROM_u8ReadDataByte+0x16c>
	else if (__tmp > 65535)
    402e:	6f 81       	ldd	r22, Y+7	; 0x07
    4030:	78 85       	ldd	r23, Y+8	; 0x08
    4032:	89 85       	ldd	r24, Y+9	; 0x09
    4034:	9a 85       	ldd	r25, Y+10	; 0x0a
    4036:	20 e0       	ldi	r18, 0x00	; 0
    4038:	3f ef       	ldi	r19, 0xFF	; 255
    403a:	4f e7       	ldi	r20, 0x7F	; 127
    403c:	57 e4       	ldi	r21, 0x47	; 71
    403e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4042:	18 16       	cp	r1, r24
    4044:	4c f5       	brge	.+82     	; 0x4098 <EEPROM_u8ReadDataByte+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4046:	6b 85       	ldd	r22, Y+11	; 0x0b
    4048:	7c 85       	ldd	r23, Y+12	; 0x0c
    404a:	8d 85       	ldd	r24, Y+13	; 0x0d
    404c:	9e 85       	ldd	r25, Y+14	; 0x0e
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	40 e2       	ldi	r20, 0x20	; 32
    4054:	51 e4       	ldi	r21, 0x41	; 65
    4056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	bc 01       	movw	r22, r24
    4060:	cd 01       	movw	r24, r26
    4062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4066:	dc 01       	movw	r26, r24
    4068:	cb 01       	movw	r24, r22
    406a:	9e 83       	std	Y+6, r25	; 0x06
    406c:	8d 83       	std	Y+5, r24	; 0x05
    406e:	0f c0       	rjmp	.+30     	; 0x408e <EEPROM_u8ReadDataByte+0x14e>
    4070:	88 ec       	ldi	r24, 0xC8	; 200
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	9c 83       	std	Y+4, r25	; 0x04
    4076:	8b 83       	std	Y+3, r24	; 0x03
    4078:	8b 81       	ldd	r24, Y+3	; 0x03
    407a:	9c 81       	ldd	r25, Y+4	; 0x04
    407c:	01 97       	sbiw	r24, 0x01	; 1
    407e:	f1 f7       	brne	.-4      	; 0x407c <EEPROM_u8ReadDataByte+0x13c>
    4080:	9c 83       	std	Y+4, r25	; 0x04
    4082:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4084:	8d 81       	ldd	r24, Y+5	; 0x05
    4086:	9e 81       	ldd	r25, Y+6	; 0x06
    4088:	01 97       	sbiw	r24, 0x01	; 1
    408a:	9e 83       	std	Y+6, r25	; 0x06
    408c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    408e:	8d 81       	ldd	r24, Y+5	; 0x05
    4090:	9e 81       	ldd	r25, Y+6	; 0x06
    4092:	00 97       	sbiw	r24, 0x00	; 0
    4094:	69 f7       	brne	.-38     	; 0x4070 <EEPROM_u8ReadDataByte+0x130>
    4096:	16 c0       	rjmp	.+44     	; 0x40c4 <EEPROM_u8ReadDataByte+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4098:	6f 81       	ldd	r22, Y+7	; 0x07
    409a:	78 85       	ldd	r23, Y+8	; 0x08
    409c:	89 85       	ldd	r24, Y+9	; 0x09
    409e:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	9e 83       	std	Y+6, r25	; 0x06
    40aa:	8d 83       	std	Y+5, r24	; 0x05
    40ac:	8d 81       	ldd	r24, Y+5	; 0x05
    40ae:	9e 81       	ldd	r25, Y+6	; 0x06
    40b0:	9a 83       	std	Y+2, r25	; 0x02
    40b2:	89 83       	std	Y+1, r24	; 0x01
    40b4:	89 81       	ldd	r24, Y+1	; 0x01
    40b6:	9a 81       	ldd	r25, Y+2	; 0x02
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	f1 f7       	brne	.-4      	; 0x40b8 <EEPROM_u8ReadDataByte+0x178>
    40bc:	9a 83       	std	Y+2, r25	; 0x02
    40be:	89 83       	std	Y+1, r24	; 0x01
    40c0:	01 c0       	rjmp	.+2      	; 0x40c4 <EEPROM_u8ReadDataByte+0x184>

	    _delay_ms(5);
	}else{
		Local_u8ErrorState = STD_TYPES_NOK;
    40c2:	19 8a       	std	Y+17, r1	; 0x11
	}
	return Local_u8ErrorState;
    40c4:	89 89       	ldd	r24, Y+17	; 0x11
}
    40c6:	65 96       	adiw	r28, 0x15	; 21
    40c8:	0f b6       	in	r0, 0x3f	; 63
    40ca:	f8 94       	cli
    40cc:	de bf       	out	0x3e, r29	; 62
    40ce:	0f be       	out	0x3f, r0	; 63
    40d0:	cd bf       	out	0x3d, r28	; 61
    40d2:	cf 91       	pop	r28
    40d4:	df 91       	pop	r29
    40d6:	08 95       	ret

000040d8 <LCD_CLR>:
#include "HAL/Ext_EEPROM/EEPROM_interface.h"

// Function prototype
void APP_voidFlagLED(void);
void LCD_CLR()
			{
    40d8:	df 93       	push	r29
    40da:	cf 93       	push	r28
    40dc:	cd b7       	in	r28, 0x3d	; 61
    40de:	de b7       	in	r29, 0x3e	; 62
			  LCD_voidSendCmd (0x01);    /* clear display */
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidSendCmd>
			  LCD_voidSendCmd (0x80);    /* cursor at home position */
    40e6:	80 e8       	ldi	r24, 0x80	; 128
    40e8:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_voidSendCmd>
			}
    40ec:	cf 91       	pop	r28
    40ee:	df 91       	pop	r29
    40f0:	08 95       	ret

000040f2 <main>:

int main(void){
    40f2:	df 93       	push	r29
    40f4:	cf 93       	push	r28
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
    40fa:	ee 97       	sbiw	r28, 0x3e	; 62
    40fc:	0f b6       	in	r0, 0x3f	; 63
    40fe:	f8 94       	cli
    4100:	de bf       	out	0x3e, r29	; 62
    4102:	0f be       	out	0x3f, r0	; 63
    4104:	cd bf       	out	0x3d, r28	; 61
	u16 Local_u16DigitalValue , Local_u16AnalogValue,Local_u16DigitalValue2 , Local_u16AnalogValue2;
	DIO_Init();
    4106:	0e 94 35 0b 	call	0x166a	; 0x166a <DIO_Init>
	ADC_voidInit();
    410a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <ADC_voidInit>
	LCD_voidInit();
    410e:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <LCD_voidInit>
//-------------------------------------------------Password-------------------------------------------------------
		//TMR_voidTMR1SetCompareMatchChannelA(1999);
		//  void APP_LOGIN(void)

		u8 Local_u8Data;
		LCD_voidCLR();//clear LCD
    4112:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <LCD_voidCLR>
		u32 Num1 = 0 ,  value = 0;//make variable to store number on it
    4116:	1b aa       	std	Y+51, r1	; 0x33
    4118:	1a aa       	std	Y+50, r1	; 0x32
    411a:	19 aa       	std	Y+49, r1	; 0x31
    411c:	18 aa       	std	Y+48, r1	; 0x30
		u8 counter = 0 , flag = 0;//make counter to count every time we enter loop
    411e:	1f a6       	std	Y+47, r1	; 0x2f
    4120:	1e a6       	std	Y+46, r1	; 0x2e
		LCD_voidWrtiteString("Enter Passcode: ");//print enter password in LCD once you get home
    4122:	80 e6       	ldi	r24, 0x60	; 96
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0e 94 a8 1c 	call	0x3950	; 0x3950 <LCD_voidWrtiteString>
		LCD_voidGoToXY(1,0);//print this statement in line 2 in LCD
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	60 e0       	ldi	r22, 0x00	; 0
    412e:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <LCD_voidGoToXY>
		while(1){
			KPD_enuGetKey(&Local_u8Data);//Get key if pressed in Keypad
    4132:	ce 01       	movw	r24, r28
    4134:	cc 96       	adiw	r24, 0x3c	; 60
    4136:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <KPD_enuGetKey>
			if(Local_u8Data != KPD_NOT_PRESSED)//check if kpd is pressed or not
    413a:	8c ad       	ldd	r24, Y+60	; 0x3c
    413c:	8f 3f       	cpi	r24, 0xFF	; 255
    413e:	c9 f3       	breq	.-14     	; 0x4132 <main+0x40>
			{
				// counter ++ ;  //counter =1
				switch(Local_u8Data)//switch on value pressed in KPD
    4140:	8c ad       	ldd	r24, Y+60	; 0x3c
    4142:	28 2f       	mov	r18, r24
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	3e af       	std	Y+62, r19	; 0x3e
    4148:	2d af       	std	Y+61, r18	; 0x3d
    414a:	8d ad       	ldd	r24, Y+61	; 0x3d
    414c:	9e ad       	ldd	r25, Y+62	; 0x3e
    414e:	85 33       	cpi	r24, 0x35	; 53
    4150:	91 05       	cpc	r25, r1
    4152:	09 f4       	brne	.+2      	; 0x4156 <main+0x64>
    4154:	ce c0       	rjmp	.+412    	; 0x42f2 <main+0x200>
    4156:	2d ad       	ldd	r18, Y+61	; 0x3d
    4158:	3e ad       	ldd	r19, Y+62	; 0x3e
    415a:	26 33       	cpi	r18, 0x36	; 54
    415c:	31 05       	cpc	r19, r1
    415e:	24 f5       	brge	.+72     	; 0x41a8 <main+0xb6>
    4160:	8d ad       	ldd	r24, Y+61	; 0x3d
    4162:	9e ad       	ldd	r25, Y+62	; 0x3e
    4164:	82 33       	cpi	r24, 0x32	; 50
    4166:	91 05       	cpc	r25, r1
    4168:	09 f4       	brne	.+2      	; 0x416c <main+0x7a>
    416a:	75 c0       	rjmp	.+234    	; 0x4256 <main+0x164>
    416c:	2d ad       	ldd	r18, Y+61	; 0x3d
    416e:	3e ad       	ldd	r19, Y+62	; 0x3e
    4170:	23 33       	cpi	r18, 0x33	; 51
    4172:	31 05       	cpc	r19, r1
    4174:	64 f4       	brge	.+24     	; 0x418e <main+0x9c>
    4176:	8d ad       	ldd	r24, Y+61	; 0x3d
    4178:	9e ad       	ldd	r25, Y+62	; 0x3e
    417a:	80 33       	cpi	r24, 0x30	; 48
    417c:	91 05       	cpc	r25, r1
    417e:	c9 f1       	breq	.+114    	; 0x41f2 <main+0x100>
    4180:	2d ad       	ldd	r18, Y+61	; 0x3d
    4182:	3e ad       	ldd	r19, Y+62	; 0x3e
    4184:	21 33       	cpi	r18, 0x31	; 49
    4186:	31 05       	cpc	r19, r1
    4188:	09 f4       	brne	.+2      	; 0x418c <main+0x9a>
    418a:	4b c0       	rjmp	.+150    	; 0x4222 <main+0x130>
    418c:	68 c2       	rjmp	.+1232   	; 0x465e <main+0x56c>
    418e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4190:	9e ad       	ldd	r25, Y+62	; 0x3e
    4192:	83 33       	cpi	r24, 0x33	; 51
    4194:	91 05       	cpc	r25, r1
    4196:	09 f4       	brne	.+2      	; 0x419a <main+0xa8>
    4198:	78 c0       	rjmp	.+240    	; 0x428a <main+0x198>
    419a:	2d ad       	ldd	r18, Y+61	; 0x3d
    419c:	3e ad       	ldd	r19, Y+62	; 0x3e
    419e:	24 33       	cpi	r18, 0x34	; 52
    41a0:	31 05       	cpc	r19, r1
    41a2:	09 f4       	brne	.+2      	; 0x41a6 <main+0xb4>
    41a4:	8c c0       	rjmp	.+280    	; 0x42be <main+0x1cc>
    41a6:	5b c2       	rjmp	.+1206   	; 0x465e <main+0x56c>
    41a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    41aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    41ac:	88 33       	cpi	r24, 0x38	; 56
    41ae:	91 05       	cpc	r25, r1
    41b0:	09 f4       	brne	.+2      	; 0x41b4 <main+0xc2>
    41b2:	ed c0       	rjmp	.+474    	; 0x438e <main+0x29c>
    41b4:	2d ad       	ldd	r18, Y+61	; 0x3d
    41b6:	3e ad       	ldd	r19, Y+62	; 0x3e
    41b8:	29 33       	cpi	r18, 0x39	; 57
    41ba:	31 05       	cpc	r19, r1
    41bc:	6c f4       	brge	.+26     	; 0x41d8 <main+0xe6>
    41be:	8d ad       	ldd	r24, Y+61	; 0x3d
    41c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    41c2:	86 33       	cpi	r24, 0x36	; 54
    41c4:	91 05       	cpc	r25, r1
    41c6:	09 f4       	brne	.+2      	; 0x41ca <main+0xd8>
    41c8:	ae c0       	rjmp	.+348    	; 0x4326 <main+0x234>
    41ca:	2d ad       	ldd	r18, Y+61	; 0x3d
    41cc:	3e ad       	ldd	r19, Y+62	; 0x3e
    41ce:	27 33       	cpi	r18, 0x37	; 55
    41d0:	31 05       	cpc	r19, r1
    41d2:	09 f4       	brne	.+2      	; 0x41d6 <main+0xe4>
    41d4:	c2 c0       	rjmp	.+388    	; 0x435a <main+0x268>
    41d6:	43 c2       	rjmp	.+1158   	; 0x465e <main+0x56c>
    41d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    41da:	9e ad       	ldd	r25, Y+62	; 0x3e
    41dc:	89 33       	cpi	r24, 0x39	; 57
    41de:	91 05       	cpc	r25, r1
    41e0:	09 f4       	brne	.+2      	; 0x41e4 <main+0xf2>
    41e2:	ef c0       	rjmp	.+478    	; 0x43c2 <main+0x2d0>
    41e4:	2d ad       	ldd	r18, Y+61	; 0x3d
    41e6:	3e ad       	ldd	r19, Y+62	; 0x3e
    41e8:	2e 35       	cpi	r18, 0x5E	; 94
    41ea:	31 05       	cpc	r19, r1
    41ec:	09 f4       	brne	.+2      	; 0x41f0 <main+0xfe>
    41ee:	03 c1       	rjmp	.+518    	; 0x43f6 <main+0x304>
    41f0:	36 c2       	rjmp	.+1132   	; 0x465e <main+0x56c>
				{
				case '0'://if 0 is pressed
				{
					LCD_voidSendData('*');//display 0 in LCD
    41f2:	8a e2       	ldi	r24, 0x2A	; 42
    41f4:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
					value =0;//put 0 in value
    41f8:	19 aa       	std	Y+49, r1	; 0x31
    41fa:	18 aa       	std	Y+48, r1	; 0x30
					Num1=(Num1*10)+value;//store value in Num1 which is updated by added this value to Num1 and
    41fc:	8a a9       	ldd	r24, Y+50	; 0x32
    41fe:	9b a9       	ldd	r25, Y+51	; 0x33
    4200:	9c 01       	movw	r18, r24
    4202:	22 0f       	add	r18, r18
    4204:	33 1f       	adc	r19, r19
    4206:	c9 01       	movw	r24, r18
    4208:	88 0f       	add	r24, r24
    420a:	99 1f       	adc	r25, r25
    420c:	88 0f       	add	r24, r24
    420e:	99 1f       	adc	r25, r25
    4210:	28 0f       	add	r18, r24
    4212:	39 1f       	adc	r19, r25
    4214:	88 a9       	ldd	r24, Y+48	; 0x30
    4216:	99 a9       	ldd	r25, Y+49	; 0x31
    4218:	82 0f       	add	r24, r18
    421a:	93 1f       	adc	r25, r19
    421c:	9b ab       	std	Y+51, r25	; 0x33
    421e:	8a ab       	std	Y+50, r24	; 0x32
    4220:	1e c2       	rjmp	.+1084   	; 0x465e <main+0x56c>
					//multiply old value of Num1*10 to shift every old number pressed by KPD
					break;
				}
				case '1'://if 1 is pressed
				{
					LCD_voidSendData('*');//display 1 in LCD
    4222:	8a e2       	ldi	r24, 0x2A	; 42
    4224:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
					value =1;//put 1 in value
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	99 ab       	std	Y+49, r25	; 0x31
    422e:	88 ab       	std	Y+48, r24	; 0x30
					Num1=(Num1*10)+value;//store value in Num1 which is updated by added this value to Num1 and
    4230:	8a a9       	ldd	r24, Y+50	; 0x32
    4232:	9b a9       	ldd	r25, Y+51	; 0x33
    4234:	9c 01       	movw	r18, r24
    4236:	22 0f       	add	r18, r18
    4238:	33 1f       	adc	r19, r19
    423a:	c9 01       	movw	r24, r18
    423c:	88 0f       	add	r24, r24
    423e:	99 1f       	adc	r25, r25
    4240:	88 0f       	add	r24, r24
    4242:	99 1f       	adc	r25, r25
    4244:	28 0f       	add	r18, r24
    4246:	39 1f       	adc	r19, r25
    4248:	88 a9       	ldd	r24, Y+48	; 0x30
    424a:	99 a9       	ldd	r25, Y+49	; 0x31
    424c:	82 0f       	add	r24, r18
    424e:	93 1f       	adc	r25, r19
    4250:	9b ab       	std	Y+51, r25	; 0x33
    4252:	8a ab       	std	Y+50, r24	; 0x32
    4254:	04 c2       	rjmp	.+1032   	; 0x465e <main+0x56c>
					//multiply old value of Num1*10 to shift every old number pressed by KPD
					break;
				}
				case '2'://if 2 is pressed
				{
					LCD_voidSendData('*');//display 2 in LCD
    4256:	8a e2       	ldi	r24, 0x2A	; 42
    4258:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
					//LCD_voidDisplayNumber(Local_Variable-48);
					value=2;//put 2 in value
    425c:	82 e0       	ldi	r24, 0x02	; 2
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	99 ab       	std	Y+49, r25	; 0x31
    4262:	88 ab       	std	Y+48, r24	; 0x30
					Num1=(Num1*10)+value;//store value in Num1 which is updated by added this value to Num1 and
    4264:	8a a9       	ldd	r24, Y+50	; 0x32
    4266:	9b a9       	ldd	r25, Y+51	; 0x33
    4268:	9c 01       	movw	r18, r24
    426a:	22 0f       	add	r18, r18
    426c:	33 1f       	adc	r19, r19
    426e:	c9 01       	movw	r24, r18
    4270:	88 0f       	add	r24, r24
    4272:	99 1f       	adc	r25, r25
    4274:	88 0f       	add	r24, r24
    4276:	99 1f       	adc	r25, r25
    4278:	28 0f       	add	r18, r24
    427a:	39 1f       	adc	r19, r25
    427c:	88 a9       	ldd	r24, Y+48	; 0x30
    427e:	99 a9       	ldd	r25, Y+49	; 0x31
    4280:	82 0f       	add	r24, r18
    4282:	93 1f       	adc	r25, r19
    4284:	9b ab       	std	Y+51, r25	; 0x33
    4286:	8a ab       	std	Y+50, r24	; 0x32
    4288:	ea c1       	rjmp	.+980    	; 0x465e <main+0x56c>
					//multiply old value of Num1*10 to shift every old number pressed by KPD
					break;
				}
				case '3'://if 3 is pressed
				{
					LCD_voidSendData('*');//display 3 in LCD
    428a:	8a e2       	ldi	r24, 0x2A	; 42
    428c:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
					value=3;//put 3 in value
    4290:	83 e0       	ldi	r24, 0x03	; 3
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	99 ab       	std	Y+49, r25	; 0x31
    4296:	88 ab       	std	Y+48, r24	; 0x30
					Num1=(Num1*10)+value;//store value in Num1 which is updated by added this value to Num1 and
    4298:	8a a9       	ldd	r24, Y+50	; 0x32
    429a:	9b a9       	ldd	r25, Y+51	; 0x33
    429c:	9c 01       	movw	r18, r24
    429e:	22 0f       	add	r18, r18
    42a0:	33 1f       	adc	r19, r19
    42a2:	c9 01       	movw	r24, r18
    42a4:	88 0f       	add	r24, r24
    42a6:	99 1f       	adc	r25, r25
    42a8:	88 0f       	add	r24, r24
    42aa:	99 1f       	adc	r25, r25
    42ac:	28 0f       	add	r18, r24
    42ae:	39 1f       	adc	r19, r25
    42b0:	88 a9       	ldd	r24, Y+48	; 0x30
    42b2:	99 a9       	ldd	r25, Y+49	; 0x31
    42b4:	82 0f       	add	r24, r18
    42b6:	93 1f       	adc	r25, r19
    42b8:	9b ab       	std	Y+51, r25	; 0x33
    42ba:	8a ab       	std	Y+50, r24	; 0x32
    42bc:	d0 c1       	rjmp	.+928    	; 0x465e <main+0x56c>
					//multiply old value of Num1*10 to shift every old number pressed by KPD
					break;
				}
				case '4'://if 4 is pressed
				{
					LCD_voidSendData('*');//display 4 in LCD
    42be:	8a e2       	ldi	r24, 0x2A	; 42
    42c0:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
					value=4;//put 4 in value
    42c4:	84 e0       	ldi	r24, 0x04	; 4
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	99 ab       	std	Y+49, r25	; 0x31
    42ca:	88 ab       	std	Y+48, r24	; 0x30
					Num1=(Num1*10)+value;//store value in Num1 which is updated by added this value to Num1 and
    42cc:	8a a9       	ldd	r24, Y+50	; 0x32
    42ce:	9b a9       	ldd	r25, Y+51	; 0x33
    42d0:	9c 01       	movw	r18, r24
    42d2:	22 0f       	add	r18, r18
    42d4:	33 1f       	adc	r19, r19
    42d6:	c9 01       	movw	r24, r18
    42d8:	88 0f       	add	r24, r24
    42da:	99 1f       	adc	r25, r25
    42dc:	88 0f       	add	r24, r24
    42de:	99 1f       	adc	r25, r25
    42e0:	28 0f       	add	r18, r24
    42e2:	39 1f       	adc	r19, r25
    42e4:	88 a9       	ldd	r24, Y+48	; 0x30
    42e6:	99 a9       	ldd	r25, Y+49	; 0x31
    42e8:	82 0f       	add	r24, r18
    42ea:	93 1f       	adc	r25, r19
    42ec:	9b ab       	std	Y+51, r25	; 0x33
    42ee:	8a ab       	std	Y+50, r24	; 0x32
    42f0:	b6 c1       	rjmp	.+876    	; 0x465e <main+0x56c>
					//multiply old value of Num1*10 to shift every old number pressed by KPD
					break;
				}
				case '5'://if 5 is pressed
				{
					LCD_voidSendData('*');//display 5 in LCD
    42f2:	8a e2       	ldi	r24, 0x2A	; 42
    42f4:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
					value=5;//put 5 in value
    42f8:	85 e0       	ldi	r24, 0x05	; 5
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	99 ab       	std	Y+49, r25	; 0x31
    42fe:	88 ab       	std	Y+48, r24	; 0x30
					Num1=(Num1*10)+value;//store value in Num1 which is updated by added this value to Num1 and
    4300:	8a a9       	ldd	r24, Y+50	; 0x32
    4302:	9b a9       	ldd	r25, Y+51	; 0x33
    4304:	9c 01       	movw	r18, r24
    4306:	22 0f       	add	r18, r18
    4308:	33 1f       	adc	r19, r19
    430a:	c9 01       	movw	r24, r18
    430c:	88 0f       	add	r24, r24
    430e:	99 1f       	adc	r25, r25
    4310:	88 0f       	add	r24, r24
    4312:	99 1f       	adc	r25, r25
    4314:	28 0f       	add	r18, r24
    4316:	39 1f       	adc	r19, r25
    4318:	88 a9       	ldd	r24, Y+48	; 0x30
    431a:	99 a9       	ldd	r25, Y+49	; 0x31
    431c:	82 0f       	add	r24, r18
    431e:	93 1f       	adc	r25, r19
    4320:	9b ab       	std	Y+51, r25	; 0x33
    4322:	8a ab       	std	Y+50, r24	; 0x32
    4324:	9c c1       	rjmp	.+824    	; 0x465e <main+0x56c>
					//multiply old value of Num1*10 to shift every old number pressed by KPD
					break;
				}
				case '6'://if 6 is pressed
				{
					LCD_voidSendData('*');//display 6 in LCD
    4326:	8a e2       	ldi	r24, 0x2A	; 42
    4328:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
					value=6;//put 6 in value
    432c:	86 e0       	ldi	r24, 0x06	; 6
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	99 ab       	std	Y+49, r25	; 0x31
    4332:	88 ab       	std	Y+48, r24	; 0x30
					Num1=(Num1*10)+value;//store value in Num1 which is updated by added this value to Num1 and
    4334:	8a a9       	ldd	r24, Y+50	; 0x32
    4336:	9b a9       	ldd	r25, Y+51	; 0x33
    4338:	9c 01       	movw	r18, r24
    433a:	22 0f       	add	r18, r18
    433c:	33 1f       	adc	r19, r19
    433e:	c9 01       	movw	r24, r18
    4340:	88 0f       	add	r24, r24
    4342:	99 1f       	adc	r25, r25
    4344:	88 0f       	add	r24, r24
    4346:	99 1f       	adc	r25, r25
    4348:	28 0f       	add	r18, r24
    434a:	39 1f       	adc	r19, r25
    434c:	88 a9       	ldd	r24, Y+48	; 0x30
    434e:	99 a9       	ldd	r25, Y+49	; 0x31
    4350:	82 0f       	add	r24, r18
    4352:	93 1f       	adc	r25, r19
    4354:	9b ab       	std	Y+51, r25	; 0x33
    4356:	8a ab       	std	Y+50, r24	; 0x32
    4358:	82 c1       	rjmp	.+772    	; 0x465e <main+0x56c>
					//multiply old value of Num1*10 to shift every old number pressed by KPD
					break;
				}
				case '7'://if 7 is pressed
				{
					LCD_voidSendData('*');//display 7 in LCD
    435a:	8a e2       	ldi	r24, 0x2A	; 42
    435c:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
					value=7;//put 7 in value
    4360:	87 e0       	ldi	r24, 0x07	; 7
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	99 ab       	std	Y+49, r25	; 0x31
    4366:	88 ab       	std	Y+48, r24	; 0x30
					Num1=(Num1*10)+value;;//store value in Num1 which is updated by added this value to Num1 and
    4368:	8a a9       	ldd	r24, Y+50	; 0x32
    436a:	9b a9       	ldd	r25, Y+51	; 0x33
    436c:	9c 01       	movw	r18, r24
    436e:	22 0f       	add	r18, r18
    4370:	33 1f       	adc	r19, r19
    4372:	c9 01       	movw	r24, r18
    4374:	88 0f       	add	r24, r24
    4376:	99 1f       	adc	r25, r25
    4378:	88 0f       	add	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	28 0f       	add	r18, r24
    437e:	39 1f       	adc	r19, r25
    4380:	88 a9       	ldd	r24, Y+48	; 0x30
    4382:	99 a9       	ldd	r25, Y+49	; 0x31
    4384:	82 0f       	add	r24, r18
    4386:	93 1f       	adc	r25, r19
    4388:	9b ab       	std	Y+51, r25	; 0x33
    438a:	8a ab       	std	Y+50, r24	; 0x32
    438c:	68 c1       	rjmp	.+720    	; 0x465e <main+0x56c>
					break;
				}
				case '8'://display 8 in LCD
				{

					LCD_voidSendData('*');//put 8 in value
    438e:	8a e2       	ldi	r24, 0x2A	; 42
    4390:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
					value=8;//put 8 in value
    4394:	88 e0       	ldi	r24, 0x08	; 8
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	99 ab       	std	Y+49, r25	; 0x31
    439a:	88 ab       	std	Y+48, r24	; 0x30
					Num1=(Num1*10)+value;;//store value in Num1 which is updated by added this value to Num1 and
    439c:	8a a9       	ldd	r24, Y+50	; 0x32
    439e:	9b a9       	ldd	r25, Y+51	; 0x33
    43a0:	9c 01       	movw	r18, r24
    43a2:	22 0f       	add	r18, r18
    43a4:	33 1f       	adc	r19, r19
    43a6:	c9 01       	movw	r24, r18
    43a8:	88 0f       	add	r24, r24
    43aa:	99 1f       	adc	r25, r25
    43ac:	88 0f       	add	r24, r24
    43ae:	99 1f       	adc	r25, r25
    43b0:	28 0f       	add	r18, r24
    43b2:	39 1f       	adc	r19, r25
    43b4:	88 a9       	ldd	r24, Y+48	; 0x30
    43b6:	99 a9       	ldd	r25, Y+49	; 0x31
    43b8:	82 0f       	add	r24, r18
    43ba:	93 1f       	adc	r25, r19
    43bc:	9b ab       	std	Y+51, r25	; 0x33
    43be:	8a ab       	std	Y+50, r24	; 0x32
    43c0:	4e c1       	rjmp	.+668    	; 0x465e <main+0x56c>
					break;
				}
				case '9'://display 9 in LCD
				{

					LCD_voidSendData('*');//put 9 in value
    43c2:	8a e2       	ldi	r24, 0x2A	; 42
    43c4:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>
					value=9;
    43c8:	89 e0       	ldi	r24, 0x09	; 9
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	99 ab       	std	Y+49, r25	; 0x31
    43ce:	88 ab       	std	Y+48, r24	; 0x30
					Num1=(Num1*10)+value;//store value in Num1 which is updated by added this value to Num1 and
    43d0:	8a a9       	ldd	r24, Y+50	; 0x32
    43d2:	9b a9       	ldd	r25, Y+51	; 0x33
    43d4:	9c 01       	movw	r18, r24
    43d6:	22 0f       	add	r18, r18
    43d8:	33 1f       	adc	r19, r19
    43da:	c9 01       	movw	r24, r18
    43dc:	88 0f       	add	r24, r24
    43de:	99 1f       	adc	r25, r25
    43e0:	88 0f       	add	r24, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	28 0f       	add	r18, r24
    43e6:	39 1f       	adc	r19, r25
    43e8:	88 a9       	ldd	r24, Y+48	; 0x30
    43ea:	99 a9       	ldd	r25, Y+49	; 0x31
    43ec:	82 0f       	add	r24, r18
    43ee:	93 1f       	adc	r25, r19
    43f0:	9b ab       	std	Y+51, r25	; 0x33
    43f2:	8a ab       	std	Y+50, r24	; 0x32
    43f4:	34 c1       	rjmp	.+616    	; 0x465e <main+0x56c>
					//multiply old value of Num1*10 to shift every old number pressed by KPD

					break;
				}
				case '^'://when finishing entering password press enter
					LCD_voidCLR();//clear LCD again
    43f6:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <LCD_voidCLR>
					if(Num1 == 345)//check if entered number=saved password
    43fa:	8a a9       	ldd	r24, Y+50	; 0x32
    43fc:	9b a9       	ldd	r25, Y+51	; 0x33
    43fe:	31 e0       	ldi	r19, 0x01	; 1
    4400:	89 35       	cpi	r24, 0x59	; 89
    4402:	93 07       	cpc	r25, r19
    4404:	09 f0       	breq	.+2      	; 0x4408 <main+0x316>
    4406:	08 c1       	rjmp	.+528    	; 0x4618 <main+0x526>
					{
						LCD_voidGoToXY(0,0);//go to first place in LCD
    4408:	80 e0       	ldi	r24, 0x00	; 0
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <LCD_voidGoToXY>
						LCD_voidWrtiteString("Welcome");//if yes then print welcome in LCD
    4410:	81 e7       	ldi	r24, 0x71	; 113
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	0e 94 a8 1c 	call	0x3950	; 0x3950 <LCD_voidWrtiteString>
    4418:	80 e0       	ldi	r24, 0x00	; 0
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	aa ef       	ldi	r26, 0xFA	; 250
    441e:	b3 e4       	ldi	r27, 0x43	; 67
    4420:	8f a3       	std	Y+39, r24	; 0x27
    4422:	98 a7       	std	Y+40, r25	; 0x28
    4424:	a9 a7       	std	Y+41, r26	; 0x29
    4426:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4428:	6f a1       	ldd	r22, Y+39	; 0x27
    442a:	78 a5       	ldd	r23, Y+40	; 0x28
    442c:	89 a5       	ldd	r24, Y+41	; 0x29
    442e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4430:	20 e0       	ldi	r18, 0x00	; 0
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	4a ef       	ldi	r20, 0xFA	; 250
    4436:	54 e4       	ldi	r21, 0x44	; 68
    4438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    443c:	dc 01       	movw	r26, r24
    443e:	cb 01       	movw	r24, r22
    4440:	8b a3       	std	Y+35, r24	; 0x23
    4442:	9c a3       	std	Y+36, r25	; 0x24
    4444:	ad a3       	std	Y+37, r26	; 0x25
    4446:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4448:	6b a1       	ldd	r22, Y+35	; 0x23
    444a:	7c a1       	ldd	r23, Y+36	; 0x24
    444c:	8d a1       	ldd	r24, Y+37	; 0x25
    444e:	9e a1       	ldd	r25, Y+38	; 0x26
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	40 e8       	ldi	r20, 0x80	; 128
    4456:	5f e3       	ldi	r21, 0x3F	; 63
    4458:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    445c:	88 23       	and	r24, r24
    445e:	2c f4       	brge	.+10     	; 0x446a <main+0x378>
		__ticks = 1;
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	9a a3       	std	Y+34, r25	; 0x22
    4466:	89 a3       	std	Y+33, r24	; 0x21
    4468:	3f c0       	rjmp	.+126    	; 0x44e8 <main+0x3f6>
	else if (__tmp > 65535)
    446a:	6b a1       	ldd	r22, Y+35	; 0x23
    446c:	7c a1       	ldd	r23, Y+36	; 0x24
    446e:	8d a1       	ldd	r24, Y+37	; 0x25
    4470:	9e a1       	ldd	r25, Y+38	; 0x26
    4472:	20 e0       	ldi	r18, 0x00	; 0
    4474:	3f ef       	ldi	r19, 0xFF	; 255
    4476:	4f e7       	ldi	r20, 0x7F	; 127
    4478:	57 e4       	ldi	r21, 0x47	; 71
    447a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    447e:	18 16       	cp	r1, r24
    4480:	4c f5       	brge	.+82     	; 0x44d4 <main+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4482:	6f a1       	ldd	r22, Y+39	; 0x27
    4484:	78 a5       	ldd	r23, Y+40	; 0x28
    4486:	89 a5       	ldd	r24, Y+41	; 0x29
    4488:	9a a5       	ldd	r25, Y+42	; 0x2a
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	40 e2       	ldi	r20, 0x20	; 32
    4490:	51 e4       	ldi	r21, 0x41	; 65
    4492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	bc 01       	movw	r22, r24
    449c:	cd 01       	movw	r24, r26
    449e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a2:	dc 01       	movw	r26, r24
    44a4:	cb 01       	movw	r24, r22
    44a6:	9a a3       	std	Y+34, r25	; 0x22
    44a8:	89 a3       	std	Y+33, r24	; 0x21
    44aa:	0f c0       	rjmp	.+30     	; 0x44ca <main+0x3d8>
    44ac:	88 ec       	ldi	r24, 0xC8	; 200
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	98 a3       	std	Y+32, r25	; 0x20
    44b2:	8f 8f       	std	Y+31, r24	; 0x1f
    44b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44b6:	98 a1       	ldd	r25, Y+32	; 0x20
    44b8:	01 97       	sbiw	r24, 0x01	; 1
    44ba:	f1 f7       	brne	.-4      	; 0x44b8 <main+0x3c6>
    44bc:	98 a3       	std	Y+32, r25	; 0x20
    44be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c0:	89 a1       	ldd	r24, Y+33	; 0x21
    44c2:	9a a1       	ldd	r25, Y+34	; 0x22
    44c4:	01 97       	sbiw	r24, 0x01	; 1
    44c6:	9a a3       	std	Y+34, r25	; 0x22
    44c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ca:	89 a1       	ldd	r24, Y+33	; 0x21
    44cc:	9a a1       	ldd	r25, Y+34	; 0x22
    44ce:	00 97       	sbiw	r24, 0x00	; 0
    44d0:	69 f7       	brne	.-38     	; 0x44ac <main+0x3ba>
    44d2:	14 c0       	rjmp	.+40     	; 0x44fc <main+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d4:	6b a1       	ldd	r22, Y+35	; 0x23
    44d6:	7c a1       	ldd	r23, Y+36	; 0x24
    44d8:	8d a1       	ldd	r24, Y+37	; 0x25
    44da:	9e a1       	ldd	r25, Y+38	; 0x26
    44dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	9a a3       	std	Y+34, r25	; 0x22
    44e6:	89 a3       	std	Y+33, r24	; 0x21
    44e8:	89 a1       	ldd	r24, Y+33	; 0x21
    44ea:	9a a1       	ldd	r25, Y+34	; 0x22
    44ec:	9e 8f       	std	Y+30, r25	; 0x1e
    44ee:	8d 8f       	std	Y+29, r24	; 0x1d
    44f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44f4:	01 97       	sbiw	r24, 0x01	; 1
    44f6:	f1 f7       	brne	.-4      	; 0x44f4 <main+0x402>
    44f8:	9e 8f       	std	Y+30, r25	; 0x1e
    44fa:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(500);//make delay for printing welcome
						// Enable Global interrupt
						GINT_voidGINTEnable();
    44fc:	0e 94 79 09 	call	0x12f2	; 0x12f2 <GINT_voidGINTEnable>
						// Initiate TMR1
						TMR_voidTMR1Init();
    4500:	0e 94 29 08 	call	0x1052	; 0x1052 <TMR_voidTMR1Init>
//------------------------------------------------Opens the door--------------------------------------------------
						for(u16 i = 999 ; i <=1499 ; i++)
    4504:	87 ee       	ldi	r24, 0xE7	; 231
    4506:	93 e0       	ldi	r25, 0x03	; 3
    4508:	9d a7       	std	Y+45, r25	; 0x2d
    450a:	8c a7       	std	Y+44, r24	; 0x2c
    450c:	7b c0       	rjmp	.+246    	; 0x4604 <main+0x512>
							{
							  TMR_voidTMR1SetCompareMatchChannelA(i);
    450e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4510:	9d a5       	ldd	r25, Y+45	; 0x2d
    4512:	0e 94 83 08 	call	0x1106	; 0x1106 <TMR_voidTMR1SetCompareMatchChannelA>
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	a0 e2       	ldi	r26, 0x20	; 32
    451c:	b1 e4       	ldi	r27, 0x41	; 65
    451e:	89 8f       	std	Y+25, r24	; 0x19
    4520:	9a 8f       	std	Y+26, r25	; 0x1a
    4522:	ab 8f       	std	Y+27, r26	; 0x1b
    4524:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4526:	69 8d       	ldd	r22, Y+25	; 0x19
    4528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    452a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    452c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    452e:	20 e0       	ldi	r18, 0x00	; 0
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	4a ef       	ldi	r20, 0xFA	; 250
    4534:	54 e4       	ldi	r21, 0x44	; 68
    4536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    453a:	dc 01       	movw	r26, r24
    453c:	cb 01       	movw	r24, r22
    453e:	8d 8b       	std	Y+21, r24	; 0x15
    4540:	9e 8b       	std	Y+22, r25	; 0x16
    4542:	af 8b       	std	Y+23, r26	; 0x17
    4544:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4546:	6d 89       	ldd	r22, Y+21	; 0x15
    4548:	7e 89       	ldd	r23, Y+22	; 0x16
    454a:	8f 89       	ldd	r24, Y+23	; 0x17
    454c:	98 8d       	ldd	r25, Y+24	; 0x18
    454e:	20 e0       	ldi	r18, 0x00	; 0
    4550:	30 e0       	ldi	r19, 0x00	; 0
    4552:	40 e8       	ldi	r20, 0x80	; 128
    4554:	5f e3       	ldi	r21, 0x3F	; 63
    4556:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    455a:	88 23       	and	r24, r24
    455c:	2c f4       	brge	.+10     	; 0x4568 <main+0x476>
		__ticks = 1;
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	9c 8b       	std	Y+20, r25	; 0x14
    4564:	8b 8b       	std	Y+19, r24	; 0x13
    4566:	3f c0       	rjmp	.+126    	; 0x45e6 <main+0x4f4>
	else if (__tmp > 65535)
    4568:	6d 89       	ldd	r22, Y+21	; 0x15
    456a:	7e 89       	ldd	r23, Y+22	; 0x16
    456c:	8f 89       	ldd	r24, Y+23	; 0x17
    456e:	98 8d       	ldd	r25, Y+24	; 0x18
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	3f ef       	ldi	r19, 0xFF	; 255
    4574:	4f e7       	ldi	r20, 0x7F	; 127
    4576:	57 e4       	ldi	r21, 0x47	; 71
    4578:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    457c:	18 16       	cp	r1, r24
    457e:	4c f5       	brge	.+82     	; 0x45d2 <main+0x4e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4580:	69 8d       	ldd	r22, Y+25	; 0x19
    4582:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4584:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4586:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	40 e2       	ldi	r20, 0x20	; 32
    458e:	51 e4       	ldi	r21, 0x41	; 65
    4590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	bc 01       	movw	r22, r24
    459a:	cd 01       	movw	r24, r26
    459c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	9c 8b       	std	Y+20, r25	; 0x14
    45a6:	8b 8b       	std	Y+19, r24	; 0x13
    45a8:	0f c0       	rjmp	.+30     	; 0x45c8 <main+0x4d6>
    45aa:	88 ec       	ldi	r24, 0xC8	; 200
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	9a 8b       	std	Y+18, r25	; 0x12
    45b0:	89 8b       	std	Y+17, r24	; 0x11
    45b2:	89 89       	ldd	r24, Y+17	; 0x11
    45b4:	9a 89       	ldd	r25, Y+18	; 0x12
    45b6:	01 97       	sbiw	r24, 0x01	; 1
    45b8:	f1 f7       	brne	.-4      	; 0x45b6 <main+0x4c4>
    45ba:	9a 8b       	std	Y+18, r25	; 0x12
    45bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45be:	8b 89       	ldd	r24, Y+19	; 0x13
    45c0:	9c 89       	ldd	r25, Y+20	; 0x14
    45c2:	01 97       	sbiw	r24, 0x01	; 1
    45c4:	9c 8b       	std	Y+20, r25	; 0x14
    45c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c8:	8b 89       	ldd	r24, Y+19	; 0x13
    45ca:	9c 89       	ldd	r25, Y+20	; 0x14
    45cc:	00 97       	sbiw	r24, 0x00	; 0
    45ce:	69 f7       	brne	.-38     	; 0x45aa <main+0x4b8>
    45d0:	14 c0       	rjmp	.+40     	; 0x45fa <main+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d2:	6d 89       	ldd	r22, Y+21	; 0x15
    45d4:	7e 89       	ldd	r23, Y+22	; 0x16
    45d6:	8f 89       	ldd	r24, Y+23	; 0x17
    45d8:	98 8d       	ldd	r25, Y+24	; 0x18
    45da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	9c 8b       	std	Y+20, r25	; 0x14
    45e4:	8b 8b       	std	Y+19, r24	; 0x13
    45e6:	8b 89       	ldd	r24, Y+19	; 0x13
    45e8:	9c 89       	ldd	r25, Y+20	; 0x14
    45ea:	98 8b       	std	Y+16, r25	; 0x10
    45ec:	8f 87       	std	Y+15, r24	; 0x0f
    45ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    45f0:	98 89       	ldd	r25, Y+16	; 0x10
    45f2:	01 97       	sbiw	r24, 0x01	; 1
    45f4:	f1 f7       	brne	.-4      	; 0x45f2 <main+0x500>
    45f6:	98 8b       	std	Y+16, r25	; 0x10
    45f8:	8f 87       	std	Y+15, r24	; 0x0f
						// Enable Global interrupt
						GINT_voidGINTEnable();
						// Initiate TMR1
						TMR_voidTMR1Init();
//------------------------------------------------Opens the door--------------------------------------------------
						for(u16 i = 999 ; i <=1499 ; i++)
    45fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    45fc:	9d a5       	ldd	r25, Y+45	; 0x2d
    45fe:	01 96       	adiw	r24, 0x01	; 1
    4600:	9d a7       	std	Y+45, r25	; 0x2d
    4602:	8c a7       	std	Y+44, r24	; 0x2c
    4604:	8c a5       	ldd	r24, Y+44	; 0x2c
    4606:	9d a5       	ldd	r25, Y+45	; 0x2d
    4608:	25 e0       	ldi	r18, 0x05	; 5
    460a:	8c 3d       	cpi	r24, 0xDC	; 220
    460c:	92 07       	cpc	r25, r18
    460e:	08 f4       	brcc	.+2      	; 0x4612 <main+0x520>
    4610:	7e cf       	rjmp	.-260    	; 0x450e <main+0x41c>
							{
							  TMR_voidTMR1SetCompareMatchChannelA(i);
								_delay_ms(10);
							 }

						flag = 1;//make flag =1
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	8e a7       	std	Y+46, r24	; 0x2e
    4616:	23 c0       	rjmp	.+70     	; 0x465e <main+0x56c>
					}
					else{ //if not true

						if(counter <= 1)//Enter password if false 2 times again and check om=n it
    4618:	8f a5       	ldd	r24, Y+47	; 0x2f
    461a:	82 30       	cpi	r24, 0x02	; 2
    461c:	a0 f4       	brcc	.+40     	; 0x4646 <main+0x554>
						{
							LCD_voidCLR();//clear LCD
    461e:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <LCD_voidCLR>
							LCD_voidGoToXY(0,0);//go to first place in LCD
    4622:	80 e0       	ldi	r24, 0x00	; 0
    4624:	60 e0       	ldi	r22, 0x00	; 0
    4626:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <LCD_voidGoToXY>
							LCD_voidWrtiteString("Reenter password");//print re_enter password again if it was false
    462a:	89 e7       	ldi	r24, 0x79	; 121
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <LCD_voidWrtiteString>
							LCD_voidGoToXY(1,0);//print this text in line 2 in LCD
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	60 e0       	ldi	r22, 0x00	; 0
    4636:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <LCD_voidGoToXY>
							Num1 = 0;//set number to 0 again
    463a:	1b aa       	std	Y+51, r1	; 0x33
    463c:	1a aa       	std	Y+50, r1	; 0x32
							counter ++ ;
    463e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4640:	8f 5f       	subi	r24, 0xFF	; 255
    4642:	8f a7       	std	Y+47, r24	; 0x2f
    4644:	0c c0       	rjmp	.+24     	; 0x465e <main+0x56c>
						}
						else
						{
							LCD_voidCLR();//clear LCD
    4646:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <LCD_voidCLR>
							LCD_voidGoToXY(0,0);//go to first place in LCD
    464a:	80 e0       	ldi	r24, 0x00	; 0
    464c:	60 e0       	ldi	r22, 0x00	; 0
    464e:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <LCD_voidGoToXY>
							LCD_voidWrtiteString("Calling 911");//This means that number of tries has ended then call the police
    4652:	8a e8       	ldi	r24, 0x8A	; 138
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	0e 94 a8 1c 	call	0x3950	; 0x3950 <LCD_voidWrtiteString>
							flag = 1;//set flag to one
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	8e a7       	std	Y+46, r24	; 0x2e
						}
					}
					break;
				}
				if(flag == 1)//check on flag if =1
    465e:	8e a5       	ldd	r24, Y+46	; 0x2e
    4660:	81 30       	cpi	r24, 0x01	; 1
    4662:	09 f0       	breq	.+2      	; 0x4666 <main+0x574>
    4664:	66 cd       	rjmp	.-1332   	; 0x4132 <main+0x40>
				}
			}
		}
//-------------------------------------Temperature sensor----------------------------------------------------------------

			LCD_voidCLR();//clear LCD
    4666:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <LCD_voidCLR>
			LCD_voidInit();//Init LCD again after entery system
    466a:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <LCD_voidInit>

		  while(1)
		   {
		 	 LCD_voidCLR();
    466e:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <LCD_voidCLR>
		     LCD_voidGoToXY(0,0);//go to first place in LCD
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	60 e0       	ldi	r22, 0x00	; 0
    4676:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <LCD_voidGoToXY>
		     LCD_voidWrtiteString("Temperature ");//display word Temperature on LCD
    467a:	86 e9       	ldi	r24, 0x96	; 150
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <LCD_voidWrtiteString>


		     ADC_u8GetDigitalValue(ADC_u8_CHANNEL_0,&Local_u16DigitalValue);//Get digital value from ADC
    4682:	9e 01       	movw	r18, r28
    4684:	28 5c       	subi	r18, 0xC8	; 200
    4686:	3f 4f       	sbci	r19, 0xFF	; 255
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	b9 01       	movw	r22, r18
    468c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <ADC_u8GetDigitalValue>
		        		Local_u16AnalogValue = (u16)((Local_u16DigitalValue * 5000UL) /1023) ;//Get analog value
    4690:	88 ad       	ldd	r24, Y+56	; 0x38
    4692:	99 ad       	ldd	r25, Y+57	; 0x39
    4694:	cc 01       	movw	r24, r24
    4696:	a0 e0       	ldi	r26, 0x00	; 0
    4698:	b0 e0       	ldi	r27, 0x00	; 0
    469a:	28 e8       	ldi	r18, 0x88	; 136
    469c:	33 e1       	ldi	r19, 0x13	; 19
    469e:	40 e0       	ldi	r20, 0x00	; 0
    46a0:	50 e0       	ldi	r21, 0x00	; 0
    46a2:	bc 01       	movw	r22, r24
    46a4:	cd 01       	movw	r24, r26
    46a6:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    46aa:	dc 01       	movw	r26, r24
    46ac:	cb 01       	movw	r24, r22
    46ae:	2f ef       	ldi	r18, 0xFF	; 255
    46b0:	33 e0       	ldi	r19, 0x03	; 3
    46b2:	40 e0       	ldi	r20, 0x00	; 0
    46b4:	50 e0       	ldi	r21, 0x00	; 0
    46b6:	bc 01       	movw	r22, r24
    46b8:	cd 01       	movw	r24, r26
    46ba:	0e 94 87 24 	call	0x490e	; 0x490e <__udivmodsi4>
    46be:	da 01       	movw	r26, r20
    46c0:	c9 01       	movw	r24, r18
    46c2:	9f ab       	std	Y+55, r25	; 0x37
    46c4:	8e ab       	std	Y+54, r24	; 0x36
		        		u8 temp=Local_u16AnalogValue/10;//Get temperature
    46c6:	8e a9       	ldd	r24, Y+54	; 0x36
    46c8:	9f a9       	ldd	r25, Y+55	; 0x37
    46ca:	2a e0       	ldi	r18, 0x0A	; 10
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	b9 01       	movw	r22, r18
    46d0:	0e 94 73 24 	call	0x48e6	; 0x48e6 <__udivmodhi4>
    46d4:	cb 01       	movw	r24, r22
    46d6:	8b a7       	std	Y+43, r24	; 0x2b

		        		LCD_voidDisplayNumber(temp);//display value of temperature in LCD
    46d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    46da:	88 2f       	mov	r24, r24
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <LCD_voidDisplayNumber>
		        		LCD_voidSendData('C');//Means Celsius
    46e2:	83 e4       	ldi	r24, 0x43	; 67
    46e4:	0e 94 00 1b 	call	0x3600	; 0x3600 <LCD_voidSendData>

//------------------------------------------------Air conditioner------------------------------------------------
		        		// Enable GINT
			        		GINT_voidGINTEnable();
    46e8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <GINT_voidGINTEnable>
			        	// initiate TMR0
			        		TMR_voidTMR0Init(TMR0_FAST_PMW_MODE);
    46ec:	83 e0       	ldi	r24, 0x03	; 3
    46ee:	0e 94 67 07 	call	0xece	; 0xece <TMR_voidTMR0Init>
			        	// Setting the OCR0 value to be the value of the temperture*5 such that it's changed during run time
			        		TMR_voidTMR0SetCompareMatch(temp*5);
    46f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    46f4:	28 2f       	mov	r18, r24
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	c9 01       	movw	r24, r18
    46fa:	88 0f       	add	r24, r24
    46fc:	99 1f       	adc	r25, r25
    46fe:	88 0f       	add	r24, r24
    4700:	99 1f       	adc	r25, r25
    4702:	82 0f       	add	r24, r18
    4704:	93 1f       	adc	r25, r19
    4706:	0e 94 75 08 	call	0x10ea	; 0x10ea <TMR_voidTMR0SetCompareMatch>

////---------------------------------------Fire alarm-----------------------------------------------------
		        	 if((temp)>=50)//check if temperature greater than 50 to check if there is a fire
    470a:	8b a5       	ldd	r24, Y+43	; 0x2b
    470c:	82 33       	cpi	r24, 0x32	; 50
    470e:	30 f0       	brcs	.+12     	; 0x471c <main+0x62a>
		        	 {
		        		 //If temperature greater than 50 then open alarm which is open LED
		        		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_Pin1,DIO_u8_HIGH);
    4710:	80 e0       	ldi	r24, 0x00	; 0
    4712:	61 e0       	ldi	r22, 0x01	; 1
    4714:	41 e0       	ldi	r20, 0x01	; 1
    4716:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    471a:	05 c0       	rjmp	.+10     	; 0x4726 <main+0x634>
		        	 }
		        	 else
		        	 {
		        		 //IF not then close alarm which is close LED
		        		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_Pin1,DIO_u8_LOW);
    471c:	80 e0       	ldi	r24, 0x00	; 0
    471e:	61 e0       	ldi	r22, 0x01	; 1
    4720:	40 e0       	ldi	r20, 0x00	; 0
    4722:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		        	 }

///--------------------------------------Light sensor-------------------------------------------------------------------
 			     ADC_u8GetDigitalValue(ADC_u8_CHANNEL_2,&Local_u16DigitalValue2);//Get digital value from ADC
    4726:	9e 01       	movw	r18, r28
    4728:	26 5c       	subi	r18, 0xC6	; 198
    472a:	3f 4f       	sbci	r19, 0xFF	; 255
    472c:	82 e0       	ldi	r24, 0x02	; 2
    472e:	b9 01       	movw	r22, r18
    4730:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <ADC_u8GetDigitalValue>
 			     Local_u16AnalogValue2 = (u16)((Local_u16DigitalValue2 * 5000UL) /1023) ;  //Get analog value
    4734:	8a ad       	ldd	r24, Y+58	; 0x3a
    4736:	9b ad       	ldd	r25, Y+59	; 0x3b
    4738:	cc 01       	movw	r24, r24
    473a:	a0 e0       	ldi	r26, 0x00	; 0
    473c:	b0 e0       	ldi	r27, 0x00	; 0
    473e:	28 e8       	ldi	r18, 0x88	; 136
    4740:	33 e1       	ldi	r19, 0x13	; 19
    4742:	40 e0       	ldi	r20, 0x00	; 0
    4744:	50 e0       	ldi	r21, 0x00	; 0
    4746:	bc 01       	movw	r22, r24
    4748:	cd 01       	movw	r24, r26
    474a:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    474e:	dc 01       	movw	r26, r24
    4750:	cb 01       	movw	r24, r22
    4752:	2f ef       	ldi	r18, 0xFF	; 255
    4754:	33 e0       	ldi	r19, 0x03	; 3
    4756:	40 e0       	ldi	r20, 0x00	; 0
    4758:	50 e0       	ldi	r21, 0x00	; 0
    475a:	bc 01       	movw	r22, r24
    475c:	cd 01       	movw	r24, r26
    475e:	0e 94 87 24 	call	0x490e	; 0x490e <__udivmodsi4>
    4762:	da 01       	movw	r26, r20
    4764:	c9 01       	movw	r24, r18
    4766:	9d ab       	std	Y+53, r25	; 0x35
    4768:	8c ab       	std	Y+52, r24	; 0x34

 			     //check if there is a light of high intensity then open led
 			                   if(Local_u16AnalogValue2>=2500)
    476a:	8c a9       	ldd	r24, Y+52	; 0x34
    476c:	9d a9       	ldd	r25, Y+53	; 0x35
    476e:	39 e0       	ldi	r19, 0x09	; 9
    4770:	84 3c       	cpi	r24, 0xC4	; 196
    4772:	93 07       	cpc	r25, r19
    4774:	30 f0       	brcs	.+12     	; 0x4782 <main+0x690>
 			     				{
 			     					DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_Pin3,DIO_u8_HIGH);
    4776:	80 e0       	ldi	r24, 0x00	; 0
    4778:	63 e0       	ldi	r22, 0x03	; 3
    477a:	41 e0       	ldi	r20, 0x01	; 1
    477c:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    4780:	05 c0       	rjmp	.+10     	; 0x478c <main+0x69a>
 			     				}
 			           //else close led
 			                   else
 			     				{
 			     						DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_Pin3,DIO_u8_LOW);
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	63 e0       	ldi	r22, 0x03	; 3
    4786:	40 e0       	ldi	r20, 0x00	; 0
    4788:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
    478c:	80 e0       	ldi	r24, 0x00	; 0
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	aa ef       	ldi	r26, 0xFA	; 250
    4792:	b3 e4       	ldi	r27, 0x43	; 67
    4794:	8b 87       	std	Y+11, r24	; 0x0b
    4796:	9c 87       	std	Y+12, r25	; 0x0c
    4798:	ad 87       	std	Y+13, r26	; 0x0d
    479a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    479c:	6b 85       	ldd	r22, Y+11	; 0x0b
    479e:	7c 85       	ldd	r23, Y+12	; 0x0c
    47a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	4a ef       	ldi	r20, 0xFA	; 250
    47aa:	54 e4       	ldi	r21, 0x44	; 68
    47ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b0:	dc 01       	movw	r26, r24
    47b2:	cb 01       	movw	r24, r22
    47b4:	8f 83       	std	Y+7, r24	; 0x07
    47b6:	98 87       	std	Y+8, r25	; 0x08
    47b8:	a9 87       	std	Y+9, r26	; 0x09
    47ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47bc:	6f 81       	ldd	r22, Y+7	; 0x07
    47be:	78 85       	ldd	r23, Y+8	; 0x08
    47c0:	89 85       	ldd	r24, Y+9	; 0x09
    47c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c4:	20 e0       	ldi	r18, 0x00	; 0
    47c6:	30 e0       	ldi	r19, 0x00	; 0
    47c8:	40 e8       	ldi	r20, 0x80	; 128
    47ca:	5f e3       	ldi	r21, 0x3F	; 63
    47cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47d0:	88 23       	and	r24, r24
    47d2:	2c f4       	brge	.+10     	; 0x47de <main+0x6ec>
		__ticks = 1;
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	9e 83       	std	Y+6, r25	; 0x06
    47da:	8d 83       	std	Y+5, r24	; 0x05
    47dc:	3f c0       	rjmp	.+126    	; 0x485c <main+0x76a>
	else if (__tmp > 65535)
    47de:	6f 81       	ldd	r22, Y+7	; 0x07
    47e0:	78 85       	ldd	r23, Y+8	; 0x08
    47e2:	89 85       	ldd	r24, Y+9	; 0x09
    47e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	3f ef       	ldi	r19, 0xFF	; 255
    47ea:	4f e7       	ldi	r20, 0x7F	; 127
    47ec:	57 e4       	ldi	r21, 0x47	; 71
    47ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47f2:	18 16       	cp	r1, r24
    47f4:	4c f5       	brge	.+82     	; 0x4848 <main+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    47f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    47fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    47fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	40 e2       	ldi	r20, 0x20	; 32
    4804:	51 e4       	ldi	r21, 0x41	; 65
    4806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	bc 01       	movw	r22, r24
    4810:	cd 01       	movw	r24, r26
    4812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4816:	dc 01       	movw	r26, r24
    4818:	cb 01       	movw	r24, r22
    481a:	9e 83       	std	Y+6, r25	; 0x06
    481c:	8d 83       	std	Y+5, r24	; 0x05
    481e:	0f c0       	rjmp	.+30     	; 0x483e <main+0x74c>
    4820:	88 ec       	ldi	r24, 0xC8	; 200
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	9c 83       	std	Y+4, r25	; 0x04
    4826:	8b 83       	std	Y+3, r24	; 0x03
    4828:	8b 81       	ldd	r24, Y+3	; 0x03
    482a:	9c 81       	ldd	r25, Y+4	; 0x04
    482c:	01 97       	sbiw	r24, 0x01	; 1
    482e:	f1 f7       	brne	.-4      	; 0x482c <main+0x73a>
    4830:	9c 83       	std	Y+4, r25	; 0x04
    4832:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4834:	8d 81       	ldd	r24, Y+5	; 0x05
    4836:	9e 81       	ldd	r25, Y+6	; 0x06
    4838:	01 97       	sbiw	r24, 0x01	; 1
    483a:	9e 83       	std	Y+6, r25	; 0x06
    483c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483e:	8d 81       	ldd	r24, Y+5	; 0x05
    4840:	9e 81       	ldd	r25, Y+6	; 0x06
    4842:	00 97       	sbiw	r24, 0x00	; 0
    4844:	69 f7       	brne	.-38     	; 0x4820 <main+0x72e>
    4846:	13 cf       	rjmp	.-474    	; 0x466e <main+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4848:	6f 81       	ldd	r22, Y+7	; 0x07
    484a:	78 85       	ldd	r23, Y+8	; 0x08
    484c:	89 85       	ldd	r24, Y+9	; 0x09
    484e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4854:	dc 01       	movw	r26, r24
    4856:	cb 01       	movw	r24, r22
    4858:	9e 83       	std	Y+6, r25	; 0x06
    485a:	8d 83       	std	Y+5, r24	; 0x05
    485c:	8d 81       	ldd	r24, Y+5	; 0x05
    485e:	9e 81       	ldd	r25, Y+6	; 0x06
    4860:	9a 83       	std	Y+2, r25	; 0x02
    4862:	89 83       	std	Y+1, r24	; 0x01
    4864:	89 81       	ldd	r24, Y+1	; 0x01
    4866:	9a 81       	ldd	r25, Y+2	; 0x02
    4868:	01 97       	sbiw	r24, 0x01	; 1
    486a:	f1 f7       	brne	.-4      	; 0x4868 <main+0x776>
    486c:	9a 83       	std	Y+2, r25	; 0x02
    486e:	89 83       	std	Y+1, r24	; 0x01
    4870:	fe ce       	rjmp	.-516    	; 0x466e <main+0x57c>

00004872 <APP_voidFlagLED>:
return 0;
}


// Function to toggle led used previously when used pointer to function in timer0 and timer1
void APP_voidFlagLED(void){
    4872:	df 93       	push	r29
    4874:	cf 93       	push	r28
    4876:	cd b7       	in	r28, 0x3d	; 61
    4878:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8_Flag = 0;
	if(Local_u8_Flag == 0){
    487a:	80 91 ce 00 	lds	r24, 0x00CE
    487e:	88 23       	and	r24, r24
    4880:	49 f4       	brne	.+18     	; 0x4894 <APP_voidFlagLED+0x22>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_Pin3,DIO_u8_LOW);
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	63 e0       	ldi	r22, 0x03	; 3
    4886:	40 e0       	ldi	r20, 0x00	; 0
    4888:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
		Local_u8_Flag = 1;
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	80 93 ce 00 	sts	0x00CE, r24
    4892:	07 c0       	rjmp	.+14     	; 0x48a2 <APP_voidFlagLED+0x30>
	}else{
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_Pin3,DIO_u8_HIGH);
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	63 e0       	ldi	r22, 0x03	; 3
    4898:	41 e0       	ldi	r20, 0x01	; 1
    489a:	0e 94 85 0c 	call	0x190a	; 0x190a <DIO_u8SetPinValue>
	    Local_u8_Flag = 0;
    489e:	10 92 ce 00 	sts	0x00CE, r1
	}
}
    48a2:	cf 91       	pop	r28
    48a4:	df 91       	pop	r29
    48a6:	08 95       	ret

000048a8 <__mulsi3>:
    48a8:	62 9f       	mul	r22, r18
    48aa:	d0 01       	movw	r26, r0
    48ac:	73 9f       	mul	r23, r19
    48ae:	f0 01       	movw	r30, r0
    48b0:	82 9f       	mul	r24, r18
    48b2:	e0 0d       	add	r30, r0
    48b4:	f1 1d       	adc	r31, r1
    48b6:	64 9f       	mul	r22, r20
    48b8:	e0 0d       	add	r30, r0
    48ba:	f1 1d       	adc	r31, r1
    48bc:	92 9f       	mul	r25, r18
    48be:	f0 0d       	add	r31, r0
    48c0:	83 9f       	mul	r24, r19
    48c2:	f0 0d       	add	r31, r0
    48c4:	74 9f       	mul	r23, r20
    48c6:	f0 0d       	add	r31, r0
    48c8:	65 9f       	mul	r22, r21
    48ca:	f0 0d       	add	r31, r0
    48cc:	99 27       	eor	r25, r25
    48ce:	72 9f       	mul	r23, r18
    48d0:	b0 0d       	add	r27, r0
    48d2:	e1 1d       	adc	r30, r1
    48d4:	f9 1f       	adc	r31, r25
    48d6:	63 9f       	mul	r22, r19
    48d8:	b0 0d       	add	r27, r0
    48da:	e1 1d       	adc	r30, r1
    48dc:	f9 1f       	adc	r31, r25
    48de:	bd 01       	movw	r22, r26
    48e0:	cf 01       	movw	r24, r30
    48e2:	11 24       	eor	r1, r1
    48e4:	08 95       	ret

000048e6 <__udivmodhi4>:
    48e6:	aa 1b       	sub	r26, r26
    48e8:	bb 1b       	sub	r27, r27
    48ea:	51 e1       	ldi	r21, 0x11	; 17
    48ec:	07 c0       	rjmp	.+14     	; 0x48fc <__udivmodhi4_ep>

000048ee <__udivmodhi4_loop>:
    48ee:	aa 1f       	adc	r26, r26
    48f0:	bb 1f       	adc	r27, r27
    48f2:	a6 17       	cp	r26, r22
    48f4:	b7 07       	cpc	r27, r23
    48f6:	10 f0       	brcs	.+4      	; 0x48fc <__udivmodhi4_ep>
    48f8:	a6 1b       	sub	r26, r22
    48fa:	b7 0b       	sbc	r27, r23

000048fc <__udivmodhi4_ep>:
    48fc:	88 1f       	adc	r24, r24
    48fe:	99 1f       	adc	r25, r25
    4900:	5a 95       	dec	r21
    4902:	a9 f7       	brne	.-22     	; 0x48ee <__udivmodhi4_loop>
    4904:	80 95       	com	r24
    4906:	90 95       	com	r25
    4908:	bc 01       	movw	r22, r24
    490a:	cd 01       	movw	r24, r26
    490c:	08 95       	ret

0000490e <__udivmodsi4>:
    490e:	a1 e2       	ldi	r26, 0x21	; 33
    4910:	1a 2e       	mov	r1, r26
    4912:	aa 1b       	sub	r26, r26
    4914:	bb 1b       	sub	r27, r27
    4916:	fd 01       	movw	r30, r26
    4918:	0d c0       	rjmp	.+26     	; 0x4934 <__udivmodsi4_ep>

0000491a <__udivmodsi4_loop>:
    491a:	aa 1f       	adc	r26, r26
    491c:	bb 1f       	adc	r27, r27
    491e:	ee 1f       	adc	r30, r30
    4920:	ff 1f       	adc	r31, r31
    4922:	a2 17       	cp	r26, r18
    4924:	b3 07       	cpc	r27, r19
    4926:	e4 07       	cpc	r30, r20
    4928:	f5 07       	cpc	r31, r21
    492a:	20 f0       	brcs	.+8      	; 0x4934 <__udivmodsi4_ep>
    492c:	a2 1b       	sub	r26, r18
    492e:	b3 0b       	sbc	r27, r19
    4930:	e4 0b       	sbc	r30, r20
    4932:	f5 0b       	sbc	r31, r21

00004934 <__udivmodsi4_ep>:
    4934:	66 1f       	adc	r22, r22
    4936:	77 1f       	adc	r23, r23
    4938:	88 1f       	adc	r24, r24
    493a:	99 1f       	adc	r25, r25
    493c:	1a 94       	dec	r1
    493e:	69 f7       	brne	.-38     	; 0x491a <__udivmodsi4_loop>
    4940:	60 95       	com	r22
    4942:	70 95       	com	r23
    4944:	80 95       	com	r24
    4946:	90 95       	com	r25
    4948:	9b 01       	movw	r18, r22
    494a:	ac 01       	movw	r20, r24
    494c:	bd 01       	movw	r22, r26
    494e:	cf 01       	movw	r24, r30
    4950:	08 95       	ret

00004952 <__prologue_saves__>:
    4952:	2f 92       	push	r2
    4954:	3f 92       	push	r3
    4956:	4f 92       	push	r4
    4958:	5f 92       	push	r5
    495a:	6f 92       	push	r6
    495c:	7f 92       	push	r7
    495e:	8f 92       	push	r8
    4960:	9f 92       	push	r9
    4962:	af 92       	push	r10
    4964:	bf 92       	push	r11
    4966:	cf 92       	push	r12
    4968:	df 92       	push	r13
    496a:	ef 92       	push	r14
    496c:	ff 92       	push	r15
    496e:	0f 93       	push	r16
    4970:	1f 93       	push	r17
    4972:	cf 93       	push	r28
    4974:	df 93       	push	r29
    4976:	cd b7       	in	r28, 0x3d	; 61
    4978:	de b7       	in	r29, 0x3e	; 62
    497a:	ca 1b       	sub	r28, r26
    497c:	db 0b       	sbc	r29, r27
    497e:	0f b6       	in	r0, 0x3f	; 63
    4980:	f8 94       	cli
    4982:	de bf       	out	0x3e, r29	; 62
    4984:	0f be       	out	0x3f, r0	; 63
    4986:	cd bf       	out	0x3d, r28	; 61
    4988:	09 94       	ijmp

0000498a <__epilogue_restores__>:
    498a:	2a 88       	ldd	r2, Y+18	; 0x12
    498c:	39 88       	ldd	r3, Y+17	; 0x11
    498e:	48 88       	ldd	r4, Y+16	; 0x10
    4990:	5f 84       	ldd	r5, Y+15	; 0x0f
    4992:	6e 84       	ldd	r6, Y+14	; 0x0e
    4994:	7d 84       	ldd	r7, Y+13	; 0x0d
    4996:	8c 84       	ldd	r8, Y+12	; 0x0c
    4998:	9b 84       	ldd	r9, Y+11	; 0x0b
    499a:	aa 84       	ldd	r10, Y+10	; 0x0a
    499c:	b9 84       	ldd	r11, Y+9	; 0x09
    499e:	c8 84       	ldd	r12, Y+8	; 0x08
    49a0:	df 80       	ldd	r13, Y+7	; 0x07
    49a2:	ee 80       	ldd	r14, Y+6	; 0x06
    49a4:	fd 80       	ldd	r15, Y+5	; 0x05
    49a6:	0c 81       	ldd	r16, Y+4	; 0x04
    49a8:	1b 81       	ldd	r17, Y+3	; 0x03
    49aa:	aa 81       	ldd	r26, Y+2	; 0x02
    49ac:	b9 81       	ldd	r27, Y+1	; 0x01
    49ae:	ce 0f       	add	r28, r30
    49b0:	d1 1d       	adc	r29, r1
    49b2:	0f b6       	in	r0, 0x3f	; 63
    49b4:	f8 94       	cli
    49b6:	de bf       	out	0x3e, r29	; 62
    49b8:	0f be       	out	0x3f, r0	; 63
    49ba:	cd bf       	out	0x3d, r28	; 61
    49bc:	ed 01       	movw	r28, r26
    49be:	08 95       	ret

000049c0 <_exit>:
    49c0:	f8 94       	cli

000049c2 <__stop_program>:
    49c2:	ff cf       	rjmp	.-2      	; 0x49c2 <__stop_program>
